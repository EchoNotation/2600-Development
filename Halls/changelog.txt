--- HORRID HALLS CHANGELOG --- (CATACRAWLER)

7/6/21
	-Created project, along with extremely basic NTSC kernel
	-Maze generation algorithm designed in Python script
7/8/21
	-Changed kernel to be based on timers/loops instead of DASM macros
	-Reset switch resets the game completely
7/10/21
	-Maze rendering kernel
	-Subroutine for accessing maze data from x,y coordinates
	-Preliminary maze rendering logic
	-Added ability for the player to turn in place
7/11/21
	-Added ability for the player to move through the maze
9/7/21
	-Removed roof over entrance graphics, trying to look more like a gap than a door.
9/12/21
	-Added compass at top of screen.
9/14/21
	-Added alphanumeric font
	-Replaced spaces with tabs everywhere
	-Changed GetMazeData subroutine to use local labels instead of global ones.
9/15/21
	-Added some preliminary graphics for avatars
	-Start of UI and text rendering code
9/16/21
	-More text rendering code
	-Holding the down button causes HP and MP to be visible instead of names/avatars
	-Realization that font needs to be remade
9/22/21
	-Remade font
		-Now allows for blanks, data is spread out across different pages
	-Stable text rendering + kernel!
9/28/21
	-Added subroutine for clearing all maze data. Will be useful when ORing later.
	-Started subroutine for random maze generation, very little implemented.
10/5/21
	-Random maze generation appears to work, as long as mazeWidth is even.
10/6/21
	-Converted game to use 2*4K bankswitching setup. Hopefully one bank can be used during battle, and the other when
	not in battle.
	-Created generic kernel for battle bank
	-Code refactoring, labels starting with M are in the maze bank, labels starting with B are in the battle bank
10/7/21
	-Preliminary work on battle scene rendering, text and battle box
	-Fixed a bug where attempting to view hp&mp in battle would encounter an invalid opcode
10/8/21
	-Ability to view character's class and level in battle
	-Added position indicator in battle, as well as variable representing it
10/10/21
	-Modified MUpdateMazeRenderingPointers to use tempPointers2-4, saving 8 bytes of RAM
	-Pressing down in maze mode now shows character class and level, not HP and MP
	-Party position can now be viewed in maze mode
10/12/21
	-Starting work on menu rendering and cursor movement
10/14/21
	-Battle options can now be selected and stored per battler
		-No corresponding logic yet of course
	-Improved input detection code
10/18/21
	-Beginning process of swapping all rendering related stuff into 1 bank, and moving logic into the other bank
		-Mostly successful! Just need to fix all the random bugs
			-Compass misaligned
			-Drawing HP/MP in maze view takes 3 extra scanlines
			-Shouldn't be able to hold left and right to see UI in maze view
			-Maze view input handling seems bad.
10/22/21
	-Fixed horizontal alignment of compass
	-RDrawCharacterInfo subroutine now takes into account whether or not the party is in battle.
	-Fixed LUpdatePlayerMovement to account for the new double input prevention scheme
	-Fixed input handling to no longer be dependent on being in battle
	-Can no longer move throughout the maze while in battle
	-Able to change party positioning in maze view
	-Party members can be highlighted
	
	-Need to fix couple of scanline count related issues with DrawCharacterInfo, but that code should be nearly complete
10/23/21
	-RDrawCharacterInfo timing issues now appear to be fixed. Albeit a little jankily
		-I think that subroutine may now be completely finished.
	-Renamed change to move
	-Fixed a bug where the magus and ranger classes could not be highlighted
	-Decided to fix mazes to be 8x8 to save RAM on storing mazeWidth and halfMazeWidth
	-Designed+picked first revision of spells
	-Added spell and battle message literals, along with tables that point to said literals
		-These take up a lot of space...
	
	-Realization that rendering code may need to have access to the spell listings for each class...
		-Probably okay, because the spell list data shouldn't be too long
10/24/21
	-Functional battle message rendering
	-Added table for spell colors
	
	-Starting work on spell list rendering, hopefully saving a lot of ROM
10/25/21
	-Rewrote Battle Actions menu rendering to use a lot less ROM
	-Removed PARTY GOT XP message in order to make room for BACK in the spell text bank
	-Added spell list data for the three spellcasting classes, although no code uses it yet.
10/26/21
	-Spell list menu rendering
	-Advanced menuing routines, although there will need to be more associated code for targeting...
		-Point is, spells can now be selected
	-Number of spells shown and what spells are shown is determined by level and class
	-Fixed an issue with needing to render fewer than 3 things in a menu
	-Decided to cut down to 3 enemies maximum, freeing 2 bytes of RAM and simplifying eventual rendering a bit
	
	-Converted cartridge to use the 16KiB F6 bankswitching scheme instead
		-Allows a lot more space for enemy graphics as well as sound effects and music
			-Still have a lot of features to implement, so seems like the right idea
			-This game idea is pretty ambitious after all
10/27/21
	-Added bankswitching connections for bank 2 to handle enemy rendering
	-Created some basic subroutines for rendering enemies based on preset graphics and color information
		-Untested, timing in EDrawLargeEnemy is certainly wrong
		
	-Add highlighted but invalid color. (Spells when out of MP, CAST when not a spellcaster)
10/28/21
	-Some basic functional enemy rendering
		-Can only support up to two small enemies, or one large enemy
10/29/21
	-Going to amend to small, medium and large enemies, making 4 small, 1 medium in place of 2 small, or 1 large possible
	-Starting code that can use enemyIDs to get size, graphical, and color information for enemy rendering
		-Currently unstable in terms of scanline count and also behavior when pressing left and right???
10/31/21
	-Fixed color and graphical stability of enemy rendering when pressing left and right
	-Modified (and simplified) enemy rendering code so that all valid combinations of enemies use constant scanlines
	
	-Starting work on spell and fight targeting logic
11/1/21
	-Decision to make target selection render in the menu/message location
	-Ally and enemy targeting logic works correctly with setting battle actions, but there is no rendering code in place
	-RDrawAllyTargeting completed, so spells targeting allies can be properly selected
	-RDrawEnemyTargeting completed, so fighting and spells targeting enemies can be properly selected
		-Does not support names for enemies, just says ENEMY, that functionality should be easy to add in future
	-Fighting and casting spells with targeting do not prompt target selection if there is only 1 enemy
	
	-Need to sort out messages for enemy actions...
12/21/21
	-Beginning work on message system rework
12/22/21
	-Added distinction between source and target battler names in message system
	-New system supports 32 unique enemies, each with their own color and name.
	-Completed message system rework, I think.
	-Enemy targeting menu now uses enemy names.
	-Fixed bug to do with non-targeted spell selection
12/23/21
	-Changed some messages around in order to allow for party members recovering from unconsciousness and status effects
	-Added balanceable lookup tables for all classes' stats
	-Added even more messages
	
	-Beginning work on actual battle logic
		-Moving and Running are close to functional, but these are the two easiest
12/24/21
	-Added a function for converting from binary to decimal
	-Beginning work on FIGHTing
		-Seems to mostly work for both allies and enemies
	-Added LDetermineNextBattler subroutine
		-Unstable behavior for carrying out these actions, needs quite a lot of debugging.
		-Does sort of work however, actions can be taken in turn.
		-Repeats the action of the person in position 0 a lot.
		-Investigate ways to make the first action after a new currentBattler is set happen without pressing the button an 
			additional time
		
	Need to sort out how enemy death works, what happens to actions that target dead creatures.
12/26/21
	-Battle system is a lot more stable now
		-Last textbox of last message before going back to menu gets cut off
		-Need to deal with how party and enemy death affects actions still
	-Initiative is now properly calculated for both allies and enemies
	-Last battle messages are no longer cutoff by the action menu appearing
	-Semi-functional combat
		-Need to implement death and spellcasting
		-Also lots of status effects, partyPos, and other things are not correctly accounted for yet.
12/27/21
	-Started working on routines that are necessary for dealing with enemy death
1/2?/22
	-Did the majority of the work on HallsEnemyPainter, a paint tool for drawing the enemy graphics for this game.
2/28/22
	-Finished work on HallsEnemyPainter tool, which will be extremely useful for making all of the enemy graphics
	
	-Made the necessary changes to the Medium and Large enemy drawing routines in order to display the output of the paint
	tool correctly.
3/1/22
	-Fixed the ROM page that the spell names were drawing from. Was $FA, needed to be $F9.
	-Selecting spells now advances to the correct targeting menu.
	-Fixed a minor graphics bug where ally targeting text was 1 scanline higher than the rest of the text.
3/2/22
	-Combined the four bytes used for party mood into two, saving two bytes of RAM
	-Added effectCounter, so different spells can flash for different amounts of time
		-It would be swell if there were multiple spell effects, instead of just different flash lengths.
	-Added mazeLevel variable, which is going to be needed if a run will ever end.
		-No implementation yet
	-Basic effect system
3/3/22
	-Fixed the rendering system, so that no HMOVE lines are ever present, and so enemy rendering is based on position now
		-This will need some changes in current logic, but should be fine overall.
		-Targeting is the most affected by this system
			-There is now a disconnect between the rendering system and targeting system indices
			-Make a subroutine for converting from menu position to target id
	-Added IndexToEnemyPosition functions in L and R, which will hopefully simplify the targeting mess a little
	-Auto-targeting when only 1 enemy is left alive sets target position correctly
	-Two enemy targeting is relatively stable, code just runs too long...
3/4/22
	-Three enemy targeting logic is fixed, code still runs too long though
	-Scanlines and targeting logic now seems to be completely fixed.
	-Preliminary death capability
		-Kinda works
		-hasAction does not get set correctly on new turns, nor do battles seem to have any natural way of ending
	-Added message for TARGET DOWN, solving an issue that didn't seem to have any better solution
	-hasAction is now set correctly at the end of each turn
3/5/22
	-Refactored high-level battle logic, which seems to be an improvement
	-Fixed a bug with initiative that caused the first battler to always go first
	-Party members can now die correctly
	-Battles can be won or lost
		-Still no character advancement code
3/6/22
	-Made it so that battle text cannot be progressed if a visual or sound effect is in progress
	-Fixed a scanline count bug that had to do with pressing down out of battle
	-Decided to allocate the last byte to aoeTargetID, which should make spellcasting code a lot simpler
	-Added TARGET EXILED message, for use with banish spell
	-Starting spellcasting framework
	-Replaced REVIVE spell with AEGIS, which grants all allies a shield
		-Restoring any health to a downed party member revives them, which includes campfires
3/7/22
	-Beginning of spellcasting code, mostly just setting up targeting
3/9/22
	-Relocated tempPointer4-6 to use temp4-6 as the low byte, saving 3 bytes of RAM
	-FIGHTs directed to spots that are now empty miss.
	-Added different maze colors that change depending on mazeLevel
3/14/22
	-Added ranger spell list for now
		-Rangers don't get any mana though
	-Modified magus spell list
	-Refactored BLIZRA to VANISH, and MUTE to BLIGHT
3/23/22
	-Added LGetBattlerMagic subroutine
4/5/22
	-Rangers actually get magic and MP now
	-Added LGetEnemyStatus subroutine
4/10/22
	-Fixed a bug where the first party member could still pick actions even when unconscious.
6/23/22
	-Added LGetEnemyResistances subroutine
	-Trying a rewrite of the spellcasting routines
7/23/22
	-Fixed bug to do with cursor pos after ending battle
	-Modified lots of battle logic to depend on enemyHP instead of enemyIDAndStatus, allowing for better messages.
		-TARGET message component is now obsolete
7/24/22
	-Added some new moods
	-Refactored party level to be stored in the same byte as mazeLevel
	-Refactored moods to be stored with the character's class information, saving 2 bytes.
	-Made compass draw in the exact center of the screen
	-Added LOverrideAvatar subroutine
	-Added LDecimalToBinary subroutine
	-Added LUpdateAvatars subroutine
		-Now the avatar icons will update corresponding to the health of that member
	-Fixed a bug that incorrectly displayed who was paralyzed in the X CANNOT MOVE message
7/25/22
	-Modified PC stat tables to use less ROM
	-Preliminary Advanced Effect System
	-Lots of scuffed bankswitching code needed to convert the highlighting system to use the effect system
	-Removed frameCounter variable
	-Removed ESpellColors
7/31/22
	-Moved some maze related functions from L to S.
		-Still need to implement the necessary bankswitching
9/6/22
	-Working bankswitching for moved maze logic
11/22/22
	-Working python implementation of spiral maze generation
11/23/22
	-Implemented spiral maze generation into assembly
		-Still don't know if it completely works without re-writing SUpdateMazeRenderingPointers though ;)
11/24/22
	-Modified maze related functions to support edges instead of room-based maze storage.
		-Need to debug player movement and maze rendering code first in order to verify maze generation logic
	-Designed function-oriented bankswitching scheme (allowing L bank to call functions stored in S bank)
11/25/22
	-Fixed bugs in SUpdatePlayerMovement and SUpdateMazeRenderingPointers
	-Fixed maze generation bug that prevented North and West corners from forcing an adjacent exit
11/27/22
	-Spell additions and deletions (design work)
		-Also decided to add GUARD and PARRY for KNIGHT and ROGUE respectively
11/29/22
	-Lots of spell list redesign, which will lead to messaging system shenanigans

	-Added new spell text
	-Message system stability
11/30/22
	-Renamed FIGHTR to KNIGHT
	-New spell colors
	-Updated Wizard and Cleric spell lists to use the new spells
		-Also updated Paladin and Ranger spell lists, but the menu rendering doesn't account for them yet	
	-Moved compass 1 pixel to the left :)

	-Did some RAM allocation to account for new status rules
	-Fixed LGetEnemyResistances subroutine

	-Starting work on new menu rendering routines
12/1/22
	-Fixed enemy name assembly directive bug
	-Finished rendering side of new battle menu routines (spells and scanline stability)
	-Started work on battle menu routine rewrite
1/25/23
	-Fixed bug where MazeRenderingPointers would interpret the far room as the room the player is in when facing west
	-Started work on changing RDrawCharacterInfo's behavior out of battle
		-Need to save a single cycle in the ShowingHPAndMP portion
			-Changing the player highlighting effect to be effect #0 is also an option
1/26/23
	-Saved enough time in the RDrawingCharacterInfo subroutine
	-Work in SUpdatePlayerMovement to include new menuing logic for party battle position
2/4/23
	-Pressing button while in maze view moves forward 1 room.
	-Added new graphics for Sleeping and Dead avatars (subject to change again)
2/5/23
	-Fixed indexing bug in LUpdateAvatars
	-Reorganized RAM so that enemy HP is immediately after party HP
	-Added invalid text color for spell list rendering
2/6/23
	-Changed input handling logic to be cleaner, but require an extra byte of RAM
	-Created arrow that points towards the exit location
2/8/23
	-Removed highlightedIndex, swapping all of its uses with currentBattler
	-Added color to the battlebox when current menu = $81 (targeting enemies)
2/9/23
	-Undid color for enemy targeting, instead highlighting the appropriate part of the battlebox
2/11/23
	-Fixed graphical issue with highlighting enemies
	-Starting work on LUpdateMenuRendering
		-Battle option selection done
		-Other ally targeting done
		-Normal ally targeting done
2/12/23
	-Enemy targeting menu done
	-Other mode menu done (currently just supports NO SPELLS KNOWN, will eventually need to support camping)
	-Spell selection menu done, now supporting half casters!
	-Very basic mana related logic

	-Starting work on updating LUpdateMenuAdvancement
2/13/23
	-FIGHT actions can be selected properly
	-MOVE actions can be selected properly
	-RUN actions can be selected properly
	-currentBattler increases correctly during action selection?

	-Selecting CAST option shows correct spell list based on party level (even for half casters!)
	-Selecting BACK option in spell list works properly

	-All spell targeting menu logic looks good
2/14/23
	-Cannot select spells that the battler doesn't have the mana for
	-Fixed characterinfo graphics glitch when advancing battle
	-Changed lots of functions to be party member/enemy agnostic
	-Rewrote LDetermineNextBattler to be far more space efficient
	-Refactored some high level battle logic, seemingly maintaining the correct behavior
2/15/23
	-Added LCheckBattlerStatus, along with seemingly sound logic for sleep and blight
	-LApply damage now returns 0 if the battler survived the damage, and FF if they died
	-Implemented MOVE action
	
	-Wrote some not-very-thoughtful running code that needs to be tested
		-Some sort of scanline issue when running (takes too long??)
2/16/23
	-Relocated menuing logic to happen during VBlank instead of overscan to account for some worst cases in battle logic runtime
		-Causes a single frame issue after inputting all actions
	-The party information is now shown in the exact same place in both maze and battle views
2/18/23
	-Relocated menuing routines to Overscan and battle related logic to VBlank
		-There is a 1-frame graphical glitch with the maze pointers when running
		-Interestingly, this bug does not occur when setting inBattle directly to 0
	-Added some functions for shifting a large number of times, which probably saved some space
	-Started work on FIGHT action

	-Guard and Parry are rather obnoxious abilities to implement
		-Guard is worse (maybe make it a priority ability that just grants defense for the turn?)
3/24/23
	-FIGHTing bugfixes, seems to fully work now (accounts for enemy resistances and party frontline/backline pos)
	-Implemented SHARP status for basic attacks
3/25/23
	-Simplified running code to reduce ROM usage (running is deterministic now)
	-LApplyDamage now contains the logic for SHARP, party position, and GUARD damage changes
	-Fixed minor graphical issue where battle menu would render before being updated for 1 frame after a battle round ended 
	-Added LEnemyExperience table
	-Added messages relating to battle and game ending states

	-Wrote lots of untested character advancement and battle ending logic
	
	-There is most likely not enough room in L for all the spellcasting logic... Need to figure out what all can be relocated to S.
3/26/23
	-Bugfixes around character advancement logic
		-Still a problem with the 4th party member being a half-caster that didn't learn a spell
		-Still untested with martial classes
4/29/23
	-Last party member no longer always "learns a spell" no matter the context.
	-Martial classes can no longer "learn a spell" when leveling up.
4/30/23
	-Starting work on new spellcasting logic
5/1/23
	-Casting spells costs mana now
	-More spellcasting work
	-Casting a single target spell with only a single enemy no longer opens a corrupted menu

	-Redefining DONATE to WISH, which:
		-clears all negative party status
		-takes all the Cleric's MP
		-restores other party members HP and MP by an amount equal to half the MP lost by the cleric?

		-Need to make the appropriate message and text changes for this
5/2/23
	-GUARD is now a priority move for allies
	-Refactored/combined LGetTargetFromActionOffensive and LGetTargetFromActionDefensive
	-Changed ROGUE color to be reddish salmon instead of grey because it happened to exactly match TEXT_COLOR
	-Changed some other class colors around to have more favorable contrast
	-Guarded and parrying statuses are cleared after each combat round
	-PARRY ability is implemented for enemies and allies
	-Relocated LUpdateCompassPointerBoss into the S bank, and moved some stuff around to create more space for spellcasting code
5/3/23
	-Attacks from ranged classes or ranged enemies can no longer be riposted
		-Last bit of EnemyResistances, rangedness can be checked from LGetBattlerResistances
	-Blight and spell damage is no longer affected by party position
	-Enemy resistances actually reduce damage now
	-Changed parry related messages to X IS ON GUARD and X BLOCKS
5/14/23
	-Added some new untested subroutines for managing AoE effects
	-Started work on subroutines LApplyHealing and LApplyRestoration
		-Still incomplete
	-Added max MP extension to LGetBattlerStat
	-Did some enemy planning/design work
6/22/23
	-Fixed bug with spell rendering where 8th level spells were not selectable until 9th level.
	-Continuing work on spellcasting logic
	-Relocated LUpdateMenuAdvancement and LUpdateMenuRendering to the S bank.
6/23/23
	-Fixed bug where the enemy targeting menu would be drawn incorrectly.
	-Some of the most basic spells actually work now!
	-Modified text to support the WISH and SHIFT spells, need to add appropriate messages for WISH, TRANCE, and SHIFT though.

	-Implemented LCheckSpellHit & LCheckSpellShield for more complete spellcasting logic.
		-Shielding single target spells seems to work well!
6/24/23
	-Added LDetermineSpellPower subroutine, which continues to abstract/simplify/reduce size of spellcasting logic
		-Currently supports 1*Magic, 0.5*Magic, 1.5*Magic, and 1*Attack+0.5*Magic
	-Changed Paladin color again
	-Completely refactored DONATE to WISH
	-Added messages needed for WISH, TRANCE, and SHIFT
	-Changed RMazeColors to reflect the current pattern:
		---  THE GROUNDS  ---
		---  THE CASTLE   ---
		--- THE CATACOMBS ---
		---   THE ABYSS   ---
	-Finished implementing single target spells (haven't tested every single one...)
	-Implemented basic AoE framework, and BLIZRD seems to work well
	-Refactored LApplyHealing and LApplyRestoration, which seem to work alright now
6/25/23
	-Implemented CHAOS
		-Fixed bugs relating to BLIGHT status effect
	-Implemented TRIAGE
	-Implemented BANISH
	-Implemented METEOR
	-Implemented WISH
	-Fixed bug where spell mana costs were subtracted in binary mode instead of decimal
	-Fixed bug where LApplyRestoration compared two numbers in different bases
6/26/23
	-Battle system optimization
		-Relocated some functions into dead bankswitching code areas
		-LApplyPositionalDamageModifier
	-Rendering engine optimization
		-Saved like 100 bytes of code in RDrawCharacterInfo
	-Started work on RDrawCharacterInfoMinimal, which will be used on the startup screen
	-Swapped high level game logic and initialization code into the S bank, leaving L with more room for battle specific code

Known Bugs:
	-Exiting battle shows glitchy maze for 1 frame. SUpdateMazeRenderingPointers isn't called when exiting battle
		-Probably going to wait to fix this until battle transitions are better defined
	
	-Battle system behaves strangely if hasAction is inappropriately set when entering the battle, check LDetermineNextBattler?

	-If the last party member doesn't learn a spell, it takes an extra input to end the battle
		-This is actually a problem that will need to be addressed for all AoE effects

TODO:
	-Battle transitions?

	-Campfire rendering??
		-Give campfire battle-like scene? Yes

	-Make simpler version of RDrawCharacterInfo for main menu kernel usage

	-Battle system optimization
	
	-Move game logic control flow out of L bank??

	-How is enemy AI going to be stored?
		-Number of action slots, list of meta-enemyActions
			-Meta-enemyActions might be along the lines of "attack", "heal ally", "paralyze enemy", etc.
			-These meta-actions are then converted into actual enemyAction by LDetermineEnemyAI routine
			-More sophisticated, less data space, more code space. Seems like a good idea
		-Make AI dependent on health for bosses
			
	-How is encounter data going to be stored?
		-Depends on whether or not certain groups of enemies should appear together
			-If not, then just have a list of which enemies can appear on which floors
				-Decreased data complexity, increased code complexity, worse design control, higher encounter variety
				-Will probably need to be this option due to ROM limitations
			-If yes, then need to actual store all possible encounters by floor
				-Increased data complexity, decreased code complexity, better game design, lower encounter variety

	Requirements for functional game loop:
		-Functional combat - 80%
			-Control Flow/Battler Selection - 100%
			-Fighting - 100%
			-Spellcasting - 100%
			-Moving - 100%
			-Running - 100%
			-Functional status effects - 100%
			-Enemy AI - 0%
				-Special moves - ??%
			-Character advancement - 85% (Slight refactor required to fix bug with (last position) party members who didn't learn a spell)
			-Mana implementation - 100%
		-Additional maze logic
			-Moving between floors
			-Encounter generation
				-Affected by mazeLevel
			-Transitioning between maze and battles
			-Campfires
			-Bosses

		-Advanced effect system - 80% (mostly used by spells)
			-No routine for setting a visual effect
			
		-Sound engine - 0%
		
		-Name entry and class selection screen - 0%
		-Title screen
			-Should these two be the same screen? Yes
			-What bank will this be in? S?
		
	Should have functional game loop first:
		-Create all enemies
			-Graphics
			-AI
		-Create all encounter tables?
		-Create all visual effects
		-Create all sound effects
			-Add sound effects in all the relevant places
		-Try to balance everything

	Version 1.1 considerations:
		-Maze input behavior:
			-Make it so that the button enters into the menu when in maze view?
			-Make back button move you backwards while maintaining facing direction
		-Position of enemy sprites in battle:
			-Not all enemies are centered, create more of a "group skirmish" appearance
			-Potentially try to center enemies more precisely?
		-Battle system quirks:
			-Shields block friendly magic (HEAL, TRIAGE, TRANCE, WISH, SHARP, SHIELD)
			-Avatars are not updated after the last logic frame for a single round
			-Being guarded reduces blight damage.
		-Battle system improvements:
			-Introduce random value offsets based on party level (attack and healing amounts)
			-Make party members gain delta HP, delta MP when leveling up
			-Add resistances to party members
			-Should elemental-flavors be resistances or vulnerabilities?
			-Add damage types to basic attacks
			-Consider refactoring X LOSES Y HP to X TAKES Y DMG
		-Hear a "roar" when getting near the boss?