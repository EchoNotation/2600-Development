------- FILE halls.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE halls.asm
      3  0000 ????
      4  0000 ????						; --- Constants ---
      5  0000 ????						;Kernel related
      6  0000 ????	       00 2c	   VBLANK_TIMER_DURATION =	44
      7  0000 ????	       00 24	   OVERSCAN_TIMER_DURATION =	36
      8  0000 ????
      9  0000 ????						;Input related
     10  0000 ????	       00 10	   UP_MASK    =	%00010000
     11  0000 ????	       00 20	   DOWN_MASK  =	%00100000
     12  0000 ????	       00 40	   LEFT_MASK  =	%01000000
     13  0000 ????	       00 80	   RIGHT_MASK =	%10000000
     14  0000 ????
     15  0000 ????						;Rendering related
     16  0000 ????	       00 08	   CHARACTER_HEIGHT =	8
     17  0000 ????	       00 26	   MAZE_HEIGHT =	38
     18  0000 ????	       00 02	   BATTLE_BOX_COLOR =	$02
     19  0000 ????	       00 06	   TEXT_COLOR =	$06
     20  0000 ????	       00 0e	   TEXT_HIGHLIGHTED_COLOR =	$0E
     21  0000 ????	       00 36	   TEXT_INVALID_COLOR =	$36
     22  0000 ????	       00 2a	   FRONTLINE_INDICATOR_COLOR =	$2A
     23  0000 ????	       00 8a	   BACKLINE_INDICATOR_COLOR =	$8A
     24  0000 ????
     25  0000 ????	       00 00	   EMPTY      =	0
     26  0000 ????	       00 01	   A	      =	1
     27  0000 ????	       00 02	   B	      =	2
     28  0000 ????	       00 03	   C	      =	3
     29  0000 ????	       00 04	   D	      =	4
     30  0000 ????	       00 05	   E	      =	5
     31  0000 ????	       00 06	   F	      =	6
     32  0000 ????	       00 07	   G	      =	7
     33  0000 ????	       00 08	   H	      =	8
     34  0000 ????	       00 09	   I	      =	9
     35  0000 ????	       00 0a	   J	      =	10
     36  0000 ????	       00 0b	   K	      =	11
     37  0000 ????	       00 0c	   L	      =	12
     38  0000 ????	       00 0d	   M	      =	13
     39  0000 ????	       00 0e	   N	      =	14
     40  0000 ????	       00 0f	   O	      =	15
     41  0000 ????	       00 10	   P	      =	16
     42  0000 ????	       00 11	   Q	      =	17
     43  0000 ????	       00 12	   R	      =	18
     44  0000 ????	       00 13	   S	      =	19
     45  0000 ????	       00 14	   T	      =	20
     46  0000 ????	       00 15	   U	      =	21
     47  0000 ????	       00 16	   V	      =	22
     48  0000 ????	       00 17	   W	      =	23
     49  0000 ????	       00 18	   X	      =	24
     50  0000 ????	       00 19	   Y	      =	25
     51  0000 ????	       00 1a	   Z	      =	26
     52  0000 ????	       00 1b	   NUMBER0    =	27
     53  0000 ????	       00 1c	   NUMBER1    =	28
     54  0000 ????	       00 1d	   NUMBER2    =	29
     55  0000 ????	       00 1e	   NUMBER3    =	30
     56  0000 ????	       00 1f	   NUMBER4    =	31
     57  0000 ????	       00 20	   NUMBER5    =	32
     58  0000 ????	       00 21	   NUMBER6    =	33
     59  0000 ????	       00 22	   NUMBER7    =	34
     60  0000 ????	       00 23	   NUMBER8    =	35
     61  0000 ????	       00 24	   NUMBER9    =	36
     62  0000 ????
     63  0000 ????						;Memory related --- This is actually a bad idea and should maybe be changed
     64  0000 ????	       00 fe	   MAZE_POINTER_PAGE_1 =	$FE
     65  0000 ????
     66  0000 ????						;Maze related
     67  0000 ????	       00 08	   NORTH      =	$08
     68  0000 ????	       00 04	   SOUTH      =	$04
     69  0000 ????	       00 02	   EAST       =	$02
     70  0000 ????	       00 01	   WEST       =	$01
     71  0000 ????	       00 08	   MAZE_WIDTH =	8
     72  0000 ????
     73  0000 ????						;Battle related
     74  0000 ????	       00 40	   GUARDED_MASK =	$40
     75  0000 ????	       00 20	   SHIELDED_MASK =	$20
     76  0000 ????	       00 18	   ASLEEP_MASK =	$18
     77  0000 ????	       00 04	   PARRYING_MASK =	$04
     78  0000 ????	       00 02	   SHARPENED_MASK =	$02
     79  0000 ????	       00 01	   BLIGHTED_MASK =	$01
     80  0000 ????
     81  0000 ????	       00 80	   LEGENDARY_RESIST_MASK =	$80
     82  0000 ????	       00 40	   PHYSICAL_RESIST_MASK =	$40
     83  0000 ????	       00 20	   FIRE_RESIST_MASK =	$20
     84  0000 ????	       00 10	   ICE_RESIST_MASK =	$10
     85  0000 ????	       00 08	   HOLY_RESIST_MASK =	$08
     86  0000 ????	       00 04	   ELECTRIC_RESIST_MASK =	$04
     87  0000 ????	       00 02	   POISON_RESIST_MASK =	$02
     88  0000 ????
     89 U00f4 ????				      SEG.U	Variables
     90 U0080					      ORG	$80
     91 U0080
     92 U0080		       00	   charIndex  ds	1
     93 U0081		       00	   char1      ds	1	; -MMM-CCC : M - Mood, C - Class
     94 U0082		       00	   char2      ds	1
     95 U0083		       00	   char3      ds	1
     96 U0084		       00	   char4      ds	1
     97 U0085		       00 00 00 00 name1      ds	4
     98 U0089		       00 00 00 00 name2      ds	4
     99 U008d		       00 00 00 00 name3      ds	4
    100 U0091		       00 00 00 00 name4      ds	4
    101 U0095		       00 00 00 00 name5      ds	4
    102 U0099		       00	   hp1	      ds	1
    103 U009a		       00	   hp2	      ds	1
    104 U009b		       00	   hp3	      ds	1
    105 U009c		       00	   hp4	      ds	1
    106 U009d		       00	   mp1	      ds	1
    107 U009e		       00	   mp2	      ds	1
    108 U009f		       00	   mp3	      ds	1
    109 U00a0		       00	   mp4	      ds	1
    110 U00a1		       00	   partyBattlePos ds	1	; ----4321 a 1 in that position indicates that that character is in the frontline ;Might be able to share
    111 U00a2		       00	   playerX    ds	1	;0000XXXX
    112 U00a3		       00	   playerY    ds	1	;0000YYYY
    113 U00a4		       00	   playerFacing ds	1	; 000000XX 00 is east, 01 is south, 10 is west, 11 is north
    114 U00a5		       00	   exitLocation ds	1
    115 U00a6		       00	   campfireLocation ds	1
    116 U00a7		       00	   previousInput ds	1
    117 U00a8		       00	   temp1      ds	1
    118 U00a9		       00	   temp2      ds	1
    119 U00aa		       00	   temp3      ds	1
    120 U00ab		       00	   temp4      ds	1
    121 U00ac		       00	   tempPointer4 ds	1
    122 U00ad		       00	   temp5      ds	1
    123 U00ae		       00	   tempPointer5 ds	1
    124 U00af		       00	   temp6      ds	1
    125 U00b0		       00	   tempPointer6 ds	1
    126 U00b1		       00 00	   tempPointer1 ds	2
    127 U00b3		       00 00	   tempPointer2 ds	2
    128 U00b5		       00 00	   tempPointer3 ds	2
    129 U00b7		       00	   rand8      ds	1
    130 U00b8		       00	   experienceToNextLevel ds	1
    131 U00b9		       00	   currentMenu ds	1
    132 U00ba
    133 U00ba		       00	   cursorIndexAndMessageY ds	1
    134 U00bb		       00	   startingCursorIndexAndTargetID ds	1
    135 U00bc		       00	   aoeTargetID ds	1
    136 U00bd		       00	   highlightedIndex ds	1
    137 U00be		       00	   menuSize   ds	1
    138 U00bf		       00	   inBattle   ds	1
    139 U00c0		       00	   currentBattler ds	1
    140 U00c1		       00	   currentBattlerAttack ds	1
    141 U00c2		       00	   currentBattlerSpeed ds	1
    142 U00c3
    143 U00c3		       00 00 00 00*vEdges     ds	8	;Vertical edges of the maze   0xxxxxxx
    144 U00cb		       00 00 00 00*hEdges     ds	7	;Horizontal edges of the maze xxxxxxxx
    145 U00d2
    146 U00d2		       00 00 00 00 battleActions ds	4
    147 U00d6		       00 00 00 00 enemyHP    ds	4
    148 U00da		       00 00 00 00 enemyID    ds	4
    149 U00de		       00 00 00 00*battlerStatus ds	8	;TGSSlPAB - T:Guard/shield timer, G:Guard flag, S:Shield flag, Sl:Sleep timer, P:Parrying, A:Sharpened, B:Blighted
    150 U00e6		       00	   enemyAction ds	1
    151 U00e7		       00	   hasAction  ds	1
    152 U00e8		       00	   currentMessage ds	1
    153 U00e9		       00 00 00    menuLines  ds	3
    154 U00ec		       00	   highlightedLine ds	1
    155 U00ed		       00	   currentSound ds	1
    156 U00ee		       00	   soundOffset ds	1
    157 U00ef		       00	   currentEffect ds	1
    158 U00f0		       00	   effectCounter ds	1
    159 U00f1		       00	   effectCountdown ds	1
    160 U00f2		       00	   mazeAndPartyLevel ds	1
    161 U00f3		       00	   returnValue ds	1
    162 U00f4
    163  10000 ????				       SEG	CODE
    164  c000					      ORG	$C000
    165  c000					      RORG	$F000
    166  c000
    167  c000							;BANK 0 - CONTAINS LOGIC AND DATA PERTAINING TO RENDERING THE MAZE VIEW AND THE MAJORITY OF THE BATTLE SCENE
    168  c000
    169  c000							;Sets all registers and RAM to 0. Also ensures that the processor is not in decimal mode.
    170  c000				   RReset
    171  c000		       0c f7 1f 	      nop	$1FF7	;Switch to bank 1, which contains the startup information
    172  c003
    173  c003				   RMainPicture
    174  c003		       a2 80		      ldx	#$80
    175  c005		       86 01		      stx	VBLANK	;Disable blanking
    176  c007
    177  c007							;Draw picture to the screen
    178  c007		       a5 bf		      lda	inBattle
    179  c009		       f0 03		      beq	RRenderMazeView
    180  c00b		       4c fd f0 	      jmp	RBattleRendering
    181  c00e
    182  c00e				   RRenderMazeView
    183  c00e				   RPlaceCompass
    184  c00e		       85 02		      sta	WSYNC
    185  c010		       a5 f2		      lda	mazeAndPartyLevel
    186  c012		       4a		      lsr
    187  c013		       4a		      lsr
    188  c014		       4a		      lsr
    189  c015		       4a		      lsr
    190  c016		       a8		      tay
    191  c017		       b9 6b fa 	      lda	RMazeColors,y
    192  c01a		       85 06		      sta	COLUP0
    193  c01c		       85 08		      sta	COLUPF
    194  c01e
    195  c01e							;Delay in order to put the compass in the middle of the screen
    196  c01e		       20 7c f2 	      jsr	RSpinWheels
    197  c021		       ea		      nop
    198  c022		       a9 c0		      lda	#$C0
    199  c024		       85 20		      sta	HMP0
    200  c026		       85 10		      sta	RESP0
    201  c028		       85 02		      sta	WSYNC
    202  c02a		       85 2a		      sta	HMOVE
    203  c02c		       a0 08		      ldy	#CHARACTER_HEIGHT
    204  c02e				   RDrawCompass
    205  c02e		       85 02		      sta	WSYNC
    206  c030		       88		      dey
    207  c031		       30 07		      bmi	RPrepareToDrawMaze
    208  c033		       b1 b1		      lda	(tempPointer1),y
    209  c035		       85 1b		      sta	GRP0
    210  c037		       4c 2e f0 	      jmp	RDrawCompass
    211  c03a				   RPrepareToDrawMaze
    212  c03a		       85 2b		      sta	HMCLR
    213  c03c		       c8		      iny
    214  c03d		       84 1b		      sty	GRP0
    215  c03f		       a0 26		      ldy	#MAZE_HEIGHT
    216  c041				   RDrawMaze
    217  c041		       85 02		      sta	WSYNC
    218  c043		       b9 00 ff 	      lda	ROutermost,y
    219  c046		       85 0d		      sta	PF0
    220  c048		       b1 b3		      lda	(tempPointer2),y
    221  c04a		       85 0e		      sta	PF1
    222  c04c		       b1 b5		      lda	(tempPointer3),y
    223  c04e		       85 0f		      sta	PF2
    224  c050		       b1 ab		      lda	(temp4),y
    225  c052		       aa		      tax
    226  c053		       b1 ad		      lda	(temp5),y
    227  c055
    228  c055		       ea		      nop
    229  c056		       ea		      nop
    230  c057		       ea		      nop
    231  c058		       ea		      nop
    232  c059		       86 0f		      stx	PF2
    233  c05b		       85 0e		      sta	PF1
    234  c05d
    235  c05d		       85 02		      sta	WSYNC
    236  c05f		       b9 00 ff 	      lda	ROutermost,y
    237  c062		       85 0d		      sta	PF0
    238  c064		       b1 b3		      lda	(tempPointer2),y
    239  c066		       85 0e		      sta	PF1
    240  c068		       b1 b5		      lda	(tempPointer3),y
    241  c06a		       85 0f		      sta	PF2
    242  c06c		       b1 ab		      lda	(temp4),y
    243  c06e		       aa		      tax
    244  c06f		       b1 ad		      lda	(temp5),y
    245  c071
    246  c071		       ea		      nop
    247  c072		       ea		      nop
    248  c073		       ea		      nop
    249  c074		       ea		      nop
    250  c075		       86 0f		      stx	PF2
    251  c077		       85 0e		      sta	PF1
    252  c079
    253  c079		       85 02		      sta	WSYNC
    254  c07b		       b9 00 ff 	      lda	ROutermost,y
    255  c07e		       85 0d		      sta	PF0
    256  c080		       b1 b3		      lda	(tempPointer2),y
    257  c082		       85 0e		      sta	PF1
    258  c084		       b1 b5		      lda	(tempPointer3),y
    259  c086		       85 0f		      sta	PF2
    260  c088		       b1 ab		      lda	(temp4),y
    261  c08a		       aa		      tax
    262  c08b		       b1 ad		      lda	(temp5),y
    263  c08d
    264  c08d		       ea		      nop
    265  c08e		       ea		      nop
    266  c08f		       ea		      nop
    267  c090		       ea		      nop
    268  c091		       86 0f		      stx	PF2
    269  c093		       85 0e		      sta	PF1
    270  c095
    271  c095		       88		      dey
    272  c096		       c0 30		      cpy	#MAZE_HEIGHT+10
    273  c098		       90 a7		      bcc	RDrawMaze
    274  c09a		       85 02		      sta	WSYNC
    275  c09c		       20 7c f2 	      jsr	RSpinWheels
    276  c09f		       20 7c f2 	      jsr	RSpinWheels
    277  c0a2		       20 7c f2 	      jsr	RSpinWheels
    278  c0a5		       85 14		      sta	RESBL
    279  c0a7		       a9 01		      lda	#1
    280  c0a9		       85 27		      sta	VDELBL
    281  c0ab		       85 02		      sta	WSYNC
    282  c0ad		       a0 00		      ldy	#0
    283  c0af		       84 0d		      sty	PF0
    284  c0b1		       84 0e		      sty	PF1
    285  c0b3		       84 0f		      sty	PF2
    286  c0b5		       84 80		      sty	charIndex
    287  c0b7
    288  c0b7				   RDrawPartyInfoMaze
    289  c0b7		       a2 03		      ldx	#$03	;Triplicate
    290  c0b9		       86 04		      stx	NUSIZ0	;Set both duplication registers to triplicate the sprites.
    291  c0bb		       86 05		      stx	NUSIZ1
    292  c0bd		       86 25		      stx	VDELP0
    293  c0bf		       86 26		      stx	VDELP1
    294  c0c1
    295  c0c1		       a2 10		      ldx	#$10	;Moves one color clock to the left.
    296  c0c3		       86 21		      stx	HMP1
    297  c0c5
    298  c0c5							;Need some sort of delay here in order to more or less center this data.
    299  c0c5		       ea		      nop
    300  c0c6		       ea		      nop
    301  c0c7		       85 10		      sta	RESP0
    302  c0c9		       85 11		      sta	RESP1
    303  c0cb		       85 02		      sta	WSYNC
    304  c0cd		       85 2a		      sta	HMOVE
    305  c0cf
    306  c0cf		       20 34 f4 	      jsr	RDrawCharacterInfo
    307  c0d2		       e6 80		      inc	charIndex
    308  c0d4		       85 02		      sta	WSYNC
    309  c0d6		       20 34 f4 	      jsr	RDrawCharacterInfo
    310  c0d9		       e6 80		      inc	charIndex
    311  c0db		       85 02		      sta	WSYNC
    312  c0dd		       20 34 f4 	      jsr	RDrawCharacterInfo
    313  c0e0		       e6 80		      inc	charIndex
    314  c0e2		       85 02		      sta	WSYNC
    315  c0e4		       20 34 f4 	      jsr	RDrawCharacterInfo
    316  c0e7
    317  c0e7		       a2 00		      ldx	#0
    318  c0e9		       86 04		      stx	NUSIZ0
    319  c0eb		       86 05		      stx	NUSIZ1
    320  c0ed		       86 25		      stx	VDELP0
    321  c0ef		       86 26		      stx	VDELP1
    322  c0f1		       86 80		      stx	charIndex
    323  c0f3
    324  c0f3		       a2 06		      ldx	#6	;This number is extremely arbitrary-- Because I don't really understand exactly how long the rendering of party info takes.
    325  c0f5
    326  c0f5				   RFinishMazePicture
    327  c0f5		       85 02		      sta	WSYNC
    328  c0f7		       ca		      dex
    329  c0f8		       d0 fb		      bne	RFinishMazePicture
    330  c0fa		       4c 75 f2 	      jmp	RAfterRendering
    331  c0fd
    332  c0fd
    333  c0fd
    334  c0fd
    335  c0fd
    336  c0fd				   RBattleRendering
    337  c0fd		       a2 04		      ldx	#4
    338  c0ff				   RWaitToDrawBattleBox
    339  c0ff		       85 02		      sta	WSYNC
    340  c101		       ca		      dex
    341  c102		       d0 fb		      bne	RWaitToDrawBattleBox
    342  c104
    343  c104		       4c c6 ff 	      jmp	RGoToEnemyDrawingBank
    344  c107
    345  c107				   RPlaceBattleText
    346  c107		       a9 ff		      lda	#$FF
    347  c109		       85 0e		      sta	PF1
    348  c10b		       85 0f		      sta	PF2
    349  c10d
    350  c10d		       85 02		      sta	WSYNC
    351  c10f		       a2 03		      ldx	#$03	;Triplicate
    352  c111		       86 04		      stx	NUSIZ0	;Set both duplication registers to triplicate the sprites.
    353  c113		       86 05		      stx	NUSIZ1
    354  c115		       86 25		      stx	VDELP0
    355  c117		       86 26		      stx	VDELP1
    356  c119		       a9 00		      lda	#0
    357  c11b		       85 1b		      sta	GRP0
    358  c11d		       85 1c		      sta	GRP1
    359  c11f		       85 1b		      sta	GRP0
    360  c121		       85 1c		      sta	GRP1
    361  c123
    362  c123		       a2 10		      ldx	#$10	;Moves one color clock to the left.
    363  c125		       86 21		      stx	HMP1
    364  c127
    365  c127		       ea		      nop
    366  c128		       ea		      nop
    367  c129
    368  c129		       85 10		      sta	RESP0
    369  c12b		       85 11		      sta	RESP1
    370  c12d
    371  c12d		       85 02		      sta	WSYNC
    372  c12f		       85 02		      sta	WSYNC
    373  c131		       85 2a		      sta	HMOVE
    374  c133
    375  c133		       a9 00		      lda	#0
    376  c135		       85 0e		      sta	PF1
    377  c137		       85 0f		      sta	PF2
    378  c139		       85 0d		      sta	PF0
    379  c13b
    380  c13b		       a5 b9		      lda	currentMenu
    381  c13d		       85 02		      sta	WSYNC
    382  c13f
    383  c13f		       10 03		      bpl	RGoToRDrawBattleText
    384  c141		       4c 4a f1 	      jmp	RDrawBattleMenu
    385  c144
    386  c144				   RGoToRDrawBattleText
    387  c144		       4c 11 f2 	      jmp	RDrawBattleText
    388  c147				   RGoToPostDrawingBattleText
    389  c147		       4c 38 f2 	      jmp	RPostDrawingBattleText
    390  c14a
    391  c14a				   RDrawBattleMenu
    392  c14a		       a2 ff		      ldx	#$FF	;-1
    393  c14c		       86 bc		      stx	aoeTargetID
    394  c14e				   RDrawBattleMenuLoop
    395  c14e		       e6 bc		      inc	aoeTargetID	;Just for temporary storage of which line # this is
    396  c150		       a6 bc		      ldx	aoeTargetID
    397  c152		       e0 03		      cpx	#3
    398  c154		       b0 f1		      bcs	RGoToPostDrawingBattleText
    399  c156		       b5 e9		      lda	menuLines,x
    400  c158		       c9 ff		      cmp	#$FF
    401  c15a		       d0 0a		      bne	RNoBlankLines
    402  c15c
    403  c15c							;Need to waste a lot of time here
    404  c15c		       a0 0e		      ldy	#14
    405  c15e				   RDoNothingLoop
    406  c15e		       85 02		      sta	WSYNC
    407  c160		       88		      dey
    408  c161		       d0 fb		      bne	RDoNothingLoop
    409  c163		       4c 4e f1 	      jmp	RDrawBattleMenuLoop
    410  c166				   RNoBlankLines
    411  c166		       85 02		      sta	WSYNC
    412  c168		       a6 bc		      ldx	aoeTargetID
    413  c16a		       c9 00		      cmp	#$0
    414  c16c		       10 47		      bpl	RShowBattlerName
    415  c16e		       29 c0		      and	#$C0
    416  c170		       c9 80		      cmp	#$80
    417  c172		       f0 21		      beq	RShowBattleOptions
    418  c174				   RShowSpellOptions
    419  c174		       b5 e9		      lda	menuLines,x
    420  c176		       29 3f		      and	#$3F
    421  c178		       a8		      tay
    422  c179		       b9 27 fb 	      lda	RSpellTextLookupTable,y
    423  c17c		       85 b1		      sta	tempPointer1
    424  c17e		       a9 f9		      lda	#(RFireText >> 8 & $FF)
    425  c180		       85 b2		      sta	tempPointer1+1
    426  c182		       a9 06		      lda	#TEXT_COLOR
    427  c184		       e4 ec		      cpx	highlightedLine
    428  c186		       d0 03		      bne	RDontHighlightSpell
    429  c188		       b9 6f fa 	      lda	RSpellColors,y
    430  c18b				   RDontHighlightSpell
    431  c18b		       85 06		      sta	COLUP0
    432  c18d		       85 07		      sta	COLUP1
    433  c18f
    434  c18f		       20 7d f2 	      jsr	RDrawBattleMenuLine
    435  c192		       4c 4e f1 	      jmp	RDrawBattleMenuLoop
    436  c195				   RShowBattleOptions
    437  c195		       b5 e9		      lda	menuLines,x
    438  c197		       29 0f		      and	#$0F
    439  c199		       a8		      tay
    440  c19a		       b9 88 fa 	      lda	RBattleOptionsLookupTable,y
    441  c19d		       85 b1		      sta	tempPointer1
    442  c19f		       a9 fb		      lda	#(RFightText >> 8 & $FF)
    443  c1a1		       85 b2		      sta	tempPointer1+1
    444  c1a3		       a9 06		      lda	#TEXT_COLOR
    445  c1a5		       e4 ec		      cpx	highlightedLine
    446  c1a7		       d0 02		      bne	RDontHighlightBattleOption
    447  c1a9		       a9 0e		      lda	#TEXT_HIGHLIGHTED_COLOR
    448  c1ab				   RDontHighlightBattleOption
    449  c1ab		       85 06		      sta	COLUP0
    450  c1ad		       85 07		      sta	COLUP1
    451  c1af		       20 7d f2 	      jsr	RDrawBattleMenuLine
    452  c1b2		       4c 4e f1 	      jmp	RDrawBattleMenuLoop
    453  c1b5				   RShowBattlerName
    454  c1b5		       29 04		      and	#$04
    455  c1b7		       d0 38		      bne	RShowEnemyName
    456  c1b9				   RShowAllyName
    457  c1b9		       85 02		      sta	WSYNC
    458  c1bb		       b5 e9		      lda	menuLines,x
    459  c1bd		       a8		      tay
    460  c1be		       b9 85 00 	      lda	name1,y
    461  c1c1		       85 a8		      sta	temp1
    462  c1c3		       b9 89 00 	      lda	name2,y
    463  c1c6		       85 a9		      sta	temp2
    464  c1c8		       b9 8d 00 	      lda	name3,y
    465  c1cb		       85 aa		      sta	temp3
    466  c1cd		       b9 91 00 	      lda	name4,y
    467  c1d0		       85 ab		      sta	temp4
    468  c1d2		       b9 95 00 	      lda	name5,y
    469  c1d5		       85 ad		      sta	temp5
    470  c1d7		       a9 00		      lda	#EMPTY
    471  c1d9		       85 af		      sta	temp6
    472  c1db
    473  c1db		       b9 81 00 	      lda	char1,y
    474  c1de		       29 0f		      and	#$0f
    475  c1e0		       a8		      tay
    476  c1e1		       b9 5f fa 	      lda	RClassColors,y
    477  c1e4		       85 06		      sta	COLUP0
    478  c1e6		       85 07		      sta	COLUP1
    479  c1e8
    480  c1e8		       20 ed f5 	      jsr	RSetTextPointers
    481  c1eb		       20 49 f6 	      jsr	RDrawText
    482  c1ee		       4c 4e f1 	      jmp	RDrawBattleMenuLoop
    483  c1f1				   RShowEnemyName
    484  c1f1		       b5 e9		      lda	menuLines,x
    485  c1f3		       38		      sec
    486  c1f4		       e9 04		      sbc	#4
    487  c1f6		       a8		      tay
    488  c1f7		       b9 da 00 	      lda	enemyID,y
    489  c1fa		       a8		      tay
    490  c1fb		       b9 8e fa 	      lda	REnemyNameLookup,y
    491  c1fe		       85 b1		      sta	tempPointer1
    492  c200		       a9 f8		      lda	#(RZombieText >> 8 & $FF)
    493  c202		       85 b2		      sta	tempPointer1+1
    494  c204		       b9 91 fa 	      lda	REnemyColorLookup,y
    495  c207		       85 06		      sta	COLUP0
    496  c209		       85 07		      sta	COLUP1
    497  c20b
    498  c20b		       20 7d f2 	      jsr	RDrawBattleMenuLine
    499  c20e		       4c 4e f1 	      jmp	RDrawBattleMenuLoop
    500  c211				   RDrawBattleText
    501  c211		       a9 00		      lda	#0
    502  c213		       85 02		      sta	WSYNC
    503  c215		       20 04 f3 	      jsr	RSetBattleMessage
    504  c218		       20 ed f5 	      jsr	RSetTextPointers
    505  c21b		       20 49 f6 	      jsr	RDrawText
    506  c21e
    507  c21e		       a9 01		      lda	#1
    508  c220		       85 02		      sta	WSYNC
    509  c222		       20 04 f3 	      jsr	RSetBattleMessage
    510  c225		       20 ed f5 	      jsr	RSetTextPointers
    511  c228		       20 49 f6 	      jsr	RDrawText
    512  c22b
    513  c22b		       a9 02		      lda	#2
    514  c22d		       85 02		      sta	WSYNC
    515  c22f		       20 04 f3 	      jsr	RSetBattleMessage
    516  c232		       20 ed f5 	      jsr	RSetTextPointers
    517  c235		       20 49 f6 	      jsr	RDrawText
    518  c238
    519  c238				   RPostDrawingBattleText
    520  c238		       85 02		      sta	WSYNC
    521  c23a		       20 7c f2 	      jsr	RSpinWheels
    522  c23d		       20 7c f2 	      jsr	RSpinWheels
    523  c240		       20 7c f2 	      jsr	RSpinWheels
    524  c243		       85 14		      sta	RESBL
    525  c245		       a9 01		      lda	#1
    526  c247		       85 27		      sta	VDELBL
    527  c249
    528  c249		       a2 01		      ldx	#1
    529  c24b				   RWaitToDrawPlayerText
    530  c24b		       85 02		      sta	WSYNC
    531  c24d		       ca		      dex
    532  c24e		       d0 fb		      bne	RWaitToDrawPlayerText
    533  c250
    534  c250				   RDrawPartyInfoBattle
    535  c250		       20 34 f4 	      jsr	RDrawCharacterInfo
    536  c253		       e6 80		      inc	charIndex
    537  c255		       20 34 f4 	      jsr	RDrawCharacterInfo
    538  c258		       e6 80		      inc	charIndex
    539  c25a		       20 34 f4 	      jsr	RDrawCharacterInfo
    540  c25d		       e6 80		      inc	charIndex
    541  c25f		       20 34 f4 	      jsr	RDrawCharacterInfo
    542  c262		       a9 00		      lda	#0
    543  c264		       85 04		      sta	NUSIZ0
    544  c266		       85 05		      sta	NUSIZ1
    545  c268		       85 25		      sta	VDELP0
    546  c26a		       85 26		      sta	VDELP1
    547  c26c		       85 80		      sta	charIndex
    548  c26e
    549  c26e		       a2 02		      ldx	#2
    550  c270				   RFinishBattlePicture
    551  c270		       85 02		      sta	WSYNC
    552  c272		       ca		      dex
    553  c273		       d0 fb		      bne	RFinishBattlePicture
    554  c275
    555  c275				   RAfterRendering
    556  c275		       a9 82		      lda	#$82
    557  c277		       85 01		      sta	VBLANK	;Enable blanking
    558  c279		       4c e6 ff 	      jmp	RGoToOverscan
    559  c27c
    560  c27c
    561  c27c
    562  c27c
    563  c27c
    564  c27c
    565  c27c				   RSpinWheels SUBROUTINE
    566  c27c		       60		      rts
    567  c27d
    568  c27d				   RDrawBattleMenuLine SUBROUTINE		;Draws one line of battle menu text, using A as the color of the text, and tempPointer1 as the location to pull text data from.
    569  c27d		       85 06		      sta	COLUP0
    570  c27f		       85 07		      sta	COLUP1
    571  c281
    572  c281		       a0 00		      ldy	#0
    573  c283		       b1 b1		      lda	(tempPointer1),y
    574  c285		       85 a8		      sta	temp1
    575  c287		       c8		      iny
    576  c288		       b1 b1		      lda	(tempPointer1),y
    577  c28a		       85 a9		      sta	temp2
    578  c28c		       c8		      iny
    579  c28d		       b1 b1		      lda	(tempPointer1),y
    580  c28f		       85 aa		      sta	temp3
    581  c291		       c8		      iny
    582  c292		       b1 b1		      lda	(tempPointer1),y
    583  c294		       85 ab		      sta	temp4
    584  c296		       c8		      iny
    585  c297		       b1 b1		      lda	(tempPointer1),y
    586  c299		       85 ad		      sta	temp5
    587  c29b		       c8		      iny
    588  c29c		       b1 b1		      lda	(tempPointer1),y
    589  c29e		       85 af		      sta	temp6
    590  c2a0
    591  c2a0		       20 ed f5 	      jsr	RSetTextPointers
    592  c2a3		       20 49 f6 	      jsr	RDrawText
    593  c2a6		       60		      rts
    594  c2a7
    595  c2a7				   RMessageConstructors
    596  c2a7				   RXStabsY
    597  c2a7		       00		      .byte.b	$0
    598  c2a8		       04		      .byte.b	$4
    599  c2a9		       01		      .byte.b	$1
    600  c2aa				   RXShootsY
    601  c2aa		       00		      .byte.b	$0
    602  c2ab		       05		      .byte.b	$5
    603  c2ac		       01		      .byte.b	$1
    604  c2ad				   RXSlamsY
    605  c2ad		       00		      .byte.b	$0
    606  c2ae		       06		      .byte.b	$6
    607  c2af		       01		      .byte.b	$1
    608  c2b0				   RXBitesY
    609  c2b0		       00		      .byte.b	$0
    610  c2b1		       07		      .byte.b	$7
    611  c2b2		       01		      .byte.b	$1
    612  c2b3				   RXRushesY
    613  c2b3		       00		      .byte.b	$0
    614  c2b4		       08		      .byte.b	$8
    615  c2b5		       01		      .byte.b	$1
    616  c2b6				   RXCastsY
    617  c2b6		       00		      .byte.b	$0
    618  c2b7		       09		      .byte.b	$9
    619  c2b8		       02		      .byte.b	$2
    620  c2b9				   RXHealsYHP
    621  c2b9		       01		      .byte.b	$1
    622  c2ba		       0a		      .byte.b	$A
    623  c2bb		       03		      .byte.b	$3
    624  c2bc				   RXLosesYHP
    625  c2bc		       01		      .byte.b	$1
    626  c2bd		       0b		      .byte.b	$B
    627  c2be		       03		      .byte.b	$3
    628  c2bf				   RXMisses
    629  c2bf		       00		      .byte.b	$0
    630  c2c0		       0c		      .byte.b	$C
    631  c2c1		       ff		      .byte.b	$FF
    632  c2c2				   RXDown
    633  c2c2		       01		      .byte.b	$1
    634  c2c3		       12		      .byte.b	$12
    635  c2c4		       ff		      .byte.b	$FF
    636  c2c5				   RXLevelsUp
    637  c2c5		       00		      .byte.b	$0
    638  c2c6		       0d		      .byte.b	$D
    639  c2c7		       0e		      .byte.b	$E
    640  c2c8				   RXLearnsY
    641  c2c8		       00		      .byte.b	$0
    642  c2c9		       0f		      .byte.b	$F
    643  c2ca		       02		      .byte.b	$2
    644  c2cb				   RXMovesUp
    645  c2cb		       00		      .byte.b	$0
    646  c2cc		       10		      .byte.b	$10
    647  c2cd		       0e		      .byte.b	$E
    648  c2ce				   RXBacksAway
    649  c2ce		       00		      .byte.b	$0
    650  c2cf		       11		      .byte.b	$11
    651  c2d0		       13		      .byte.b	$13
    652  c2d1				   RXWastesAway
    653  c2d1		       01		      .byte.b	$1
    654  c2d2		       14		      .byte.b	$14
    655  c2d3		       13		      .byte.b	$13
    656  c2d4				   RXWasCured
    657  c2d4		       01		      .byte.b	$1
    658  c2d5		       15		      .byte.b	$15
    659  c2d6		       16		      .byte.b	$16
    660  c2d7				   RXHasAShield
    661  c2d7		       01		      .byte.b	$1
    662  c2d8		       18		      .byte.b	$18
    663  c2d9		       19		      .byte.b	$19
    664  c2da				   RPartyDown
    665  c2da		       1a		      .byte.b	$1A
    666  c2db		       12		      .byte.b	$12
    667  c2dc		       ff		      .byte.b	$FF
    668  c2dd				   RPartyFlees
    669  c2dd		       1a		      .byte.b	$1A
    670  c2de		       1b		      .byte.b	$1B
    671  c2df		       ff		      .byte.b	$FF
    672  c2e0				   RPartyWins
    673  c2e0		       1a		      .byte.b	$1A
    674  c2e1		       1c		      .byte.b	$1C
    675  c2e2		       ff		      .byte.b	$FF
    676  c2e3				   RXTriesToRun
    677  c2e3		       00		      .byte.b	$0
    678  c2e4		       1d		      .byte.b	$1D
    679  c2e5		       1e		      .byte.b	$1E
    680  c2e6				   RNoEffect
    681  c2e6		       1f		      .byte.b	$1F
    682  c2e7		       20		      .byte.b	$20
    683  c2e8		       ff		      .byte.b	$FF
    684  c2e9				   RXCannotEscape
    685  c2e9		       00		      .byte.b	$0
    686  c2ea		       21		      .byte.b	$21
    687  c2eb		       22		      .byte.b	$22
    688  c2ec				   RXExiled
    689  c2ec		       01		      .byte.b	$1
    690  c2ed		       2a		      .byte.b	$2A
    691  c2ee		       ff		      .byte.b	$FF
    692  c2ef				   RXWakesUp
    693  c2ef		       00		      .byte.b	$0
    694  c2f0		       17		      .byte.b	$17
    695  c2f1		       0e		      .byte.b	$E
    696  c2f2				   RXGuardsY
    697  c2f2		       00		      .byte.b	$0
    698  c2f3		       23		      .byte.b	$23
    699  c2f4		       01		      .byte.b	$1
    700  c2f5				   RXAttackUp
    701  c2f5		       01		      .byte.b	$1
    702  c2f6		       24		      .byte.b	$24
    703  c2f7		       0e		      .byte.b	$E
    704  c2f8				   RXFellAsleep
    705  c2f8		       01		      .byte.b	$1
    706  c2f9		       25		      .byte.b	$25
    707  c2fa		       26		      .byte.b	$26
    708  c2fb				   RXIsAsleep
    709  c2fb		       00		      .byte.b	$0
    710  c2fc		       27		      .byte.b	$27
    711  c2fd		       26		      .byte.b	$26
    712  c2fe				   RXEvades
    713  c2fe		       00		      .byte.b	$0
    714  c2ff		       28		      .byte.b	$28
    715  c300		       ff		      .byte.b	$FF
    716  c301				   RXShieldFades
    717  c301		       00		      .byte.b	$0
    718  c302		       19		      .byte.b	$19
    719  c303		       29		      .byte.b	$29
    720  c304
    721  c304				   RSetBattleMessage SUBROUTINE		;Uses the currentMessage to set the temp1-temp6 values correctly. Interprets A as the line of the message to set.
    722  c304		       a0 0e		      ldy	#TEXT_HIGHLIGHTED_COLOR
    723  c306		       84 06		      sty	COLUP0
    724  c308		       84 07		      sty	COLUP1
    725  c30a		       18		      clc
    726  c30b		       65 e8		      adc	currentMessage
    727  c30d		       65 e8		      adc	currentMessage
    728  c30f		       65 e8		      adc	currentMessage	;Calculate the correct offset
    729  c311		       aa		      tax
    730  c312		       bd a7 f2 	      lda	RMessageConstructors,x	;Find what needs to be shown on this exact line
    731  c315		       30 10		      bmi	.RGoToAllEmpty
    732  c317		       aa		      tax
    733  c318		       f0 10		      beq	.RGoToSourceBattlerName
    734  c31a		       ca		      dex
    735  c31b		       f0 10		      beq	.RGoToTargetBattlerName
    736  c31d		       ca		      dex
    737  c31e		       f0 10		      beq	.RGoToSpellName
    738  c320		       ca		      dex
    739  c321		       f0 10		      beq	.RGoToHPCount
    740  c323		       ca		      dex
    741  c324		       4c 36 f3 	      jmp	.RGeneralMessageStructure
    742  c327				   .RGoToAllEmpty
    743  c327		       4c 21 f4 	      jmp	.RAllEmpty
    744  c32a				   .RGoToSourceBattlerName
    745  c32a		       4c 48 f3 	      jmp	.RSourceBattlerName
    746  c32d				   .RGoToTargetBattlerName
    747  c32d		       4c 8e f3 	      jmp	.RTargetBattlerName
    748  c330				   .RGoToSpellName
    749  c330		       4c d5 f3 	      jmp	.RSpellName
    750  c333				   .RGoToHPCount
    751  c333		       4c e9 f3 	      jmp	.RHPCount
    752  c336
    753  c336				   .RGeneralMessageStructure
    754  c336		       bd 00 fb 	      lda	RMessagesLowLookup,x
    755  c339		       85 b1		      sta	tempPointer1
    756  c33b		       a9 f9		      lda	#(RStabsText >> 8 & $FF)
    757  c33d		       e0 17		      cpx	#$17
    758  c33f		       90 02		      bcc	.RNormalMessagePage
    759  c341				   .ROtherMessagePage
    760  c341		       a9 fa		      lda	#(RToRunText >> 8 & $FF)
    761  c343				   .RNormalMessagePage
    762  c343		       85 b2		      sta	tempPointer1+1
    763  c345		       4c 01 f4 	      jmp	.RSetTempVariables
    764  c348				   .RSourceBattlerName
    765  c348		       a6 c0		      ldx	currentBattler
    766  c34a		       e0 04		      cpx	#4
    767  c34c		       b0 25		      bcs	.REnemySourceBattlerName
    768  c34e				   .RAllySourceBattlerName
    769  c34e		       b5 81		      lda	char1,x
    770  c350		       29 0f		      and	#$0F
    771  c352		       a8		      tay
    772  c353		       b9 5f fa 	      lda	RClassColors,y
    773  c356		       85 06		      sta	COLUP0
    774  c358		       85 07		      sta	COLUP1
    775  c35a		       b5 85		      lda	name1,x
    776  c35c		       85 a8		      sta	temp1
    777  c35e		       b5 89		      lda	name2,x
    778  c360		       85 a9		      sta	temp2
    779  c362		       b5 8d		      lda	name3,x
    780  c364		       85 aa		      sta	temp3
    781  c366		       b5 91		      lda	name4,x
    782  c368		       85 ab		      sta	temp4
    783  c36a		       b5 95		      lda	name5,x
    784  c36c		       85 ad		      sta	temp5
    785  c36e		       a9 00		      lda	#EMPTY
    786  c370		       85 af		      sta	temp6
    787  c372		       60		      rts
    788  c373				   .REnemySourceBattlerName
    789  c373		       ca		      dex
    790  c374		       ca		      dex
    791  c375		       ca		      dex
    792  c376		       ca		      dex
    793  c377		       b5 da		      lda	enemyID,x
    794  c379		       29 3f		      and	#$3F	;Get just the enemyID
    795  c37b		       aa		      tax
    796  c37c		       bd 91 fa 	      lda	REnemyColorLookup,x
    797  c37f		       85 06		      sta	COLUP0
    798  c381		       85 07		      sta	COLUP1
    799  c383		       bd 8e fa 	      lda	REnemyNameLookup,x
    800  c386		       85 b1		      sta	tempPointer1
    801  c388		       a9 f8		      lda	#(RZombieText >> 8 & $FF)
    802  c38a		       85 b2		      sta	tempPointer1+1
    803  c38c		       d0 73		      bne	.RSetTempVariables	;Should always be true, just saves a byte over jmp
    804  c38e				   .RTargetBattlerName
    805  c38e		       a6 bb		      ldx	startingCursorIndexAndTargetID
    806  c390		       e0 04		      cpx	#4
    807  c392		       b0 25		      bcs	.REnemyIsTargeted
    808  c394				   .RAllyIsTargeted
    809  c394		       b5 81		      lda	char1,x
    810  c396		       29 0f		      and	#$0F
    811  c398		       a8		      tay
    812  c399		       b9 5f fa 	      lda	RClassColors,y
    813  c39c		       85 06		      sta	COLUP0
    814  c39e		       85 07		      sta	COLUP1
    815  c3a0		       b5 85		      lda	name1,x
    816  c3a2		       85 a8		      sta	temp1
    817  c3a4		       b5 89		      lda	name2,x
    818  c3a6		       85 a9		      sta	temp2
    819  c3a8		       b5 8d		      lda	name3,x
    820  c3aa		       85 aa		      sta	temp3
    821  c3ac		       b5 91		      lda	name4,x
    822  c3ae		       85 ab		      sta	temp4
    823  c3b0		       b5 95		      lda	name5,x
    824  c3b2		       85 ad		      sta	temp5
    825  c3b4		       a9 00		      lda	#EMPTY
    826  c3b6		       85 af		      sta	temp6
    827  c3b8		       60		      rts
    828  c3b9				   .REnemyIsTargeted
    829  c3b9		       ca		      dex
    830  c3ba		       ca		      dex
    831  c3bb		       ca		      dex
    832  c3bc		       ca		      dex
    833  c3bd		       b5 da		      lda	enemyID,x
    834  c3bf		       29 3f		      and	#$3F	;Get just the enemyID
    835  c3c1		       aa		      tax
    836  c3c2		       bd 91 fa 	      lda	REnemyColorLookup,x
    837  c3c5		       85 06		      sta	COLUP0
    838  c3c7		       85 07		      sta	COLUP1
    839  c3c9		       bd 8e fa 	      lda	REnemyNameLookup,x
    840  c3cc		       85 b1		      sta	tempPointer1
    841  c3ce		       a9 f8		      lda	#(RZombieText >> 8 & $FF)
    842  c3d0		       85 b2		      sta	tempPointer1+1
    843  c3d2		       d0 2d		      bne	.RSetTempVariables	;Should always be true, just saves a byte over jmp
    844  c3d4		       60		      rts
    845  c3d5				   .RSpellName
    846  c3d5		       a6 ba		      ldx	cursorIndexAndMessageY
    847  c3d7		       bd 27 fb 	      lda	RSpellTextLookupTable,x
    848  c3da		       85 b1		      sta	tempPointer1
    849  c3dc		       bd 6f fa 	      lda	RSpellColors,x
    850  c3df		       85 06		      sta	COLUP0
    851  c3e1		       85 07		      sta	COLUP1
    852  c3e3		       a9 f9		      lda	#(RFireText >> 8 & $FF)
    853  c3e5		       85 b2		      sta	tempPointer1+1
    854  c3e7		       d0 18		      bne	.RSetTempVariables	;Should always be true, just saves a byte over jmp
    855  c3e9				   .RHPCount
    856  c3e9		       a5 ba		      lda	cursorIndexAndMessageY
    857  c3eb		       20 36 f6 	      jsr	RCalculateDigitIndices
    858  c3ee		       84 a8		      sty	temp1
    859  c3f0		       86 a9		      stx	temp2
    860  c3f2		       a9 00		      lda	#EMPTY
    861  c3f4		       85 aa		      sta	temp3
    862  c3f6		       85 af		      sta	temp6
    863  c3f8		       a9 08		      lda	#H
    864  c3fa		       85 ab		      sta	temp4
    865  c3fc		       a9 10		      lda	#P
    866  c3fe		       85 ad		      sta	temp5
    867  c400		       60		      rts
    868  c401				   .RSetTempVariables
    869  c401		       a0 00		      ldy	#0
    870  c403		       b1 b1		      lda	(tempPointer1),y
    871  c405		       85 a8		      sta	temp1
    872  c407		       c8		      iny
    873  c408		       b1 b1		      lda	(tempPointer1),y
    874  c40a		       85 a9		      sta	temp2
    875  c40c		       c8		      iny
    876  c40d		       b1 b1		      lda	(tempPointer1),y
    877  c40f		       85 aa		      sta	temp3
    878  c411		       c8		      iny
    879  c412		       b1 b1		      lda	(tempPointer1),y
    880  c414		       85 ab		      sta	temp4
    881  c416		       c8		      iny
    882  c417		       b1 b1		      lda	(tempPointer1),y
    883  c419		       85 ad		      sta	temp5
    884  c41b		       c8		      iny
    885  c41c		       b1 b1		      lda	(tempPointer1),y
    886  c41e		       85 af		      sta	temp6
    887  c420		       60		      rts
    888  c421				   .RAllEmpty
    889  c421		       85 02		      sta	WSYNC
    890  c423		       85 02		      sta	WSYNC
    891  c425		       a9 00		      lda	#EMPTY
    892  c427		       85 a8		      sta	temp1
    893  c429		       85 a9		      sta	temp2
    894  c42b		       85 aa		      sta	temp3
    895  c42d		       85 ab		      sta	temp4
    896  c42f		       85 ad		      sta	temp5
    897  c431		       85 af		      sta	temp6
    898  c433		       60		      rts
    899  c434
    900  c434				   RDrawCharacterInfo SUBROUTINE
    901  c434		       a6 80		      ldx	charIndex	;Determine which character's data is about to be drawn
    902  c436		       b5 81		      lda	char1,x
    903  c438		       29 0f		      and	#$0F	;Get the class of this character
    904  c43a		       a8		      tay
    905  c43b
    906  c43b		       a5 a1		      lda	partyBattlePos
    907  c43d		       3d 9a fc 	      and	RPartyPositionMasks,x
    908  c440		       f0 05		      beq	.RBackline
    909  c442				   .RFrontline
    910  c442		       a9 2a		      lda	#FRONTLINE_INDICATOR_COLOR
    911  c444		       4c 49 f4 	      jmp	.RStoreIndicatorColor
    912  c447				   .RBackline
    913  c447		       a9 8a		      lda	#BACKLINE_INDICATOR_COLOR
    914  c449				   .RStoreIndicatorColor
    915  c449		       85 08		      sta	COLUPF
    916  c44b
    917  c44b		       85 02		      sta	WSYNC
    918  c44d		       a5 b9		      lda	currentMenu
    919  c44f		       f0 18		      beq	.RNoHighlighting
    920  c451		       e4 bd		      cpx	highlightedIndex
    921  c453		       d0 14		      bne	.RNoHighlighting
    922  c455		       a5 ef		      lda	currentEffect	;Should be highlighting, and this is the currently hovered character
    923  c457		       c9 01		      cmp	#$1
    924  c459		       d0 0e		      bne	.RNoHighlighting
    925  c45b		       a5 f1		      lda	effectCountdown
    926  c45d		       29 10		      and	#$10
    927  c45f		       f0 08		      beq	.RNoHighlighting
    928  c461		       a9 0e		      lda	#TEXT_HIGHLIGHTED_COLOR
    929  c463		       85 06		      sta	COLUP0
    930  c465		       85 07		      sta	COLUP1
    931  c467		       d0 07		      bne	.RPostClassColorSetting	;this should always branch, just saves one byte over jmp
    932  c469				   .RNoHighlighting
    933  c469		       b9 5f fa 	      lda	RClassColors,y	;Get the color that corresponds with this class, and set both players to use that color
    934  c46c		       85 06		      sta	COLUP0
    935  c46e		       85 07		      sta	COLUP1
    936  c470				   .RPostClassColorSetting
    937  c470
    938  c470		       a5 bf		      lda	inBattle
    939  c472		       f0 16		      beq	.RNotInBattle
    940  c474		       d0 03		      bne	.RInBattle
    941  c476				   .RGoToShowingHPAndMP
    942  c476		       4c 0e f5 	      jmp	.RShowingHPAndMP
    943  c479
    944  c479				   .RInBattle
    945  c479		       a9 40		      lda	#LEFT_MASK	;Show HP and MP if the joystick is being held down, else show name and avatar
    946  c47b		       2c 80 02 	      bit	SWCHA
    947  c47e		       f0 f6		      beq	.RGoToShowingHPAndMP
    948  c480		       a9 80		      lda	#RIGHT_MASK
    949  c482		       2c 80 02 	      bit	SWCHA
    950  c485		       d0 11		      bne	.RSetupMood
    951  c487		       4c 73 f5 	      jmp	.RShowingClassAndLevel
    952  c48a				   .RNotInBattle
    953  c48a		       a5 b9		      lda	currentMenu
    954  c48c		       d0 0a		      bne	.RSetupMood
    955  c48e		       a9 20		      lda	#DOWN_MASK
    956  c490		       2c 80 02 	      bit	SWCHA
    957  c493		       d0 03		      bne	.RSetupMood
    958  c495		       4c 73 f5 	      jmp	.RShowingClassAndLevel	;Should this be class and level or hp and mp? --Currently going with class and level, because it runs fast enough.
    959  c498
    960  c498				   .RSetupMood
    961  c498							;Need to set the mood picture and name
    962  c498
    963  c498		       b5 85		      lda	name1,x
    964  c49a		       85 a9		      sta	temp2
    965  c49c		       b5 89		      lda	name2,x
    966  c49e		       85 aa		      sta	temp3
    967  c4a0		       b5 8d		      lda	name3,x
    968  c4a2		       85 ab		      sta	temp4
    969  c4a4		       b5 91		      lda	name4,x
    970  c4a6		       85 ad		      sta	temp5
    971  c4a8		       b5 95		      lda	name5,x
    972  c4aa		       85 af		      sta	temp6
    973  c4ac		       20 ed f5 	      jsr	RSetTextPointers
    974  c4af
    975  c4af		       a5 b9		      lda	currentMenu
    976  c4b1		       d0 02		      bne	.RCurrentlyInMenu
    977  c4b3		       85 02		      sta	WSYNC
    978  c4b5				   .RCurrentlyInMenu
    979  c4b5
    980  c4b5		       a6 80		      ldx	charIndex
    981  c4b7		       b5 81		      lda	char1,x
    982  c4b9		       4a		      lsr
    983  c4ba		       4a		      lsr
    984  c4bb		       4a		      lsr
    985  c4bc		       4a		      lsr
    986  c4bd		       29 0f		      and	#$0F
    987  c4bf		       a8		      tay
    988  c4c0				   .RSelectedMood
    989  c4c0		       b9 9e fc 	      lda	RMoodLookupTable,y
    990  c4c3		       85 b1		      sta	tempPointer1
    991  c4c5		       a9 fc		      lda	#(RAvatarHappy >> 8 & $FF)
    992  c4c7		       85 b2		      sta	tempPointer1+1
    993  c4c9
    994  c4c9		       a5 bf		      lda	inBattle
    995  c4cb		       f0 02		      beq	.RNoExtraLine
    996  c4cd		       85 02		      sta	WSYNC
    997  c4cf				   .RNoExtraLine
    998  c4cf
    999  c4cf		       a9 02		      lda	#2
   1000  c4d1		       85 1f		      sta	ENABL
   1001  c4d3		       a0 07		      ldy	#CHARACTER_HEIGHT-1
   1002  c4d5		       c5 a8		      cmp	temp1	;Just used to delay 3 cycles
   1003  c4d7				   .RDrawAvatarAndName
   1004  c4d7		       84 a8		      sty	temp1	;Stores how many loops are left
   1005  c4d9		       b1 af		      lda	(temp6),y
   1006  c4db		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1007  c4dd		       85 02		      sta	WSYNC
   1008  c4df		       b1 b1		      lda	(tempPointer1),y
   1009  c4e1		       85 1b		      sta	GRP0
   1010  c4e3		       b1 b3		      lda	(tempPointer2),y
   1011  c4e5		       85 1c		      sta	GRP1
   1012  c4e7		       b1 b5		      lda	(tempPointer3),y
   1013  c4e9		       85 1b		      sta	GRP0
   1014  c4eb		       b1 ad		      lda	(temp5),y
   1015  c4ed		       aa		      tax
   1016  c4ee		       b1 ab		      lda	(temp4),y
   1017  c4f0		       a4 a9		      ldy	temp2
   1018  c4f2		       ea		      nop
   1019  c4f3		       85 1c		      sta	GRP1
   1020  c4f5		       86 1b		      stx	GRP0
   1021  c4f7		       84 1c		      sty	GRP1
   1022  c4f9		       85 1b		      sta	GRP0
   1023  c4fb
   1024  c4fb		       a4 a8		      ldy	temp1
   1025  c4fd		       88		      dey
   1026  c4fe		       10 d7		      bpl	.RDrawAvatarAndName
   1027  c500
   1028  c500		       c8		      iny
   1029  c501		       84 1f		      sty	ENABL
   1030  c503		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1031  c505		       84 1c		      sty	GRP1
   1032  c507		       84 1f		      sty	ENABL
   1033  c509		       84 1b		      sty	GRP0
   1034  c50b		       84 1c		      sty	GRP1
   1035  c50d		       60		      rts
   1036  c50e
   1037  c50e				   .RShowingHPAndMP
   1038  c50e		       a6 80		      ldx	charIndex
   1039  c510		       b5 99		      lda	hp1,x
   1040  c512		       a0 08		      ldy	#H
   1041  c514		       84 a8		      sty	temp1	;HP indicator
   1042  c516
   1043  c516		       20 36 f6 	      jsr	RCalculateDigitIndices
   1044  c519		       86 aa		      stx	temp3	;The low digit of the HP value
   1045  c51b		       84 a9		      sty	temp2	;The high digit of the HP value
   1046  c51d
   1047  c51d		       a6 80		      ldx	charIndex
   1048  c51f		       b5 9d		      lda	mp1,x
   1049  c521		       a0 0d		      ldy	#M
   1050  c523		       84 ab		      sty	temp4	;MP indicator
   1051  c525
   1052  c525		       20 36 f6 	      jsr	RCalculateDigitIndices
   1053  c528		       86 af		      stx	temp6	;The low digit of the MP value
   1054  c52a		       84 ad		      sty	temp5	;The high digit of the MP value
   1055  c52c
   1056  c52c		       20 ed f5 	      jsr	RSetTextPointers
   1057  c52f
   1058  c52f		       a5 bf		      lda	inBattle
   1059  c531		       f0 02		      beq	.RSkipThisLine
   1060  c533		       85 02		      sta	WSYNC
   1061  c535				   .RSkipThisLine
   1062  c535		       a9 02		      lda	#2
   1063  c537		       85 1f		      sta	ENABL
   1064  c539
   1065  c539		       a0 08		      ldy	#CHARACTER_HEIGHT
   1066  c53b		       88		      dey
   1067  c53c				   .RDrawHPAndMP
   1068  c53c		       84 a8		      sty	temp1	;Stores how many loops are left
   1069  c53e		       b1 af		      lda	(temp6),y
   1070  c540		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1071  c542		       85 02		      sta	WSYNC
   1072  c544		       b1 b1		      lda	(tempPointer1),y
   1073  c546		       85 1b		      sta	GRP0
   1074  c548		       b1 b3		      lda	(tempPointer2),y
   1075  c54a		       85 1c		      sta	GRP1
   1076  c54c		       b1 b5		      lda	(tempPointer3),y
   1077  c54e		       85 1b		      sta	GRP0
   1078  c550		       b1 ad		      lda	(temp5),y
   1079  c552		       aa		      tax
   1080  c553		       b1 ab		      lda	(temp4),y
   1081  c555		       a4 a9		      ldy	temp2
   1082  c557		       ea		      nop
   1083  c558		       85 1c		      sta	GRP1
   1084  c55a		       86 1b		      stx	GRP0
   1085  c55c		       84 1c		      sty	GRP1
   1086  c55e		       85 1b		      sta	GRP0
   1087  c560		       a4 a8		      ldy	temp1
   1088  c562		       88		      dey
   1089  c563		       10 d7		      bpl	.RDrawHPAndMP
   1090  c565
   1091  c565		       c8		      iny
   1092  c566		       84 1f		      sty	ENABL
   1093  c568		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1094  c56a		       84 1c		      sty	GRP1
   1095  c56c		       84 1f		      sty	ENABL
   1096  c56e		       84 1b		      sty	GRP0
   1097  c570		       84 1c		      sty	GRP1
   1098  c572
   1099  c572		       60		      rts
   1100  c573
   1101  c573				   .RShowingClassAndLevel
   1102  c573		       a6 80		      ldx	charIndex
   1103  c575		       b5 81		      lda	char1,x	;Format is -MMM-CCC
   1104  c577		       29 0f		      and	#$0F
   1105  c579		       aa		      tax
   1106  c57a		       bd 82 fa 	      lda	RClassNameLookupTable,x
   1107  c57d		       85 b1		      sta	tempPointer1
   1108  c57f		       a9 fb		      lda	#$FB
   1109  c581		       85 b2		      sta	tempPointer1+1
   1110  c583
   1111  c583		       a0 00		      ldy	#0
   1112  c585		       b1 b1		      lda	(tempPointer1),y
   1113  c587		       85 a8		      sta	temp1
   1114  c589		       c8		      iny
   1115  c58a		       b1 b1		      lda	(tempPointer1),y
   1116  c58c		       85 a9		      sta	temp2
   1117  c58e		       c8		      iny
   1118  c58f		       b1 b1		      lda	(tempPointer1),y
   1119  c591		       85 aa		      sta	temp3
   1120  c593		       c8		      iny
   1121  c594		       b1 b1		      lda	(tempPointer1),y
   1122  c596		       85 ab		      sta	temp4
   1123  c598		       c8		      iny
   1124  c599		       b1 b1		      lda	(tempPointer1),y
   1125  c59b		       85 ad		      sta	temp5
   1126  c59d		       c8		      iny
   1127  c59e		       b1 b1		      lda	(tempPointer1),y
   1128  c5a0		       85 af		      sta	temp6
   1129  c5a2
   1130  c5a2		       20 ed f5 	      jsr	RSetTextPointers
   1131  c5a5
   1132  c5a5		       ea		      nop
   1133  c5a6		       ea		      nop
   1134  c5a7		       ea		      nop
   1135  c5a8		       ea		      nop
   1136  c5a9		       a5 bf		      lda	inBattle
   1137  c5ab		       f0 02		      beq	.RSkipExtraClassLevelLine
   1138  c5ad		       85 02		      sta	WSYNC
   1139  c5af				   .RSkipExtraClassLevelLine
   1140  c5af		       a9 02		      lda	#2
   1141  c5b1		       85 1f		      sta	ENABL
   1142  c5b3
   1143  c5b3		       a0 08		      ldy	#CHARACTER_HEIGHT
   1144  c5b5		       88		      dey
   1145  c5b6				   .RDrawClassAndLevel
   1146  c5b6		       84 a8		      sty	temp1	;Stores how many loops are left
   1147  c5b8		       b1 af		      lda	(temp6),y
   1148  c5ba		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1149  c5bc		       85 02		      sta	WSYNC
   1150  c5be		       b1 b1		      lda	(tempPointer1),y
   1151  c5c0		       85 1b		      sta	GRP0
   1152  c5c2		       b1 b3		      lda	(tempPointer2),y
   1153  c5c4		       85 1c		      sta	GRP1
   1154  c5c6		       b1 b5		      lda	(tempPointer3),y
   1155  c5c8		       85 1b		      sta	GRP0
   1156  c5ca		       b1 ad		      lda	(temp5),y
   1157  c5cc		       aa		      tax
   1158  c5cd		       b1 ab		      lda	(temp4),y
   1159  c5cf		       a4 a9		      ldy	temp2
   1160  c5d1		       ea		      nop
   1161  c5d2		       85 1c		      sta	GRP1
   1162  c5d4		       86 1b		      stx	GRP0
   1163  c5d6		       84 1c		      sty	GRP1
   1164  c5d8		       85 1b		      sta	GRP0
   1165  c5da		       a4 a8		      ldy	temp1
   1166  c5dc		       88		      dey
   1167  c5dd		       10 d7		      bpl	.RDrawClassAndLevel
   1168  c5df
   1169  c5df		       c8		      iny
   1170  c5e0		       84 1f		      sty	ENABL
   1171  c5e2		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1172  c5e4		       84 1c		      sty	GRP1
   1173  c5e6		       84 1f		      sty	ENABL
   1174  c5e8		       84 1b		      sty	GRP0
   1175  c5ea		       84 1c		      sty	GRP1
   1176  c5ec		       60		      rts
   1177  c5ed
   1178  c5ed				   RSetTextPointers SUBROUTINE		;Will treat the values in temp1-6 as character indices and stores the pointers to the graphics data in tempPointer6-tempPointer1
   1179  c5ed		       a6 a8		      ldx	temp1
   1180  c5ef		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1181  c5f2		       85 b1		      sta	tempPointer1
   1182  c5f4		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1183  c5f7		       85 b2		      sta	tempPointer1+1
   1184  c5f9		       a6 a9		      ldx	temp2
   1185  c5fb		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1186  c5fe		       85 b3		      sta	tempPointer2
   1187  c600		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1188  c603		       85 b4		      sta	tempPointer2+1
   1189  c605		       a6 aa		      ldx	temp3
   1190  c607		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1191  c60a		       85 b5		      sta	tempPointer3
   1192  c60c		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1193  c60f		       85 b6		      sta	tempPointer3+1
   1194  c611		       a6 ab		      ldx	temp4
   1195  c613		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1196  c616		       85 ab		      sta	temp4
   1197  c618		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1198  c61b		       85 ac		      sta	tempPointer4
   1199  c61d		       a6 ad		      ldx	temp5
   1200  c61f		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1201  c622		       85 ad		      sta	temp5
   1202  c624		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1203  c627		       85 ae		      sta	tempPointer5
   1204  c629		       a6 af		      ldx	temp6
   1205  c62b		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1206  c62e		       85 af		      sta	temp6
   1207  c630		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1208  c633		       85 b0		      sta	tempPointer6
   1209  c635		       60		      rts
   1210  c636
   1211  c636				   RCalculateDigitIndices SUBROUTINE		;Will interpret whatever is in A when called as a decimal value, then return the character lookup indices in X and Y.
   1212  c636		       a8		      tay
   1213  c637		       29 0f		      and	#$0F
   1214  c639		       18		      clc
   1215  c63a		       69 1b		      adc	#27
   1216  c63c		       aa		      tax		;Character index corresponding to low digit of the specified decimal value is now in the x register.
   1217  c63d		       98		      tya
   1218  c63e		       4a		      lsr
   1219  c63f		       4a		      lsr
   1220  c640		       4a		      lsr
   1221  c641		       4a		      lsr
   1222  c642		       29 0f		      and	#$0F
   1223  c644		       18		      clc
   1224  c645		       69 1b		      adc	#27
   1225  c647		       a8		      tay		;Character index corresponding to high digit of the specified decimal value is now in the y register.
   1226  c648		       60		      rts
   1227  c649
   1228  c649
   1229  c649
   1230  c649				   RDrawText  SUBROUTINE		;Will update graphics registers accordingly as long as the sprites are positioned correctly and the pointers set.
   1231  c649		       85 02		      sta	WSYNC
   1232  c64b		       a0 07		      ldy	#CHARACTER_HEIGHT-1
   1233  c64d		       c5 a8		      cmp	temp1	;Just used to delay 3 cycles
   1234  c64f				   .RTextLoop
   1235  c64f		       84 a8		      sty	temp1	;Stores how many loops are left
   1236  c651		       b1 af		      lda	(temp6),y
   1237  c653		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1238  c655		       85 02		      sta	WSYNC
   1239  c657		       b1 b1		      lda	(tempPointer1),y
   1240  c659		       85 1b		      sta	GRP0
   1241  c65b		       b1 b3		      lda	(tempPointer2),y
   1242  c65d		       85 1c		      sta	GRP1
   1243  c65f		       b1 b5		      lda	(tempPointer3),y
   1244  c661		       85 1b		      sta	GRP0
   1245  c663		       b1 ad		      lda	(temp5),y
   1246  c665		       aa		      tax
   1247  c666		       b1 ab		      lda	(temp4),y
   1248  c668		       a4 a9		      ldy	temp2
   1249  c66a		       ea		      nop
   1250  c66b		       85 1c		      sta	GRP1
   1251  c66d		       86 1b		      stx	GRP0
   1252  c66f		       84 1c		      sty	GRP1
   1253  c671		       85 1b		      sta	GRP0
   1254  c673		       a4 a8		      ldy	temp1
   1255  c675		       88		      dey
   1256  c676		       10 d7		      bpl	.RTextLoop
   1257  c678
   1258  c678		       c8		      iny
   1259  c679		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1260  c67b		       84 1c		      sty	GRP1
   1261  c67d		       84 1b		      sty	GRP0
   1262  c67f		       84 1c		      sty	GRP1
   1263  c681		       60		      rts
   1264  c682
   1265  c682				   RIndexToEnemyPosition SUBROUTINE		;Converts the position of a menu cursor into the correct location in the enemyID array of the target
   1266  c682		       a0 00		      ldy	#0
   1267  c684		       e8		      inx
   1268  c685				   .RIndexConversionLoop
   1269  c685		       b9 d6 00 	      lda	enemyHP,y
   1270  c688		       c9 00		      cmp	#0
   1271  c68a		       f0 03		      beq	.RNoHit
   1272  c68c		       ca		      dex
   1273  c68d		       f0 04		      beq	.RDone
   1274  c68f				   .RNoHit
   1275  c68f		       c8		      iny
   1276  c690		       4c 85 f6 	      jmp	.RIndexConversionLoop
   1277  c693				   .RDone
   1278  c693		       60		      rts		;Y is the correct offset into the enemyID array
   1279  c694
   1280  c810					      ORG	$C810	;Used to hold enemy names, nothing else can go in this section
   1281  c810					      RORG	$F810
   1282  c810
   1283  c810				   RZombieText
   1284  c810		       1a		      .byte.b	#Z
   1285  c811		       0f		      .byte.b	#O
   1286  c812		       0d		      .byte.b	#M
   1287  c813		       02		      .byte.b	#B
   1288  c814		       09		      .byte.b	#I
   1289  c815		       05		      .byte.b	#E
   1290  c816				   RGiantText
   1291  c816		       07		      .byte.b	#G
   1292  c817		       09		      .byte.b	#I
   1293  c818		       01		      .byte.b	#A
   1294  c819		       0e		      .byte.b	#N
   1295  c81a		       14		      .byte.b	#T
   1296  c81b		       00		      .byte.b	#EMPTY
   1297  c81c				   RDragonText
   1298  c81c		       04		      .byte.b	#D
   1299  c81d		       12		      .byte.b	#R
   1300  c81e		       01		      .byte.b	#A
   1301  c81f		       07		      .byte.b	#G
   1302  c820		       0f		      .byte.b	#O
   1303  c821		       0e		      .byte.b	#N
   1304  c822
   1305  c900					      ORG	$C900	;Used to hold text.
   1306  c900					      RORG	$F900
   1307  c900
   1308  c900				   RBackText
   1309  c900		       02		      .byte.b	#B
   1310  c901		       01		      .byte.b	#A
   1311  c902		       03		      .byte.b	#C
   1312  c903		       0b		      .byte.b	#K
   1313  c904		       00		      .byte.b	#EMPTY
   1314  c905		       00		      .byte.b	#EMPTY
   1315  c906				   RFireText
   1316  c906		       06		      .byte.b	#F
   1317  c907		       09		      .byte.b	#I
   1318  c908		       12		      .byte.b	#R
   1319  c909		       05		      .byte.b	#E
   1320  c90a		       00		      .byte.b	#EMPTY
   1321  c90b		       00		      .byte.b	#EMPTY
   1322  c90c				   RSleepText
   1323  c90c		       13		      .byte.b	#S
   1324  c90d		       0c		      .byte.b	#L
   1325  c90e		       05		      .byte.b	#E
   1326  c90f		       05		      .byte.b	#E
   1327  c910		       10		      .byte.b	#P
   1328  c911		       00		      .byte.b	#EMPTY
   1329  c912				   RBlizrdText
   1330  c912		       02		      .byte.b	#B
   1331  c913		       0c		      .byte.b	#L
   1332  c914		       09		      .byte.b	#I
   1333  c915		       1a		      .byte.b	#Z
   1334  c916		       12		      .byte.b	#R
   1335  c917		       04		      .byte.b	#D
   1336  c918				   RDrainText
   1337  c918		       04		      .byte.b	#D
   1338  c919		       12		      .byte.b	#R
   1339  c91a		       01		      .byte.b	#A
   1340  c91b		       09		      .byte.b	#I
   1341  c91c		       0e		      .byte.b	#N
   1342  c91d		       00		      .byte.b	#EMPTY
   1343  c91e				   RThundrText
   1344  c91e		       14		      .byte.b	#T
   1345  c91f		       08		      .byte.b	#H
   1346  c920		       15		      .byte.b	#U
   1347  c921		       0e		      .byte.b	#N
   1348  c922		       04		      .byte.b	#D
   1349  c923		       12		      .byte.b	#R
   1350  c924				   RShieldText
   1351  c924		       13		      .byte.b	#S
   1352  c925		       08		      .byte.b	#H
   1353  c926		       09		      .byte.b	#I
   1354  c927		       05		      .byte.b	#E
   1355  c928		       0c		      .byte.b	#L
   1356  c929		       04		      .byte.b	#D
   1357  c92a				   RMeteorText
   1358  c92a		       0d		      .byte.b	#M
   1359  c92b		       05		      .byte.b	#E
   1360  c92c		       14		      .byte.b	#T
   1361  c92d		       05		      .byte.b	#E
   1362  c92e		       0f		      .byte.b	#O
   1363  c92f		       12		      .byte.b	#R
   1364  c930				   RChaosText
   1365  c930		       03		      .byte.b	#C
   1366  c931		       08		      .byte.b	#H
   1367  c932		       01		      .byte.b	#A
   1368  c933		       0f		      .byte.b	#O
   1369  c934		       13		      .byte.b	#S
   1370  c935		       00		      .byte.b	#EMPTY
   1371  c936				   RHealText
   1372  c936		       08		      .byte.b	#H
   1373  c937		       05		      .byte.b	#E
   1374  c938		       01		      .byte.b	#A
   1375  c939		       0c		      .byte.b	#L
   1376  c93a		       00		      .byte.b	#EMPTY
   1377  c93b		       00		      .byte.b	#EMPTY
   1378  c93c				   RSmiteText
   1379  c93c		       13		      .byte.b	#S
   1380  c93d		       0d		      .byte.b	#M
   1381  c93e		       09		      .byte.b	#I
   1382  c93f		       14		      .byte.b	#T
   1383  c940		       05		      .byte.b	#E
   1384  c941		       00		      .byte.b	#EMPTY
   1385  c942				   RPoisonText
   1386  c942		       10		      .byte.b	#P
   1387  c943		       0f		      .byte.b	#O
   1388  c944		       09		      .byte.b	#I
   1389  c945		       13		      .byte.b	#S
   1390  c946		       0f		      .byte.b	#O
   1391  c947		       0e		      .byte.b	#N
   1392  c948				   RSharpText
   1393  c948		       13		      .byte.b	#S
   1394  c949		       08		      .byte.b	#H
   1395  c94a		       01		      .byte.b	#A
   1396  c94b		       12		      .byte.b	#R
   1397  c94c		       10		      .byte.b	#P
   1398  c94d		       00		      .byte.b	#EMPTY
   1399  c94e				   RBlightText
   1400  c94e		       02		      .byte.b	#B
   1401  c94f		       0c		      .byte.b	#L
   1402  c950		       09		      .byte.b	#I
   1403  c951		       07		      .byte.b	#G
   1404  c952		       08		      .byte.b	#H
   1405  c953		       14		      .byte.b	#T
   1406  c954				   RTriageText
   1407  c954		       14		      .byte.b	#T
   1408  c955		       12		      .byte.b	#R
   1409  c956		       09		      .byte.b	#I
   1410  c957		       01		      .byte.b	#A
   1411  c958		       07		      .byte.b	#G
   1412  c959		       05		      .byte.b	#E
   1413  c95a				   RWitherText
   1414  c95a		       17		      .byte.b	#W
   1415  c95b		       09		      .byte.b	#I
   1416  c95c		       14		      .byte.b	#T
   1417  c95d		       08		      .byte.b	#H
   1418  c95e		       05		      .byte.b	#E
   1419  c95f		       12		      .byte.b	#R
   1420  c960				   RBanishText
   1421  c960		       02		      .byte.b	#B
   1422  c961		       01		      .byte.b	#A
   1423  c962		       0e		      .byte.b	#N
   1424  c963		       09		      .byte.b	#I
   1425  c964		       13		      .byte.b	#S
   1426  c965		       08		      .byte.b	#H
   1427  c966				   RTranceText
   1428  c966		       14		      .byte.b	#T
   1429  c967		       12		      .byte.b	#R
   1430  c968		       01		      .byte.b	#A
   1431  c969		       0e		      .byte.b	#N
   1432  c96a		       03		      .byte.b	#C
   1433  c96b		       05		      .byte.b	#E
   1434  c96c				   RDonateText
   1435  c96c		       04		      .byte.b	#D
   1436  c96d		       0f		      .byte.b	#O
   1437  c96e		       0e		      .byte.b	#N
   1438  c96f		       01		      .byte.b	#A
   1439  c970		       14		      .byte.b	#T
   1440  c971		       05		      .byte.b	#E
   1441  c972
   1442  c972				   RStabsText
   1443  c972		       13		      .byte.b	#S
   1444  c973		       14		      .byte.b	#T
   1445  c974		       01		      .byte.b	#A
   1446  c975		       02		      .byte.b	#B
   1447  c976		       13		      .byte.b	#S
   1448  c977		       00		      .byte.b	#EMPTY
   1449  c978				   RShootsText
   1450  c978		       13		      .byte.b	#S
   1451  c979		       08		      .byte.b	#H
   1452  c97a		       0f		      .byte.b	#O
   1453  c97b		       0f		      .byte.b	#O
   1454  c97c		       14		      .byte.b	#T
   1455  c97d		       13		      .byte.b	#S
   1456  c97e				   RWastesText
   1457  c97e		       17		      .byte.b	#W
   1458  c97f		       01		      .byte.b	#A
   1459  c980		       13		      .byte.b	#S
   1460  c981		       14		      .byte.b	#T
   1461  c982		       05		      .byte.b	#E
   1462  c983				   RSlamsText
   1463  c983		       13		      .byte.b	#S	;Shared, saving 1 byte
   1464  c984		       0c		      .byte.b	#L
   1465  c985		       01		      .byte.b	#A
   1466  c986		       0d		      .byte.b	#M
   1467  c987		       13		      .byte.b	#S
   1468  c988		       00		      .byte.b	#EMPTY
   1469  c989				   RBitesText
   1470  c989		       02		      .byte.b	#B
   1471  c98a		       09		      .byte.b	#I
   1472  c98b		       14		      .byte.b	#T
   1473  c98c		       05		      .byte.b	#E
   1474  c98d		       13		      .byte.b	#S
   1475  c98e		       00		      .byte.b	#EMPTY
   1476  c98f				   RRushesText
   1477  c98f		       12		      .byte.b	#R
   1478  c990		       15		      .byte.b	#U
   1479  c991		       13		      .byte.b	#S
   1480  c992		       08		      .byte.b	#H
   1481  c993		       05		      .byte.b	#E
   1482  c994		       13		      .byte.b	#S
   1483  c995				   RCastsText
   1484  c995		       03		      .byte.b	#C
   1485  c996		       01		      .byte.b	#A
   1486  c997		       13		      .byte.b	#S
   1487  c998		       14		      .byte.b	#T
   1488  c999		       13		      .byte.b	#S
   1489  c99a		       00		      .byte.b	#EMPTY
   1490  c99b				   RHealsText
   1491  c99b		       08		      .byte.b	#H
   1492  c99c		       05		      .byte.b	#E
   1493  c99d		       01		      .byte.b	#A
   1494  c99e		       0c		      .byte.b	#L
   1495  c99f		       13		      .byte.b	#S
   1496  c9a0		       00		      .byte.b	#EMPTY
   1497  c9a1				   RLosesText
   1498  c9a1		       0c		      .byte.b	#L
   1499  c9a2		       0f		      .byte.b	#O
   1500  c9a3		       13		      .byte.b	#S
   1501  c9a4		       05		      .byte.b	#E
   1502  c9a5		       13		      .byte.b	#S
   1503  c9a6		       00		      .byte.b	#EMPTY
   1504  c9a7				   RMissesText
   1505  c9a7		       0d		      .byte.b	#M
   1506  c9a8		       09		      .byte.b	#I
   1507  c9a9		       13		      .byte.b	#S
   1508  c9aa		       13		      .byte.b	#S
   1509  c9ab		       05		      .byte.b	#E
   1510  c9ac		       13		      .byte.b	#S
   1511  c9ad				   RLevelsText
   1512  c9ad		       0c		      .byte.b	#L
   1513  c9ae		       05		      .byte.b	#E
   1514  c9af		       16		      .byte.b	#V
   1515  c9b0		       05		      .byte.b	#E
   1516  c9b1		       0c		      .byte.b	#L
   1517  c9b2		       13		      .byte.b	#S
   1518  c9b3				   RUpText
   1519  c9b3		       15		      .byte.b	#U
   1520  c9b4		       10		      .byte.b	#P
   1521  c9b5		       00		      .byte.b	#EMPTY
   1522  c9b6		       00		      .byte.b	#EMPTY
   1523  c9b7		       00		      .byte.b	#EMPTY
   1524  c9b8		       00		      .byte.b	#EMPTY
   1525  c9b9				   RMovesText
   1526  c9b9		       0d		      .byte.b	#M
   1527  c9ba		       0f		      .byte.b	#O
   1528  c9bb		       16		      .byte.b	#V
   1529  c9bc		       05		      .byte.b	#E
   1530  c9bd		       13		      .byte.b	#S
   1531  c9be		       00		      .byte.b	#EMPTY
   1532  c9bf				   RBacksText
   1533  c9bf		       02		      .byte.b	#B
   1534  c9c0		       01		      .byte.b	#A
   1535  c9c1		       03		      .byte.b	#C
   1536  c9c2		       0b		      .byte.b	#K
   1537  c9c3		       13		      .byte.b	#S
   1538  c9c4		       00		      .byte.b	#EMPTY
   1539  c9c5				   RLearnsText
   1540  c9c5		       0c		      .byte.b	#L
   1541  c9c6		       05		      .byte.b	#E
   1542  c9c7		       01		      .byte.b	#A
   1543  c9c8		       12		      .byte.b	#R
   1544  c9c9		       0e		      .byte.b	#N
   1545  c9ca				   RShieldMessageText
   1546  c9ca		       13		      .byte.b	#S
   1547  c9cb		       08		      .byte.b	#H
   1548  c9cc		       09		      .byte.b	#I
   1549  c9cd		       05		      .byte.b	#E
   1550  c9ce		       0c		      .byte.b	#L
   1551  c9cf		       04		      .byte.b	#D
   1552  c9d0				   RHasAText
   1553  c9d0		       08		      .byte.b	#H
   1554  c9d1		       01		      .byte.b	#A
   1555  c9d2		       13		      .byte.b	#S
   1556  c9d3		       00		      .byte.b	#EMPTY
   1557  c9d4		       01		      .byte.b	#A
   1558  c9d5		       00		      .byte.b	#EMPTY
   1559  c9d6				   RPartyText
   1560  c9d6		       10		      .byte.b	#P
   1561  c9d7		       01		      .byte.b	#A
   1562  c9d8		       12		      .byte.b	#R
   1563  c9d9		       14		      .byte.b	#T
   1564  c9da		       19		      .byte.b	#Y
   1565  c9db		       00		      .byte.b	#EMPTY
   1566  c9dc				   RDownText
   1567  c9dc		       04		      .byte.b	#D
   1568  c9dd		       0f		      .byte.b	#O
   1569  c9de		       17		      .byte.b	#W
   1570  c9df		       0e		      .byte.b	#N
   1571  c9e0		       00		      .byte.b	#EMPTY
   1572  c9e1		       00		      .byte.b	#EMPTY
   1573  c9e2				   RAwayText
   1574  c9e2		       01		      .byte.b	#A
   1575  c9e3		       17		      .byte.b	#W
   1576  c9e4		       01		      .byte.b	#A
   1577  c9e5		       19		      .byte.b	#Y
   1578  c9e6		       00		      .byte.b	#EMPTY
   1579  c9e7		       00		      .byte.b	#EMPTY
   1580  c9e8				   RWakesText
   1581  c9e8		       17		      .byte.b	#W
   1582  c9e9		       01		      .byte.b	#A
   1583  c9ea		       0b		      .byte.b	#K
   1584  c9eb		       05		      .byte.b	#E
   1585  c9ec		       13		      .byte.b	#S
   1586  c9ed		       00		      .byte.b	#EMPTY
   1587  c9ee				   RWasText
   1588  c9ee		       17		      .byte.b	#W
   1589  c9ef		       01		      .byte.b	#A
   1590  c9f0		       13		      .byte.b	#S
   1591  c9f1		       00		      .byte.b	#EMPTY
   1592  c9f2		       00		      .byte.b	#EMPTY
   1593  c9f3		       00		      .byte.b	#EMPTY
   1594  c9f4				   RCuredText
   1595  c9f4		       03		      .byte.b	#C
   1596  c9f5		       15		      .byte.b	#U
   1597  c9f6		       12		      .byte.b	#R
   1598  c9f7		       05		      .byte.b	#E
   1599  c9f8		       04		      .byte.b	#D
   1600  c9f9		       00		      .byte.b	#EMPTY
   1601  c9fa
   1602  ca00					      ORG	$CA00	;Used to hold more text data
   1603  ca00					      RORG	$FA00
   1604  ca00
   1605  ca00				   RFleesText
   1606  ca00		       06		      .byte.b	#F
   1607  ca01		       0c		      .byte.b	#L
   1608  ca02		       05		      .byte.b	#E
   1609  ca03		       05		      .byte.b	#E
   1610  ca04		       13		      .byte.b	#S
   1611  ca05		       00		      .byte.b	#EMPTY
   1612  ca06				   RWinsText
   1613  ca06		       17		      .byte.b	#W
   1614  ca07		       09		      .byte.b	#I
   1615  ca08		       0e		      .byte.b	#N
   1616  ca09		       13		      .byte.b	#S
   1617  ca0a		       00		      .byte.b	#EMPTY
   1618  ca0b		       00		      .byte.b	#EMPTY
   1619  ca0c				   RTriesText
   1620  ca0c		       14		      .byte.b	#T
   1621  ca0d		       12		      .byte.b	#R
   1622  ca0e		       09		      .byte.b	#I
   1623  ca0f		       05		      .byte.b	#E
   1624  ca10		       13		      .byte.b	#S
   1625  ca11		       00		      .byte.b	#EMPTY
   1626  ca12				   RToRunText
   1627  ca12		       14		      .byte.b	#T
   1628  ca13		       0f		      .byte.b	#O
   1629  ca14		       00		      .byte.b	#EMPTY
   1630  ca15		       12		      .byte.b	#R
   1631  ca16		       15		      .byte.b	#U
   1632  ca17		       0e		      .byte.b	#N
   1633  ca18				   RNoText
   1634  ca18		       0e		      .byte.b	#N
   1635  ca19		       0f		      .byte.b	#O
   1636  ca1a		       00		      .byte.b	#EMPTY
   1637  ca1b		       00		      .byte.b	#EMPTY
   1638  ca1c		       00		      .byte.b	#EMPTY
   1639  ca1d		       00		      .byte.b	#EMPTY
   1640  ca1e				   REffectText
   1641  ca1e		       05		      .byte.b	#E
   1642  ca1f		       06		      .byte.b	#F
   1643  ca20		       06		      .byte.b	#F
   1644  ca21		       05		      .byte.b	#E
   1645  ca22		       03		      .byte.b	#C
   1646  ca23		       14		      .byte.b	#T
   1647  ca24				   RCannotText
   1648  ca24		       03		      .byte.b	#C
   1649  ca25		       01		      .byte.b	#A
   1650  ca26		       0e		      .byte.b	#N
   1651  ca27		       0e		      .byte.b	#N
   1652  ca28		       0f		      .byte.b	#O
   1653  ca29		       14		      .byte.b	#T
   1654  ca2a				   REscapeText
   1655  ca2a		       05		      .byte.b	#E
   1656  ca2b		       13		      .byte.b	#S
   1657  ca2c		       03		      .byte.b	#C
   1658  ca2d		       01		      .byte.b	#A
   1659  ca2e		       10		      .byte.b	#P
   1660  ca2f				   RExiledText
   1661  ca2f		       05		      .byte.b	#E
   1662  ca30		       18		      .byte.b	#X
   1663  ca31		       09		      .byte.b	#I
   1664  ca32		       0c		      .byte.b	#L
   1665  ca33		       05		      .byte.b	#E
   1666  ca34		       04		      .byte.b	#D
   1667  ca35				   RFadesText
   1668  ca35		       06		      .byte.b	#F
   1669  ca36		       01		      .byte.b	#A
   1670  ca37		       04		      .byte.b	#D
   1671  ca38		       05		      .byte.b	#E
   1672  ca39		       13		      .byte.b	#S
   1673  ca3a		       00		      .byte.b	#EMPTY
   1674  ca3b				   REvadesText
   1675  ca3b		       05		      .byte.b	#E
   1676  ca3c		       16		      .byte.b	#V
   1677  ca3d		       01		      .byte.b	#A
   1678  ca3e		       04		      .byte.b	#D
   1679  ca3f		       05		      .byte.b	#E
   1680  ca40		       13		      .byte.b	#S
   1681  ca41				   RIsText
   1682  ca41		       09		      .byte.b	#I
   1683  ca42		       13		      .byte.b	#S
   1684  ca43		       00		      .byte.b	#EMPTY
   1685  ca44		       00		      .byte.b	#EMPTY
   1686  ca45		       00		      .byte.b	#EMPTY
   1687  ca46		       00		      .byte.b	#EMPTY
   1688  ca47				   RAttackText
   1689  ca47		       01		      .byte.b	#A
   1690  ca48		       14		      .byte.b	#T
   1691  ca49		       14		      .byte.b	#T
   1692  ca4a		       01		      .byte.b	#A
   1693  ca4b		       03		      .byte.b	#C
   1694  ca4c		       0b		      .byte.b	#K
   1695  ca4d				   RGuardsText
   1696  ca4d		       07		      .byte.b	#G
   1697  ca4e		       15		      .byte.b	#U
   1698  ca4f		       01		      .byte.b	#A
   1699  ca50		       12		      .byte.b	#R
   1700  ca51		       04		      .byte.b	#D
   1701  ca52		       13		      .byte.b	#S
   1702  ca53				   RAsleepText
   1703  ca53		       01		      .byte.b	#A
   1704  ca54		       13		      .byte.b	#S
   1705  ca55		       0c		      .byte.b	#L
   1706  ca56		       05		      .byte.b	#E
   1707  ca57		       05		      .byte.b	#E
   1708  ca58		       10		      .byte.b	#P
   1709  ca59				   RFellText
   1710  ca59		       06		      .byte.b	#F
   1711  ca5a		       05		      .byte.b	#E
   1712  ca5b		       0c		      .byte.b	#L
   1713  ca5c		       0c		      .byte.b	#L
   1714  ca5d		       00		      .byte.b	#EMPTY
   1715  ca5e		       00		      .byte.b	#EMPTY
   1716  ca5f
   1717  ca5f				   RClassColors
   1718  ca5f		       8a		      .byte.b	$8A	;Knight
   1719  ca60		       06		      .byte.b	$06	;Rogue
   1720  ca61		       ec		      .byte.b	$EC	;Cleric
   1721  ca62		       56		      .byte.b	$56	;Wizard
   1722  ca63		       c8		      .byte.b	$C8	;Ranger
   1723  ca64		       36		      .byte.b	$36	;Paladin
   1724  ca65
   1725  ca65				   RCasterType		;0 is no casting, 1 is full caster, FF is half-caster
   1726  ca65		       00		      .byte.b	$0	;Knight
   1727  ca66		       00		      .byte.b	$0	;Rogue
   1728  ca67		       01		      .byte.b	$1	;Cleric
   1729  ca68		       01		      .byte.b	$1	;Wizard
   1730  ca69		       ff		      .byte.b	$FF	;Ranger
   1731  ca6a		       ff		      .byte.b	$FF	;Paladin
   1732  ca6b
   1733  ca6b				   RMazeColors
   1734  ca6b		       2a		      .byte.b	$2A	;Orange
   1735  ca6c		       8a		      .byte.b	$8A	;Blue
   1736  ca6d		       6a		      .byte.b	$6A	;Purple
   1737  ca6e		       0a		      .byte.b	$0A	;Gray
   1738  ca6f
   1739  ca6f				   RSpellColors
   1740  ca6f		       0e		      .byte.b	TEXT_HIGHLIGHTED_COLOR	;BACK
   1741  ca70		       fa		      .byte.b	$FA	;FIRE
   1742  ca71		       b6		      .byte.b	$B6	;SLEEP
   1743  ca72		       9e		      .byte.b	$9E	;BLIZRD
   1744  ca73		       36		      .byte.b	$36	;DRAIN
   1745  ca74		       1e		      .byte.b	$1E	;THUNDR
   1746  ca75		       78		      .byte.b	$78	;SHIELD
   1747  ca76		       fc		      .byte.b	$FC	;METEOR
   1748  ca77		       5a		      .byte.b	$5A	;CHAOS
   1749  ca78		       c8		      .byte.b	$C8	;HEAL
   1750  ca79		       1c		      .byte.b	$1C	;SMITE
   1751  ca7a		       dc		      .byte.b	$DC	;POISON
   1752  ca7b		       a8		      .byte.b	$A8	;SHARP
   1753  ca7c		       ce		      .byte.b	$CE	;BLIGHT
   1754  ca7d		       9a		      .byte.b	$9A	;TRIAGE
   1755  ca7e		       bc		      .byte.b	$BC	;WITHER
   1756  ca7f		       48		      .byte.b	$48	;BANISH
   1757  ca80		       56		      .byte.b	$56	;TRANCE
   1758  ca81		       3a		      .byte.b	$3A	;DONATE
   1759  ca82
   1760  ca82				   RClassNameLookupTable
   1761  ca82		       3a		      .byte.b	(RKnightText & $FF)
   1762  ca83		       40		      .byte.b	(RRogueText & $FF)
   1763  ca84		       46		      .byte.b	(RClericText & $FF)
   1764  ca85		       4c		      .byte.b	(RWizardText & $FF)
   1765  ca86		       52		      .byte.b	(RRangerText & $FF)
   1766  ca87		       58		      .byte.b	(RPaladinText & $FF)
   1767  ca88
   1768  ca88				   RBattleOptionsLookupTable
   1769  ca88		       5e		      .byte.b	(RFightText & $FF)
   1770  ca89		       64		      .byte.b	(RCastText & $FF)
   1771  ca8a		       6a		      .byte.b	(RMoveText & $FF)
   1772  ca8b		       70		      .byte.b	(RRunText & $FF)
   1773  ca8c		       76		      .byte.b	(RGuardText & $FF)
   1774  ca8d		       7c		      .byte.b	(RParryText & $FF)
   1775  ca8e
   1776  ca8e				   REnemyNameLookup
   1777  ca8e		       10		      .byte.b	(RZombieText & $FF)
   1778  ca8f		       16		      .byte.b	(RGiantText & $FF)
   1779  ca90		       1c		      .byte.b	(RDragonText & $FF)
   1780  ca91
   1781  ca91				   REnemyColorLookup
   1782  ca91		       d6		      .byte.b	$D6	;Zombie
   1783  ca92		       ea		      .byte.b	$EA	;Giant
   1784  ca93		       c8		      .byte.b	$C8	;Dragon
   1785  ca94
   1786  cb00					      ORG	$CB00	;Used to hold miscellaneous data/lookup tables and text
   1787  cb00					      RORG	$FB00
   1788  cb00
   1789  cb00				   RMessagesLowLookup
   1790  cb00		       72		      .byte.b	(RStabsText & $FF)	;Rogue/Paladin
   1791  cb01		       78		      .byte.b	(RShootsText & $FF)	;Wizard/Ranger
   1792  cb02		       83		      .byte.b	(RSlamsText & $FF)	;Cleric
   1793  cb03		       89		      .byte.b	(RBitesText & $FF)
   1794  cb04		       8f		      .byte.b	(RRushesText & $FF)	;Knight
   1795  cb05		       95		      .byte.b	(RCastsText & $FF)
   1796  cb06		       9b		      .byte.b	(RHealsText & $FF)
   1797  cb07		       a1		      .byte.b	(RLosesText & $FF)
   1798  cb08		       a7		      .byte.b	(RMissesText & $FF)
   1799  cb09		       ad		      .byte.b	(RLevelsText & $FF)
   1800  cb0a		       b3		      .byte.b	(RUpText & $FF)
   1801  cb0b		       c5		      .byte.b	(RLearnsText & $FF)
   1802  cb0c		       b9		      .byte.b	(RMovesText & $FF)
   1803  cb0d		       bf		      .byte.b	(RBacksText & $FF)
   1804  cb0e		       dc		      .byte.b	(RDownText & $FF)
   1805  cb0f		       e2		      .byte.b	(RAwayText & $FF)
   1806  cb10		       7e		      .byte.b	(RWastesText & $FF)
   1807  cb11		       ee		      .byte.b	(RWasText & $FF)
   1808  cb12		       f4		      .byte.b	(RCuredText & $FF)
   1809  cb13		       e8		      .byte.b	(RWakesText & $FF)
   1810  cb14		       d0		      .byte.b	(RHasAText & $FF)
   1811  cb15		       ca		      .byte.b	(RShieldMessageText & $FF)
   1812  cb16		       d6		      .byte.b	(RPartyText & $FF)
   1813  cb17		       00		      .byte.b	(RFleesText & $FF)
   1814  cb18		       06		      .byte.b	(RWinsText & $FF)
   1815  cb19		       0c		      .byte.b	(RTriesText & $FF)
   1816  cb1a		       12		      .byte.b	(RToRunText & $FF)
   1817  cb1b		       18		      .byte.b	(RNoText & $FF)
   1818  cb1c		       1e		      .byte.b	(REffectText & $FF)
   1819  cb1d		       24		      .byte.b	(RCannotText & $FF)
   1820  cb1e		       2a		      .byte.b	(REscapeText & $FF)
   1821  cb1f		       4d		      .byte.b	(RGuardsText & $FF)
   1822  cb20		       47		      .byte.b	(RAttackText & $FF)
   1823  cb21		       59		      .byte.b	(RFellText & $FF)
   1824  cb22		       53		      .byte.b	(RAsleepText & $FF)
   1825  cb23		       41		      .byte.b	(RIsText & $FF)
   1826  cb24		       3b		      .byte.b	(REvadesText & $FF)
   1827  cb25		       35		      .byte.b	(RFadesText & $FF)
   1828  cb26		       2f		      .byte.b	(RExiledText & $FF)
   1829  cb27
   1830  cb27				   RSpellTextLookupTable
   1831  cb27		       00		      .byte.b	(RBackText & $FF)
   1832  cb28		       06		      .byte.b	(RFireText & $FF)
   1833  cb29		       0c		      .byte.b	(RSleepText & $FF)
   1834  cb2a		       12		      .byte.b	(RBlizrdText & $FF)
   1835  cb2b		       18		      .byte.b	(RDrainText & $FF)
   1836  cb2c		       1e		      .byte.b	(RThundrText & $FF)
   1837  cb2d		       24		      .byte.b	(RShieldText & $FF)
   1838  cb2e		       2a		      .byte.b	(RMeteorText & $FF)
   1839  cb2f		       30		      .byte.b	(RChaosText & $FF)
   1840  cb30		       36		      .byte.b	(RHealText & $FF)
   1841  cb31		       3c		      .byte.b	(RSmiteText & $FF)
   1842  cb32		       42		      .byte.b	(RPoisonText & $FF)
   1843  cb33		       48		      .byte.b	(RSharpText & $FF)
   1844  cb34		       4e		      .byte.b	(RBlightText & $FF)
   1845  cb35		       54		      .byte.b	(RTriageText & $FF)
   1846  cb36		       5a		      .byte.b	(RWitherText & $FF)
   1847  cb37		       60		      .byte.b	(RBanishText & $FF)
   1848  cb38		       66		      .byte.b	(RTranceText & $FF)
   1849  cb39		       6c		      .byte.b	(RDonateText & $FF)
   1850  cb3a
   1851  cb3a				   RKnightText
   1852  cb3a		       0b		      .byte.b	#K
   1853  cb3b		       0e		      .byte.b	#N
   1854  cb3c		       09		      .byte.b	#I
   1855  cb3d		       07		      .byte.b	#G
   1856  cb3e		       08		      .byte.b	#H
   1857  cb3f		       14		      .byte.b	#T
   1858  cb40				   RRogueText
   1859  cb40		       12		      .byte.b	#R
   1860  cb41		       0f		      .byte.b	#O
   1861  cb42		       07		      .byte.b	#G
   1862  cb43		       15		      .byte.b	#U
   1863  cb44		       05		      .byte.b	#E
   1864  cb45		       00		      .byte.b	#EMPTY
   1865  cb46				   RClericText
   1866  cb46		       03		      .byte.b	#C
   1867  cb47		       0c		      .byte.b	#L
   1868  cb48		       05		      .byte.b	#E
   1869  cb49		       12		      .byte.b	#R
   1870  cb4a		       09		      .byte.b	#I
   1871  cb4b		       03		      .byte.b	#C
   1872  cb4c				   RWizardText
   1873  cb4c		       17		      .byte.b	#W
   1874  cb4d		       09		      .byte.b	#I
   1875  cb4e		       1a		      .byte.b	#Z
   1876  cb4f		       01		      .byte.b	#A
   1877  cb50		       12		      .byte.b	#R
   1878  cb51		       04		      .byte.b	#D
   1879  cb52				   RRangerText
   1880  cb52		       12		      .byte.b	#R
   1881  cb53		       01		      .byte.b	#A
   1882  cb54		       0e		      .byte.b	#N
   1883  cb55		       07		      .byte.b	#G
   1884  cb56		       05		      .byte.b	#E
   1885  cb57		       12		      .byte.b	#R
   1886  cb58				   RPaladinText
   1887  cb58		       10		      .byte.b	#P
   1888  cb59		       01		      .byte.b	#A
   1889  cb5a		       0c		      .byte.b	#L
   1890  cb5b		       01		      .byte.b	#A
   1891  cb5c		       04		      .byte.b	#D
   1892  cb5d		       0e		      .byte.b	#N
   1893  cb5e
   1894  cb5e				   RFightText
   1895  cb5e		       06		      .byte.b	#F
   1896  cb5f		       09		      .byte.b	#I
   1897  cb60		       07		      .byte.b	#G
   1898  cb61		       08		      .byte.b	#H
   1899  cb62		       14		      .byte.b	#T
   1900  cb63		       00		      .byte.b	#EMPTY
   1901  cb64				   RCastText
   1902  cb64		       03		      .byte.b	#C
   1903  cb65		       01		      .byte.b	#A
   1904  cb66		       13		      .byte.b	#S
   1905  cb67		       14		      .byte.b	#T
   1906  cb68		       00		      .byte.b	#EMPTY
   1907  cb69		       00		      .byte.b	#EMPTY
   1908  cb6a				   RMoveText
   1909  cb6a		       0d		      .byte.b	#M
   1910  cb6b		       0f		      .byte.b	#O
   1911  cb6c		       16		      .byte.b	#V
   1912  cb6d		       05		      .byte.b	#E
   1913  cb6e		       00		      .byte.b	#EMPTY
   1914  cb6f		       00		      .byte.b	#EMPTY
   1915  cb70				   RRunText
   1916  cb70		       12		      .byte.b	#R
   1917  cb71		       15		      .byte.b	#U
   1918  cb72		       0e		      .byte.b	#N
   1919  cb73		       00		      .byte.b	#EMPTY
   1920  cb74		       00		      .byte.b	#EMPTY
   1921  cb75		       00		      .byte.b	#EMPTY
   1922  cb76				   RGuardText
   1923  cb76		       07		      .byte.b	#G
   1924  cb77		       15		      .byte.b	#U
   1925  cb78		       01		      .byte.b	#A
   1926  cb79		       12		      .byte.b	#R
   1927  cb7a		       04		      .byte.b	#D
   1928  cb7b		       00		      .byte.b	#EMPTY
   1929  cb7c				   RParryText
   1930  cb7c		       10		      .byte.b	#P
   1931  cb7d		       01		      .byte.b	#A
   1932  cb7e		       12		      .byte.b	#R
   1933  cb7f		       12		      .byte.b	#R
   1934  cb80		       19		      .byte.b	#Y
   1935  cb81		       00		      .byte.b	#EMPTY
   1936  cb82
   1937  cb82				   RSpellListLookup
   1938  cb82		       00		      .byte.b	#0
   1939  cb83		       00		      .byte.b	#0
   1940  cb84		       91		      .byte.b	(RClericSpellList & $FF)
   1941  cb85		       88		      .byte.b	(RWizardSpellList & $FF)
   1942  cb86		       a3		      .byte.b	(RRangerSpellList & $FF)
   1943  cb87		       9a		      .byte.b	(RPaladinSpellList & $FF)
   1944  cb88
   1945  cb88				   RWizardSpellList
   1946  cb88		       00		      .byte.b	#$0	;BACK
   1947  cb89		       01		      .byte.b	#$1	;FIRE
   1948  cb8a		       03		      .byte.b	#$3	;BLIZRD
   1949  cb8b		       04		      .byte.b	#$4	;DRAIN
   1950  cb8c		       02		      .byte.b	#$2	;SLEEP
   1951  cb8d		       05		      .byte.b	#$5	;THUNDR
   1952  cb8e		       06		      .byte.b	#$6	;SHIELD
   1953  cb8f		       08		      .byte.b	#$8	;CHAOS
   1954  cb90		       07		      .byte.b	#$7	;METEOR
   1955  cb91				   RClericSpellList
   1956  cb91		       00		      .byte.b	#$0	;BACK
   1957  cb92		       09		      .byte.b	#$9	;HEAL
   1958  cb93		       0f		      .byte.b	#$F	;WITHER
   1959  cb94		       0c		      .byte.b	#$C	;SHARP
   1960  cb95		       0e		      .byte.b	#$E	;TRIAGE
   1961  cb96		       0d		      .byte.b	#$D	;BLIGHT
   1962  cb97		       11		      .byte.b	#$11	;TRANCE
   1963  cb98		       12		      .byte.b	#$12	;DONATE
   1964  cb99		       10		      .byte.b	#$10	;BANISH
   1965  cb9a				   RPaladinSpellList
   1966  cb9a		       00		      .byte.b	#$0	;BACK
   1967  cb9b		       ff		      .byte.b	#$FF
   1968  cb9c		       09		      .byte.b	#$9	;HEAL
   1969  cb9d		       ff		      .byte.b	#$FF
   1970  cb9e		       0a		      .byte.b	#$A	;SMITE
   1971  cb9f		       ff		      .byte.b	#$FF
   1972  cba0		       0c		      .byte.b	#$C	;SHARP
   1973  cba1		       ff		      .byte.b	#$FF
   1974  cba2		       06		      .byte.b	#$6	;SHIELD
   1975  cba3				   RRangerSpellList
   1976  cba3		       00		      .byte.b	#$0	;BACK
   1977  cba4		       ff		      .byte.b	#$FF
   1978  cba5		       0b		      .byte.b	#$B	;POISON
   1979  cba6		       ff		      .byte.b	#$FF
   1980  cba7		       09		      .byte.b	#$9	;HEAL
   1981  cba8		       ff		      .byte.b	#$FF
   1982  cba9		       02		      .byte.b	#$2	;SLEEP
   1983  cbaa		       ff		      .byte.b	#$FF
   1984  cbab		       0d		      .byte.b	#$D	;BLIGHT
   1985  cbac
   1986  cbac				   RCharacterLowLookupTable		;Contains the low bytes of the pointers to all the character graphics.
   1987  cbac		       00		      .byte.b	(RNoCharacter & $FF)
   1988  cbad		       08		      .byte.b	(RLetterA & $FF)
   1989  cbae		       10		      .byte.b	(RLetterB & $FF)
   1990  cbaf		       18		      .byte.b	(RLetterC & $FF)
   1991  cbb0		       20		      .byte.b	(RLetterD & $FF)
   1992  cbb1		       28		      .byte.b	(RLetterE & $FF)
   1993  cbb2		       30		      .byte.b	(RLetterF & $FF)
   1994  cbb3		       38		      .byte.b	(RLetterG & $FF)
   1995  cbb4		       40		      .byte.b	(RLetterH & $FF)
   1996  cbb5		       48		      .byte.b	(RLetterI & $FF)
   1997  cbb6		       50		      .byte.b	(RLetterJ & $FF)
   1998  cbb7		       58		      .byte.b	(RLetterK & $FF)
   1999  cbb8		       60		      .byte.b	(RLetterL & $FF)
   2000  cbb9		       68		      .byte.b	(RLetterM & $FF)
   2001  cbba		       70		      .byte.b	(RLetterN & $FF)
   2002  cbbb		       78		      .byte.b	(RLetterO & $FF)
   2003  cbbc		       80		      .byte.b	(RLetterP & $FF)
   2004  cbbd		       88		      .byte.b	(RLetterQ & $FF)
   2005  cbbe		       90		      .byte.b	(RLetterR & $FF)
   2006  cbbf		       98		      .byte.b	(RLetterS & $FF)
   2007  cbc0		       a0		      .byte.b	(RLetterT & $FF)
   2008  cbc1		       a8		      .byte.b	(RLetterU & $FF)
   2009  cbc2		       b0		      .byte.b	(RLetterV & $FF)
   2010  cbc3		       b8		      .byte.b	(RLetterW & $FF)
   2011  cbc4		       c0		      .byte.b	(RLetterX & $FF)
   2012  cbc5		       c8		      .byte.b	(RLetterY & $FF)
   2013  cbc6		       d0		      .byte.b	(RLetterZ & $FF)
   2014  cbc7
   2015  cbc7		       40		      .byte.b	(RNumber0 & $FF)
   2016  cbc8		       48		      .byte.b	(RNumber1 & $FF)
   2017  cbc9		       50		      .byte.b	(RNumber2 & $FF)
   2018  cbca		       58		      .byte.b	(RNumber3 & $FF)
   2019  cbcb		       60		      .byte.b	(RNumber4 & $FF)
   2020  cbcc		       68		      .byte.b	(RNumber5 & $FF)
   2021  cbcd		       70		      .byte.b	(RNumber6 & $FF)
   2022  cbce		       78		      .byte.b	(RNumber7 & $FF)
   2023  cbcf		       80		      .byte.b	(RNumber8 & $FF)
   2024  cbd0		       88		      .byte.b	(RNumber9 & $FF)
   2025  cbd1
   2026  cbd1				   RCharacterHighLookupTable		;Contains the high bytes of the pointers to all the character graphics.
   2027  cbd1		       fd		      .byte.b	(RNoCharacter >> 8 & $FF)
   2028  cbd2		       fd		      .byte.b	(RLetterA >> 8 & $FF)
   2029  cbd3		       fd		      .byte.b	(RLetterB >> 8 & $FF)
   2030  cbd4		       fd		      .byte.b	(RLetterC >> 8 & $FF)
   2031  cbd5		       fd		      .byte.b	(RLetterD >> 8 & $FF)
   2032  cbd6		       fd		      .byte.b	(RLetterE >> 8 & $FF)
   2033  cbd7		       fd		      .byte.b	(RLetterF >> 8 & $FF)
   2034  cbd8		       fd		      .byte.b	(RLetterG >> 8 & $FF)
   2035  cbd9		       fd		      .byte.b	(RLetterH >> 8 & $FF)
   2036  cbda		       fd		      .byte.b	(RLetterI >> 8 & $FF)
   2037  cbdb		       fd		      .byte.b	(RLetterJ >> 8 & $FF)
   2038  cbdc		       fd		      .byte.b	(RLetterK >> 8 & $FF)
   2039  cbdd		       fd		      .byte.b	(RLetterL >> 8 & $FF)
   2040  cbde		       fd		      .byte.b	(RLetterM >> 8 & $FF)
   2041  cbdf		       fd		      .byte.b	(RLetterN >> 8 & $FF)
   2042  cbe0		       fd		      .byte.b	(RLetterO >> 8 & $FF)
   2043  cbe1		       fd		      .byte.b	(RLetterP >> 8 & $FF)
   2044  cbe2		       fd		      .byte.b	(RLetterQ >> 8 & $FF)
   2045  cbe3		       fd		      .byte.b	(RLetterR >> 8 & $FF)
   2046  cbe4		       fd		      .byte.b	(RLetterS >> 8 & $FF)
   2047  cbe5		       fd		      .byte.b	(RLetterT >> 8 & $FF)
   2048  cbe6		       fd		      .byte.b	(RLetterU >> 8 & $FF)
   2049  cbe7		       fd		      .byte.b	(RLetterV >> 8 & $FF)
   2050  cbe8		       fd		      .byte.b	(RLetterW >> 8 & $FF)
   2051  cbe9		       fd		      .byte.b	(RLetterX >> 8 & $FF)
   2052  cbea		       fd		      .byte.b	(RLetterY >> 8 & $FF)
   2053  cbeb		       fd		      .byte.b	(RLetterZ >> 8 & $FF)
   2054  cbec
   2055  cbec		       fc		      .byte.b	(RNumber0 >> 8 & $FF)
   2056  cbed		       fc		      .byte.b	(RNumber1 >> 8 & $FF)
   2057  cbee		       fc		      .byte.b	(RNumber2 >> 8 & $FF)
   2058  cbef		       fc		      .byte.b	(RNumber3 >> 8 & $FF)
   2059  cbf0		       fc		      .byte.b	(RNumber4 >> 8 & $FF)
   2060  cbf1		       fc		      .byte.b	(RNumber5 >> 8 & $FF)
   2061  cbf2		       fc		      .byte.b	(RNumber6 >> 8 & $FF)
   2062  cbf3		       fc		      .byte.b	(RNumber7 >> 8 & $FF)
   2063  cbf4		       fc		      .byte.b	(RNumber8 >> 8 & $FF)
   2064  cbf5		       fc		      .byte.b	(RNumber9 >> 8 & $FF)
   2065  cbf6
   2066  cc00					      ORG	$CC00	;Used to hold more graphics data
   2067  cc00					      RORG	$FC00
   2068  cc00
   2069  cc00				   RAvatarDead
   2070  cc00		       ff		      .byte.b	#%11111111
   2071  cc01		       81		      .byte.b	#%10000001
   2072  cc02		       81		      .byte.b	#%10000001
   2073  cc03		       81		      .byte.b	#%10000001
   2074  cc04		       81		      .byte.b	#%10000001
   2075  cc05		       81		      .byte.b	#%10000001
   2076  cc06		       81		      .byte.b	#%10000001
   2077  cc07		       ff		      .byte.b	#%11111111
   2078  cc08				   RAvatarSad
   2079  cc08		       ff		      .byte.b	#%11111111
   2080  cc09		       81		      .byte.b	#%10000001
   2081  cc0a		       a5		      .byte.b	#%10100101
   2082  cc0b		       99		      .byte.b	#%10011001
   2083  cc0c		       81		      .byte.b	#%10000001
   2084  cc0d		       a5		      .byte.b	#%10100101
   2085  cc0e		       81		      .byte.b	#%10000001
   2086  cc0f		       ff		      .byte.b	#%11111111
   2087  cc10				   RAvatarNeutral
   2088  cc10		       ff		      .byte.b	#%11111111
   2089  cc11		       81		      .byte.b	#%10000001
   2090  cc12		       bd		      .byte.b	#%10111101
   2091  cc13		       81		      .byte.b	#%10000001
   2092  cc14		       81		      .byte.b	#%10000001
   2093  cc15		       a5		      .byte.b	#%10100101
   2094  cc16		       81		      .byte.b	#%10000001
   2095  cc17		       ff		      .byte.b	#%11111111
   2096  cc18				   RAvatarHappy
   2097  cc18		       ff		      .byte.b	#%11111111
   2098  cc19		       81		      .byte.b	#%10000001
   2099  cc1a		       99		      .byte.b	#%10011001
   2100  cc1b		       a5		      .byte.b	#%10100101
   2101  cc1c		       81		      .byte.b	#%10000001
   2102  cc1d		       a5		      .byte.b	#%10100101
   2103  cc1e		       81		      .byte.b	#%10000001
   2104  cc1f		       ff		      .byte.b	#%11111111
   2105  cc20				   RAvatarExcited
   2106  cc20		       ff		      .byte.b	#%11111111
   2107  cc21		       81		      .byte.b	#%10000001
   2108  cc22		       99		      .byte.b	#%10011001
   2109  cc23		       bd		      .byte.b	#%10111101
   2110  cc24		       81		      .byte.b	#%10000001
   2111  cc25		       a5		      .byte.b	#%10100101
   2112  cc26		       81		      .byte.b	#%10000001
   2113  cc27		       ff		      .byte.b	#%11111111
   2114  cc28				   RAvatarPain
   2115  cc28		       ff		      .byte.b	#%11111111
   2116  cc29		       99		      .byte.b	#%10011001
   2117  cc2a		       bd		      .byte.b	#%10111101
   2118  cc2b		       99		      .byte.b	#%10011001
   2119  cc2c		       c3		      .byte.b	#%11000011
   2120  cc2d		       a5		      .byte.b	#%10100101
   2121  cc2e		       81		      .byte.b	#%10000001
   2122  cc2f		       ff		      .byte.b	#%11111111
   2123  cc30				   RAvatarParalyzed
   2124  cc30		       ff		      .byte.b	#%11111111
   2125  cc31		       81		      .byte.b	#%10000001
   2126  cc32		       ab		      .byte.b	#%10101011
   2127  cc33		       d5		      .byte.b	#%11010101
   2128  cc34		       81		      .byte.b	#%10000001
   2129  cc35		       a5		      .byte.b	#%10100101
   2130  cc36		       81		      .byte.b	#%10000001
   2131  cc37		       ff		      .byte.b	#%11111111
   2132  cc38				   RAvatarSick
   2133  cc38		       ff		      .byte.b	#%11111111
   2134  cc39		       81		      .byte.b	#%10000001
   2135  cc3a		       a5		      .byte.b	#%10100101
   2136  cc3b		       99		      .byte.b	#%10011001
   2137  cc3c		       c3		      .byte.b	#%11000011
   2138  cc3d		       a5		      .byte.b	#%10100101
   2139  cc3e		       81		      .byte.b	#%10000001
   2140  cc3f		       ff		      .byte.b	#%11111111
   2141  cc40
   2142  cc40				   RNumber0
   2143  cc40		       7e		      .byte.b	#%01111110
   2144  cc41		       66		      .byte.b	#%01100110
   2145  cc42		       66		      .byte.b	#%01100110
   2146  cc43		       66		      .byte.b	#%01100110
   2147  cc44		       66		      .byte.b	#%01100110
   2148  cc45		       66		      .byte.b	#%01100110
   2149  cc46		       66		      .byte.b	#%01100110
   2150  cc47		       7e		      .byte.b	#%01111110
   2151  cc48				   RNumber1
   2152  cc48		       18		      .byte.b	#%00011000
   2153  cc49		       18		      .byte.b	#%00011000
   2154  cc4a		       18		      .byte.b	#%00011000
   2155  cc4b		       18		      .byte.b	#%00011000
   2156  cc4c		       18		      .byte.b	#%00011000
   2157  cc4d		       18		      .byte.b	#%00011000
   2158  cc4e		       38		      .byte.b	#%00111000
   2159  cc4f		       18		      .byte.b	#%00011000
   2160  cc50				   RNumber2
   2161  cc50		       7e		      .byte.b	#%01111110
   2162  cc51		       60		      .byte.b	#%01100000
   2163  cc52		       60		      .byte.b	#%01100000
   2164  cc53		       60		      .byte.b	#%01100000
   2165  cc54		       7e		      .byte.b	#%01111110
   2166  cc55		       06		      .byte.b	#%00000110
   2167  cc56		       06		      .byte.b	#%00000110
   2168  cc57		       7e		      .byte.b	#%01111110
   2169  cc58				   RNumber3
   2170  cc58		       7e		      .byte.b	#%01111110
   2171  cc59		       06		      .byte.b	#%00000110
   2172  cc5a		       06		      .byte.b	#%00000110
   2173  cc5b		       06		      .byte.b	#%00000110
   2174  cc5c		       1e		      .byte.b	#%00011110
   2175  cc5d		       06		      .byte.b	#%00000110
   2176  cc5e		       06		      .byte.b	#%00000110
   2177  cc5f		       7e		      .byte.b	#%01111110
   2178  cc60				   RNumber4
   2179  cc60		       06		      .byte.b	#%00000110
   2180  cc61		       06		      .byte.b	#%00000110
   2181  cc62		       06		      .byte.b	#%00000110
   2182  cc63		       7e		      .byte.b	#%01111110
   2183  cc64		       66		      .byte.b	#%01100110
   2184  cc65		       66		      .byte.b	#%01100110
   2185  cc66		       66		      .byte.b	#%01100110
   2186  cc67		       66		      .byte.b	#%01100110
   2187  cc68				   RNumber5
   2188  cc68		       7e		      .byte.b	#%01111110
   2189  cc69		       06		      .byte.b	#%00000110
   2190  cc6a		       06		      .byte.b	#%00000110
   2191  cc6b		       06		      .byte.b	#%00000110
   2192  cc6c		       7e		      .byte.b	#%01111110
   2193  cc6d		       60		      .byte.b	#%01100000
   2194  cc6e		       60		      .byte.b	#%01100000
   2195  cc6f		       7e		      .byte.b	#%01111110
   2196  cc70				   RNumber6
   2197  cc70		       7e		      .byte.b	#%01111110
   2198  cc71		       66		      .byte.b	#%01100110
   2199  cc72		       66		      .byte.b	#%01100110
   2200  cc73		       66		      .byte.b	#%01100110
   2201  cc74		       7e		      .byte.b	#%01111110
   2202  cc75		       60		      .byte.b	#%01100000
   2203  cc76		       60		      .byte.b	#%01100000
   2204  cc77		       7e		      .byte.b	#%01111110
   2205  cc78				   RNumber7
   2206  cc78		       06		      .byte.b	#%00000110
   2207  cc79		       06		      .byte.b	#%00000110
   2208  cc7a		       06		      .byte.b	#%00000110
   2209  cc7b		       06		      .byte.b	#%00000110
   2210  cc7c		       06		      .byte.b	#%00000110
   2211  cc7d		       06		      .byte.b	#%00000110
   2212  cc7e		       06		      .byte.b	#%00000110
   2213  cc7f		       7e		      .byte.b	#%01111110
   2214  cc80				   RNumber8
   2215  cc80		       7e		      .byte.b	#%01111110
   2216  cc81		       66		      .byte.b	#%01100110
   2217  cc82		       66		      .byte.b	#%01100110
   2218  cc83		       66		      .byte.b	#%01100110
   2219  cc84		       7e		      .byte.b	#%01111110
   2220  cc85		       66		      .byte.b	#%01100110
   2221  cc86		       66		      .byte.b	#%01100110
   2222  cc87		       7e		      .byte.b	#%01111110
   2223  cc88				   RNumber9
   2224  cc88		       06		      .byte.b	#%00000110
   2225  cc89		       06		      .byte.b	#%00000110
   2226  cc8a		       06		      .byte.b	#%00000110
   2227  cc8b		       7e		      .byte.b	#%01111110
   2228  cc8c		       66		      .byte.b	#%01100110
   2229  cc8d		       66		      .byte.b	#%01100110
   2230  cc8e		       66		      .byte.b	#%01100110
   2231  cc8f		       7e		      .byte.b	#%01111110
   2232  cc90
   2233  cc90				   RNumberLookup
   2234  cc90		       1b		      .byte.b	27
   2235  cc91		       1c		      .byte.b	28
   2236  cc92		       1d		      .byte.b	29
   2237  cc93		       1e		      .byte.b	30
   2238  cc94		       1f		      .byte.b	31
   2239  cc95		       20		      .byte.b	32
   2240  cc96		       21		      .byte.b	33
   2241  cc97		       22		      .byte.b	34
   2242  cc98		       23		      .byte.b	35
   2243  cc99		       24		      .byte.b	36
   2244  cc9a
   2245  cc9a				   RPartyPositionMasks
   2246  cc9a		       01		      .byte.b	$01
   2247  cc9b		       02		      .byte.b	$02
   2248  cc9c		       04		      .byte.b	$04
   2249  cc9d		       08		      .byte.b	$08
   2250  cc9e
   2251  cc9e				   RMoodLookupTable
   2252  cc9e		       00		      .byte.b	(RAvatarDead & $FF)
   2253  cc9f		       08		      .byte.b	(RAvatarSad & $FF)
   2254  cca0		       10		      .byte.b	(RAvatarNeutral & $FF)
   2255  cca1		       18		      .byte.b	(RAvatarHappy & $FF)
   2256  cca2		       20		      .byte.b	(RAvatarExcited & $FF)
   2257  cca3		       28		      .byte.b	(RAvatarPain & $FF)
   2258  cca4		       30		      .byte.b	(RAvatarParalyzed & $FF)
   2259  cca5		       38		      .byte.b	(RAvatarSick & $FF)
   2260  cca6
   2261  cd00					      ORG	$CD00	;Used for holding the letters of the alphabet
   2262  cd00					      RORG	$FD00
   2263  cd00
   2264  cd00				   RNoCharacter
   2265  cd00		       00		      .byte.b	#%00000000
   2266  cd01		       00		      .byte.b	#%00000000
   2267  cd02		       00		      .byte.b	#%00000000
   2268  cd03		       00		      .byte.b	#%00000000
   2269  cd04		       00		      .byte.b	#%00000000
   2270  cd05		       00		      .byte.b	#%00000000
   2271  cd06		       00		      .byte.b	#%00000000
   2272  cd07		       00		      .byte.b	#%00000000
   2273  cd08				   RLetterA
   2274  cd08		       62		      .byte.b	#%01100010
   2275  cd09		       62		      .byte.b	#%01100010
   2276  cd0a		       62		      .byte.b	#%01100010
   2277  cd0b		       62		      .byte.b	#%01100010
   2278  cd0c		       7e		      .byte.b	#%01111110
   2279  cd0d		       62		      .byte.b	#%01100010
   2280  cd0e		       62		      .byte.b	#%01100010
   2281  cd0f		       7e		      .byte.b	#%01111110
   2282  cd10				   RLetterB
   2283  cd10		       7e		      .byte.b	#%01111110
   2284  cd11		       62		      .byte.b	#%01100010
   2285  cd12		       62		      .byte.b	#%01100010
   2286  cd13		       62		      .byte.b	#%01100010
   2287  cd14		       7c		      .byte.b	#%01111100
   2288  cd15		       62		      .byte.b	#%01100010
   2289  cd16		       62		      .byte.b	#%01100010
   2290  cd17		       7e		      .byte.b	#%01111110
   2291  cd18				   RLetterC
   2292  cd18		       7e		      .byte.b	#%01111110
   2293  cd19		       60		      .byte.b	#%01100000
   2294  cd1a		       60		      .byte.b	#%01100000
   2295  cd1b		       60		      .byte.b	#%01100000
   2296  cd1c		       60		      .byte.b	#%01100000
   2297  cd1d		       60		      .byte.b	#%01100000
   2298  cd1e		       60		      .byte.b	#%01100000
   2299  cd1f		       7e		      .byte.b	#%01111110
   2300  cd20				   RLetterD
   2301  cd20		       7e		      .byte.b	#%01111110
   2302  cd21		       66		      .byte.b	#%01100110
   2303  cd22		       62		      .byte.b	#%01100010
   2304  cd23		       62		      .byte.b	#%01100010
   2305  cd24		       62		      .byte.b	#%01100010
   2306  cd25		       62		      .byte.b	#%01100010
   2307  cd26		       66		      .byte.b	#%01100110
   2308  cd27		       7e		      .byte.b	#%01111110
   2309  cd28				   RLetterE
   2310  cd28		       7e		      .byte.b	#%01111110
   2311  cd29		       60		      .byte.b	#%01100000
   2312  cd2a		       60		      .byte.b	#%01100000
   2313  cd2b		       60		      .byte.b	#%01100000
   2314  cd2c		       78		      .byte.b	#%01111000
   2315  cd2d		       60		      .byte.b	#%01100000
   2316  cd2e		       60		      .byte.b	#%01100000
   2317  cd2f		       7e		      .byte.b	#%01111110
   2318  cd30				   RLetterF
   2319  cd30		       60		      .byte.b	#%01100000
   2320  cd31		       60		      .byte.b	#%01100000
   2321  cd32		       60		      .byte.b	#%01100000
   2322  cd33		       60		      .byte.b	#%01100000
   2323  cd34		       78		      .byte.b	#%01111000
   2324  cd35		       60		      .byte.b	#%01100000
   2325  cd36		       60		      .byte.b	#%01100000
   2326  cd37		       7e		      .byte.b	#%01111110
   2327  cd38				   RLetterG
   2328  cd38		       7e		      .byte.b	#%01111110
   2329  cd39		       62		      .byte.b	#%01100010
   2330  cd3a		       62		      .byte.b	#%01100010
   2331  cd3b		       62		      .byte.b	#%01100010
   2332  cd3c		       66		      .byte.b	#%01100110
   2333  cd3d		       60		      .byte.b	#%01100000
   2334  cd3e		       60		      .byte.b	#%01100000
   2335  cd3f		       7e		      .byte.b	#%01111110
   2336  cd40				   RLetterH
   2337  cd40		       62		      .byte.b	#%01100010
   2338  cd41		       62		      .byte.b	#%01100010
   2339  cd42		       62		      .byte.b	#%01100010
   2340  cd43		       62		      .byte.b	#%01100010
   2341  cd44		       7e		      .byte.b	#%01111110
   2342  cd45		       62		      .byte.b	#%01100010
   2343  cd46		       62		      .byte.b	#%01100010
   2344  cd47		       62		      .byte.b	#%01100010
   2345  cd48				   RLetterI
   2346  cd48		       7e		      .byte.b	#%01111110
   2347  cd49		       18		      .byte.b	#%00011000
   2348  cd4a		       18		      .byte.b	#%00011000
   2349  cd4b		       18		      .byte.b	#%00011000
   2350  cd4c		       18		      .byte.b	#%00011000
   2351  cd4d		       18		      .byte.b	#%00011000
   2352  cd4e		       18		      .byte.b	#%00011000
   2353  cd4f		       7e		      .byte.b	#%01111110
   2354  cd50				   RLetterJ
   2355  cd50		       78		      .byte.b	#%01111000
   2356  cd51		       78		      .byte.b	#%01111000
   2357  cd52		       18		      .byte.b	#%00011000
   2358  cd53		       18		      .byte.b	#%00011000
   2359  cd54		       18		      .byte.b	#%00011000
   2360  cd55		       18		      .byte.b	#%00011000
   2361  cd56		       18		      .byte.b	#%00011000
   2362  cd57		       7e		      .byte.b	#%01111110
   2363  cd58				   RLetterK
   2364  cd58		       62		      .byte.b	#%01100010
   2365  cd59		       64		      .byte.b	#%01100100
   2366  cd5a		       68		      .byte.b	#%01101000
   2367  cd5b		       70		      .byte.b	#%01110000
   2368  cd5c		       70		      .byte.b	#%01110000
   2369  cd5d		       68		      .byte.b	#%01101000
   2370  cd5e		       64		      .byte.b	#%01100100
   2371  cd5f		       62		      .byte.b	#%01100010
   2372  cd60				   RLetterL
   2373  cd60		       7e		      .byte.b	#%01111110
   2374  cd61		       60		      .byte.b	#%01100000
   2375  cd62		       60		      .byte.b	#%01100000
   2376  cd63		       60		      .byte.b	#%01100000
   2377  cd64		       60		      .byte.b	#%01100000
   2378  cd65		       60		      .byte.b	#%01100000
   2379  cd66		       60		      .byte.b	#%01100000
   2380  cd67		       60		      .byte.b	#%01100000
   2381  cd68				   RLetterM
   2382  cd68		       62		      .byte.b	#%01100010
   2383  cd69		       62		      .byte.b	#%01100010
   2384  cd6a		       62		      .byte.b	#%01100010
   2385  cd6b		       62		      .byte.b	#%01100010
   2386  cd6c		       62		      .byte.b	#%01100010
   2387  cd6d		       6a		      .byte.b	#%01101010
   2388  cd6e		       76		      .byte.b	#%01110110
   2389  cd6f		       62		      .byte.b	#%01100010
   2390  cd70				   RLetterN
   2391  cd70		       62		      .byte.b	#%01100010
   2392  cd71		       62		      .byte.b	#%01100010
   2393  cd72		       62		      .byte.b	#%01100010
   2394  cd73		       66		      .byte.b	#%01100110
   2395  cd74		       6a		      .byte.b	#%01101010
   2396  cd75		       72		      .byte.b	#%01110010
   2397  cd76		       62		      .byte.b	#%01100010
   2398  cd77		       62		      .byte.b	#%01100010
   2399  cd78				   RLetterO
   2400  cd78		       3c		      .byte.b	#%00111100
   2401  cd79		       76		      .byte.b	#%01110110
   2402  cd7a		       62		      .byte.b	#%01100010
   2403  cd7b		       62		      .byte.b	#%01100010
   2404  cd7c		       62		      .byte.b	#%01100010
   2405  cd7d		       62		      .byte.b	#%01100010
   2406  cd7e		       76		      .byte.b	#%01110110
   2407  cd7f		       3c		      .byte.b	#%00111100
   2408  cd80				   RLetterP
   2409  cd80		       60		      .byte.b	#%01100000
   2410  cd81		       60		      .byte.b	#%01100000
   2411  cd82		       60		      .byte.b	#%01100000
   2412  cd83		       7e		      .byte.b	#%01111110
   2413  cd84		       62		      .byte.b	#%01100010
   2414  cd85		       62		      .byte.b	#%01100010
   2415  cd86		       62		      .byte.b	#%01100010
   2416  cd87		       7e		      .byte.b	#%01111110
   2417  cd88				   RLetterQ
   2418  cd88		       3a		      .byte.b	#%00111010
   2419  cd89		       74		      .byte.b	#%01110100
   2420  cd8a		       6a		      .byte.b	#%01101010
   2421  cd8b		       62		      .byte.b	#%01100010
   2422  cd8c		       62		      .byte.b	#%01100010
   2423  cd8d		       62		      .byte.b	#%01100010
   2424  cd8e		       76		      .byte.b	#%01110110
   2425  cd8f		       3c		      .byte.b	#%00111100
   2426  cd90				   RLetterR
   2427  cd90		       62		      .byte.b	#%01100010
   2428  cd91		       62		      .byte.b	#%01100010
   2429  cd92		       64		      .byte.b	#%01100100
   2430  cd93		       64		      .byte.b	#%01100100
   2431  cd94		       7c		      .byte.b	#%01111100
   2432  cd95		       62		      .byte.b	#%01100010
   2433  cd96		       62		      .byte.b	#%01100010
   2434  cd97		       7c		      .byte.b	#%01111100
   2435  cd98				   RLetterS
   2436  cd98		       7e		      .byte.b	#%01111110
   2437  cd99		       62		      .byte.b	#%01100010
   2438  cd9a		       62		      .byte.b	#%01100010
   2439  cd9b		       02		      .byte.b	#%00000010
   2440  cd9c		       7e		      .byte.b	#%01111110
   2441  cd9d		       40		      .byte.b	#%01000000
   2442  cd9e		       46		      .byte.b	#%01000110
   2443  cd9f		       7e		      .byte.b	#%01111110
   2444  cda0				   RLetterT
   2445  cda0		       18		      .byte.b	#%00011000
   2446  cda1		       18		      .byte.b	#%00011000
   2447  cda2		       18		      .byte.b	#%00011000
   2448  cda3		       18		      .byte.b	#%00011000
   2449  cda4		       18		      .byte.b	#%00011000
   2450  cda5		       18		      .byte.b	#%00011000
   2451  cda6		       18		      .byte.b	#%00011000
   2452  cda7		       7e		      .byte.b	#%01111110
   2453  cda8				   RLetterU
   2454  cda8		       7e		      .byte.b	#%01111110
   2455  cda9		       76		      .byte.b	#%01110110
   2456  cdaa		       62		      .byte.b	#%01100010
   2457  cdab		       62		      .byte.b	#%01100010
   2458  cdac		       62		      .byte.b	#%01100010
   2459  cdad		       62		      .byte.b	#%01100010
   2460  cdae		       62		      .byte.b	#%01100010
   2461  cdaf		       62		      .byte.b	#%01100010
   2462  cdb0				   RLetterV
   2463  cdb0		       18		      .byte.b	#%00011000
   2464  cdb1		       3c		      .byte.b	#%00111100
   2465  cdb2		       24		      .byte.b	#%00100100
   2466  cdb3		       24		      .byte.b	#%00100100
   2467  cdb4		       24		      .byte.b	#%00100100
   2468  cdb5		       42		      .byte.b	#%01000010
   2469  cdb6		       42		      .byte.b	#%01000010
   2470  cdb7		       42		      .byte.b	#%01000010
   2471  cdb8				   RLetterW
   2472  cdb8		       62		      .byte.b	#%01100010
   2473  cdb9		       76		      .byte.b	#%01110110
   2474  cdba		       6a		      .byte.b	#%01101010
   2475  cdbb		       62		      .byte.b	#%01100010
   2476  cdbc		       62		      .byte.b	#%01100010
   2477  cdbd		       62		      .byte.b	#%01100010
   2478  cdbe		       62		      .byte.b	#%01100010
   2479  cdbf		       62		      .byte.b	#%01100010
   2480  cdc0				   RLetterX
   2481  cdc0		       42		      .byte.b	#%01000010
   2482  cdc1		       66		      .byte.b	#%01100110
   2483  cdc2		       3c		      .byte.b	#%00111100
   2484  cdc3		       18		      .byte.b	#%00011000
   2485  cdc4		       18		      .byte.b	#%00011000
   2486  cdc5		       3c		      .byte.b	#%00111100
   2487  cdc6		       66		      .byte.b	#%01100110
   2488  cdc7		       42		      .byte.b	#%01000010
   2489  cdc8				   RLetterY
   2490  cdc8		       18		      .byte.b	#%00011000
   2491  cdc9		       18		      .byte.b	#%00011000
   2492  cdca		       18		      .byte.b	#%00011000
   2493  cdcb		       18		      .byte.b	#%00011000
   2494  cdcc		       24		      .byte.b	#%00100100
   2495  cdcd		       24		      .byte.b	#%00100100
   2496  cdce		       42		      .byte.b	#%01000010
   2497  cdcf		       42		      .byte.b	#%01000010
   2498  cdd0				   RLetterZ
   2499  cdd0		       7e		      .byte.b	#%01111110
   2500  cdd1		       40		      .byte.b	#%01000000
   2501  cdd2		       20		      .byte.b	#%00100000
   2502  cdd3		       10		      .byte.b	#%00010000
   2503  cdd4		       08		      .byte.b	#%00001000
   2504  cdd5		       04		      .byte.b	#%00000100
   2505  cdd6		       02		      .byte.b	#%00000010
   2506  cdd7		       7e		      .byte.b	#%01111110
   2507  cdd8
   2508  ce00					      ORG	$CE00	;Used to hold maze rendering data
   2509  ce00					      RORG	$FE00
   2510  ce00
   2511  ce00				   RNearDoor		;Used for PF1
   2512  ce00		       00		      .byte.b	#%00000000
   2513  ce01		       00		      .byte.b	#%00000000
   2514  ce02		       00		      .byte.b	#%00000000
   2515  ce03		       00		      .byte.b	#%00000000
   2516  ce04		       80		      .byte.b	#%10000000
   2517  ce05		       80		      .byte.b	#%10000000
   2518  ce06		       80		      .byte.b	#%10000000
   2519  ce07		       80		      .byte.b	#%10000000
   2520  ce08		       80		      .byte.b	#%10000000
   2521  ce09		       80		      .byte.b	#%10000000
   2522  ce0a		       82		      .byte.b	#%10000010
   2523  ce0b		       83		      .byte.b	#%10000011
   2524  ce0c		       83		      .byte.b	#%10000011
   2525  ce0d		       83		      .byte.b	#%10000011
   2526  ce0e		       83		      .byte.b	#%10000011
   2527  ce0f		       83		      .byte.b	#%10000011
   2528  ce10		       83		      .byte.b	#%10000011
   2529  ce11		       83		      .byte.b	#%10000011
   2530  ce12		       83		      .byte.b	#%10000011
   2531  ce13		       83		      .byte.b	#%10000011
   2532  ce14		       83		      .byte.b	#%10000011
   2533  ce15		       83		      .byte.b	#%10000011
   2534  ce16		       83		      .byte.b	#%10000011
   2535  ce17		       83		      .byte.b	#%10000011
   2536  ce18		       83		      .byte.b	#%10000011
   2537  ce19		       83		      .byte.b	#%10000011
   2538  ce1a		       83		      .byte.b	#%10000011
   2539  ce1b		       83		      .byte.b	#%10000011
   2540  ce1c		       82		      .byte.b	#%10000010
   2541  ce1d		       80		      .byte.b	#%10000000
   2542  ce1e		       80		      .byte.b	#%10000000
   2543  ce1f		       80		      .byte.b	#%10000000
   2544  ce20		       80		      .byte.b	#%10000000
   2545  ce21		       80		      .byte.b	#%10000000
   2546  ce22		       80		      .byte.b	#%10000000
   2547  ce23		       00		      .byte.b	#%00000000
   2548  ce24		       00		      .byte.b	#%00000000
   2549  ce25		       00		      .byte.b	#%00000000
   2550  ce26		       00		      .byte.b	#%00000000
   2551  ce27
   2552  ce27				   RNoNearDoor		;Used for PF1
   2553  ce27		       00		      .byte.b	#%00000000
   2554  ce28		       00		      .byte.b	#%00000000
   2555  ce29		       00		      .byte.b	#%00000000
   2556  ce2a		       00		      .byte.b	#%00000000
   2557  ce2b		       80		      .byte.b	#%10000000
   2558  ce2c		       c0		      .byte.b	#%11000000
   2559  ce2d		       e0		      .byte.b	#%11100000
   2560  ce2e		       f0		      .byte.b	#%11110000
   2561  ce2f		       f8		      .byte.b	#%11111000
   2562  ce30		       fc		      .byte.b	#%11111100
   2563  ce31		       fe		      .byte.b	#%11111110
   2564  ce32		       ff		      .byte.b	#%11111111
   2565  ce33		       ff		      .byte.b	#%11111111
   2566  ce34		       ff		      .byte.b	#%11111111
   2567  ce35		       ff		      .byte.b	#%11111111
   2568  ce36		       ff		      .byte.b	#%11111111
   2569  ce37		       ff		      .byte.b	#%11111111
   2570  ce38		       ff		      .byte.b	#%11111111
   2571  ce39		       ff		      .byte.b	#%11111111
   2572  ce3a		       ff		      .byte.b	#%11111111
   2573  ce3b		       ff		      .byte.b	#%11111111
   2574  ce3c		       ff		      .byte.b	#%11111111
   2575  ce3d		       ff		      .byte.b	#%11111111
   2576  ce3e		       ff		      .byte.b	#%11111111
   2577  ce3f		       ff		      .byte.b	#%11111111
   2578  ce40		       ff		      .byte.b	#%11111111
   2579  ce41		       ff		      .byte.b	#%11111111
   2580  ce42		       ff		      .byte.b	#%11111111
   2581  ce43		       fe		      .byte.b	#%11111110
   2582  ce44		       fc		      .byte.b	#%11111100
   2583  ce45		       f8		      .byte.b	#%11111000
   2584  ce46		       f0		      .byte.b	#%11110000
   2585  ce47		       e0		      .byte.b	#%11100000
   2586  ce48		       c0		      .byte.b	#%11000000
   2587  ce49		       80		      .byte.b	#%10000000
   2588  ce4a		       00		      .byte.b	#%00000000
   2589  ce4b		       00		      .byte.b	#%00000000
   2590  ce4c		       00		      .byte.b	#%00000000
   2591  ce4d		       00		      .byte.b	#%00000000
   2592  ce4e
   2593  ce4e				   RFarDoorOnlyTwo		;Used for PF2
   2594  ce4e		       00		      .byte.b	#%00000000
   2595  ce4f		       00		      .byte.b	#%00000000
   2596  ce50		       00		      .byte.b	#%00000000
   2597  ce51		       00		      .byte.b	#%00000000
   2598  ce52		       00		      .byte.b	#%00000000
   2599  ce53		       00		      .byte.b	#%00000000
   2600  ce54		       00		      .byte.b	#%00000000
   2601  ce55		       00		      .byte.b	#%00000000
   2602  ce56		       00		      .byte.b	#%00000000
   2603  ce57		       00		      .byte.b	#%00000000
   2604  ce58		       00		      .byte.b	#%00000000
   2605  ce59		       00		      .byte.b	#%00000000
   2606  ce5a		       01		      .byte.b	#%00000001
   2607  ce5b		       03		      .byte.b	#%00000011
   2608  ce5c		       03		      .byte.b	#%00000011
   2609  ce5d		       03		      .byte.b	#%00000011
   2610  ce5e		       13		      .byte.b	#%00010011
   2611  ce5f		       f3		      .byte.b	#%11110011
   2612  ce60		       f3		      .byte.b	#%11110011
   2613  ce61		       f3		      .byte.b	#%11110011
   2614  ce62		       f3		      .byte.b	#%11110011
   2615  ce63		       f3		      .byte.b	#%11110011
   2616  ce64		       13		      .byte.b	#%00010011
   2617  ce65		       03		      .byte.b	#%00000011
   2618  ce66		       03		      .byte.b	#%00000011
   2619  ce67		       03		      .byte.b	#%00000011
   2620  ce68		       01		      .byte.b	#%00000001
   2621  ce69		       00		      .byte.b	#%00000000
   2622  ce6a		       00		      .byte.b	#%00000000
   2623  ce6b		       00		      .byte.b	#%00000000
   2624  ce6c		       00		      .byte.b	#%00000000
   2625  ce6d		       00		      .byte.b	#%00000000
   2626  ce6e		       00		      .byte.b	#%00000000
   2627  ce6f		       00		      .byte.b	#%00000000
   2628  ce70		       00		      .byte.b	#%00000000
   2629  ce71		       00		      .byte.b	#%00000000
   2630  ce72		       00		      .byte.b	#%00000000
   2631  ce73		       00		      .byte.b	#%00000000
   2632  ce74		       00		      .byte.b	#%00000000
   2633  ce75
   2634  ce75				   RNoFarDoorOnlyTwo		;Used for PF2
   2635  ce75		       00		      .byte.b	#%00000000
   2636  ce76		       00		      .byte.b	#%00000000
   2637  ce77		       00		      .byte.b	#%00000000
   2638  ce78		       00		      .byte.b	#%00000000
   2639  ce79		       00		      .byte.b	#%00000000
   2640  ce7a		       00		      .byte.b	#%00000000
   2641  ce7b		       00		      .byte.b	#%00000000
   2642  ce7c		       00		      .byte.b	#%00000000
   2643  ce7d		       00		      .byte.b	#%00000000
   2644  ce7e		       00		      .byte.b	#%00000000
   2645  ce7f		       00		      .byte.b	#%00000000
   2646  ce80		       00		      .byte.b	#%00000000
   2647  ce81		       01		      .byte.b	#%00000001
   2648  ce82		       03		      .byte.b	#%00000011
   2649  ce83		       07		      .byte.b	#%00000111
   2650  ce84		       0f		      .byte.b	#%00001111
   2651  ce85		       1f		      .byte.b	#%00011111
   2652  ce86		       ff		      .byte.b	#%11111111
   2653  ce87		       ff		      .byte.b	#%11111111
   2654  ce88		       ff		      .byte.b	#%11111111
   2655  ce89		       ff		      .byte.b	#%11111111
   2656  ce8a		       ff		      .byte.b	#%11111111
   2657  ce8b		       1f		      .byte.b	#%00011111
   2658  ce8c		       0f		      .byte.b	#%00001111
   2659  ce8d		       07		      .byte.b	#%00000111
   2660  ce8e		       03		      .byte.b	#%00000011
   2661  ce8f		       01		      .byte.b	#%00000001
   2662  ce90		       00		      .byte.b	#%00000000
   2663  ce91		       00		      .byte.b	#%00000000
   2664  ce92		       00		      .byte.b	#%00000000
   2665  ce93		       00		      .byte.b	#%00000000
   2666  ce94		       00		      .byte.b	#%00000000
   2667  ce95		       00		      .byte.b	#%00000000
   2668  ce96		       00		      .byte.b	#%00000000
   2669  ce97		       00		      .byte.b	#%00000000
   2670  ce98		       00		      .byte.b	#%00000000
   2671  ce99		       00		      .byte.b	#%00000000
   2672  ce9a		       00		      .byte.b	#%00000000
   2673  ce9b		       00		      .byte.b	#%00000000
   2674  ce9c
   2675  ce9c				   RFarDoor		;Used for PF2
   2676  ce9c		       00		      .byte.b	#%00000000
   2677  ce9d		       00		      .byte.b	#%00000000
   2678  ce9e		       00		      .byte.b	#%00000000
   2679  ce9f		       00		      .byte.b	#%00000000
   2680  cea0		       00		      .byte.b	#%00000000
   2681  cea1		       00		      .byte.b	#%00000000
   2682  cea2		       00		      .byte.b	#%00000000
   2683  cea3		       00		      .byte.b	#%00000000
   2684  cea4		       00		      .byte.b	#%00000000
   2685  cea5		       00		      .byte.b	#%00000000
   2686  cea6		       00		      .byte.b	#%00000000
   2687  cea7		       00		      .byte.b	#%00000000
   2688  cea8		       01		      .byte.b	#%00000001
   2689  cea9		       03		      .byte.b	#%00000011
   2690  ceaa		       03		      .byte.b	#%00000011
   2691  ceab		       03		      .byte.b	#%00000011
   2692  ceac		       13		      .byte.b	#%00010011
   2693  cead		       33		      .byte.b	#%00110011
   2694  ceae		       73		      .byte.b	#%01110011
   2695  ceaf		       73		      .byte.b	#%01110011
   2696  ceb0		       73		      .byte.b	#%01110011
   2697  ceb1		       33		      .byte.b	#%00110011
   2698  ceb2		       13		      .byte.b	#%00010011
   2699  ceb3		       03		      .byte.b	#%00000011
   2700  ceb4		       03		      .byte.b	#%00000011
   2701  ceb5		       03		      .byte.b	#%00000011
   2702  ceb6		       01		      .byte.b	#%00000001
   2703  ceb7		       00		      .byte.b	#%00000000
   2704  ceb8		       00		      .byte.b	#%00000000
   2705  ceb9		       00		      .byte.b	#%00000000
   2706  ceba		       00		      .byte.b	#%00000000
   2707  cebb		       00		      .byte.b	#%00000000
   2708  cebc		       00		      .byte.b	#%00000000
   2709  cebd		       00		      .byte.b	#%00000000
   2710  cebe		       00		      .byte.b	#%00000000
   2711  cebf		       00		      .byte.b	#%00000000
   2712  cec0		       00		      .byte.b	#%00000000
   2713  cec1		       00		      .byte.b	#%00000000
   2714  cec2		       00		      .byte.b	#%00000000
   2715  cec3
   2716  cec3				   RNoFarDoor		;Used for PF2
   2717  cec3		       00		      .byte.b	#%00000000
   2718  cec4		       00		      .byte.b	#%00000000
   2719  cec5		       00		      .byte.b	#%00000000
   2720  cec6		       00		      .byte.b	#%00000000
   2721  cec7		       00		      .byte.b	#%00000000
   2722  cec8		       00		      .byte.b	#%00000000
   2723  cec9		       00		      .byte.b	#%00000000
   2724  ceca		       00		      .byte.b	#%00000000
   2725  cecb		       00		      .byte.b	#%00000000
   2726  cecc		       00		      .byte.b	#%00000000
   2727  cecd		       00		      .byte.b	#%00000000
   2728  cece		       00		      .byte.b	#%00000000
   2729  cecf		       01		      .byte.b	#%00000001
   2730  ced0		       03		      .byte.b	#%00000011
   2731  ced1		       07		      .byte.b	#%00000111
   2732  ced2		       0f		      .byte.b	#%00001111
   2733  ced3		       1f		      .byte.b	#%00011111
   2734  ced4		       3f		      .byte.b	#%00111111
   2735  ced5		       7f		      .byte.b	#%01111111
   2736  ced6		       7f		      .byte.b	#%01111111
   2737  ced7		       7f		      .byte.b	#%01111111
   2738  ced8		       3f		      .byte.b	#%00111111
   2739  ced9		       1f		      .byte.b	#%00011111
   2740  ceda		       0f		      .byte.b	#%00001111
   2741  cedb		       07		      .byte.b	#%00000111
   2742  cedc		       03		      .byte.b	#%00000011
   2743  cedd		       01		      .byte.b	#%00000001
   2744  cede		       00		      .byte.b	#%00000000
   2745  cedf		       00		      .byte.b	#%00000000
   2746  cee0		       00		      .byte.b	#%00000000
   2747  cee1		       00		      .byte.b	#%00000000
   2748  cee2		       00		      .byte.b	#%00000000
   2749  cee3		       00		      .byte.b	#%00000000
   2750  cee4		       00		      .byte.b	#%00000000
   2751  cee5		       00		      .byte.b	#%00000000
   2752  cee6		       00		      .byte.b	#%00000000
   2753  cee7		       00		      .byte.b	#%00000000
   2754  cee8		       00		      .byte.b	#%00000000
   2755  cee9		       00		      .byte.b	#%00000000
   2756  ceea
   2757  cf00					      ORG	$CF00	;Used to hold additional maze rendering data
   2758  cf00					      RORG	$FF00
   2759  cf00
   2760  cf00				   ROutermost		;Used for PF0
   2761  cf00		       10		      .byte.b	#%00010000
   2762  cf01		       30		      .byte.b	#%00110000
   2763  cf02		       70		      .byte.b	#%01110000
   2764  cf03		       f0		      .byte.b	#%11110000
   2765  cf04		       f0		      .byte.b	#%11110000
   2766  cf05		       f0		      .byte.b	#%11110000
   2767  cf06		       f0		      .byte.b	#%11110000
   2768  cf07		       f0		      .byte.b	#%11110000
   2769  cf08		       f0		      .byte.b	#%11110000
   2770  cf09		       f0		      .byte.b	#%11110000
   2771  cf0a		       f0		      .byte.b	#%11110000
   2772  cf0b		       f0		      .byte.b	#%11110000
   2773  cf0c		       f0		      .byte.b	#%11110000
   2774  cf0d		       f0		      .byte.b	#%11110000
   2775  cf0e		       f0		      .byte.b	#%11110000
   2776  cf0f		       f0		      .byte.b	#%11110000
   2777  cf10		       f0		      .byte.b	#%11110000
   2778  cf11		       f0		      .byte.b	#%11110000
   2779  cf12		       f0		      .byte.b	#%11110000
   2780  cf13		       f0		      .byte.b	#%11110000
   2781  cf14		       f0		      .byte.b	#%11110000
   2782  cf15		       f0		      .byte.b	#%11110000
   2783  cf16		       f0		      .byte.b	#%11110000
   2784  cf17		       f0		      .byte.b	#%11110000
   2785  cf18		       f0		      .byte.b	#%11110000
   2786  cf19		       f0		      .byte.b	#%11110000
   2787  cf1a		       f0		      .byte.b	#%11110000
   2788  cf1b		       f0		      .byte.b	#%11110000
   2789  cf1c		       f0		      .byte.b	#%11110000
   2790  cf1d		       f0		      .byte.b	#%11110000
   2791  cf1e		       f0		      .byte.b	#%11110000
   2792  cf1f		       f0		      .byte.b	#%11110000
   2793  cf20		       f0		      .byte.b	#%11110000
   2794  cf21		       f0		      .byte.b	#%11110000
   2795  cf22		       f0		      .byte.b	#%11110000
   2796  cf23		       f0		      .byte.b	#%11110000
   2797  cf24		       70		      .byte.b	#%01110000
   2798  cf25		       30		      .byte.b	#%00110000
   2799  cf26		       10		      .byte.b	#%00010000
   2800  cf27
   2801  cf27				   RDeadEnd1		;Used for PF1
   2802  cf27		       00		      .byte.b	#%00000000
   2803  cf28		       00		      .byte.b	#%00000000
   2804  cf29		       00		      .byte.b	#%00000000
   2805  cf2a		       ff		      .byte.b	#%11111111
   2806  cf2b		       ff		      .byte.b	#%11111111
   2807  cf2c		       ff		      .byte.b	#%11111111
   2808  cf2d		       ff		      .byte.b	#%11111111
   2809  cf2e		       ff		      .byte.b	#%11111111
   2810  cf2f		       ff		      .byte.b	#%11111111
   2811  cf30		       ff		      .byte.b	#%11111111
   2812  cf31		       ff		      .byte.b	#%11111111
   2813  cf32		       ff		      .byte.b	#%11111111
   2814  cf33		       ff		      .byte.b	#%11111111
   2815  cf34		       ff		      .byte.b	#%11111111
   2816  cf35		       ff		      .byte.b	#%11111111
   2817  cf36		       ff		      .byte.b	#%11111111
   2818  cf37		       ff		      .byte.b	#%11111111
   2819  cf38		       ff		      .byte.b	#%11111111
   2820  cf39		       ff		      .byte.b	#%11111111
   2821  cf3a		       ff		      .byte.b	#%11111111
   2822  cf3b		       ff		      .byte.b	#%11111111
   2823  cf3c		       ff		      .byte.b	#%11111111
   2824  cf3d		       ff		      .byte.b	#%11111111
   2825  cf3e		       ff		      .byte.b	#%11111111
   2826  cf3f		       ff		      .byte.b	#%11111111
   2827  cf40		       ff		      .byte.b	#%11111111
   2828  cf41		       ff		      .byte.b	#%11111111
   2829  cf42		       ff		      .byte.b	#%11111111
   2830  cf43		       ff		      .byte.b	#%11111111
   2831  cf44		       ff		      .byte.b	#%11111111
   2832  cf45		       ff		      .byte.b	#%11111111
   2833  cf46		       ff		      .byte.b	#%11111111
   2834  cf47		       ff		      .byte.b	#%11111111
   2835  cf48		       ff		      .byte.b	#%11111111
   2836  cf49		       ff		      .byte.b	#%11111111
   2837  cf4a		       ff		      .byte.b	#%11111111
   2838  cf4b		       00		      .byte.b	#%00000000
   2839  cf4c		       00		      .byte.b	#%00000000
   2840  cf4d		       00		      .byte.b	#%00000000
   2841  cf4e
   2842  cf4e				   RDeadEnd2		;Used for PF2
   2843  cf4e		       00		      .byte.b	#%00000000
   2844  cf4f		       00		      .byte.b	#%00000000
   2845  cf50		       00		      .byte.b	#%00000000
   2846  cf51		       ff		      .byte.b	#%11111111
   2847  cf52		       ff		      .byte.b	#%11111111
   2848  cf53		       ff		      .byte.b	#%11111111
   2849  cf54		       ff		      .byte.b	#%11111111
   2850  cf55		       ff		      .byte.b	#%11111111
   2851  cf56		       ff		      .byte.b	#%11111111
   2852  cf57		       ff		      .byte.b	#%11111111
   2853  cf58		       ff		      .byte.b	#%11111111
   2854  cf59		       ff		      .byte.b	#%11111111
   2855  cf5a		       ff		      .byte.b	#%11111111
   2856  cf5b		       ff		      .byte.b	#%11111111
   2857  cf5c		       ff		      .byte.b	#%11111111
   2858  cf5d		       ff		      .byte.b	#%11111111
   2859  cf5e		       ff		      .byte.b	#%11111111
   2860  cf5f		       ff		      .byte.b	#%11111111
   2861  cf60		       ff		      .byte.b	#%11111111
   2862  cf61		       ff		      .byte.b	#%11111111
   2863  cf62		       ff		      .byte.b	#%11111111
   2864  cf63		       ff		      .byte.b	#%11111111
   2865  cf64		       ff		      .byte.b	#%11111111
   2866  cf65		       ff		      .byte.b	#%11111111
   2867  cf66		       ff		      .byte.b	#%11111111
   2868  cf67		       ff		      .byte.b	#%11111111
   2869  cf68		       ff		      .byte.b	#%11111111
   2870  cf69		       ff		      .byte.b	#%11111111
   2871  cf6a		       ff		      .byte.b	#%11111111
   2872  cf6b		       ff		      .byte.b	#%11111111
   2873  cf6c		       ff		      .byte.b	#%11111111
   2874  cf6d		       ff		      .byte.b	#%11111111
   2875  cf6e		       ff		      .byte.b	#%11111111
   2876  cf6f		       ff		      .byte.b	#%11111111
   2877  cf70		       ff		      .byte.b	#%11111111
   2878  cf71		       ff		      .byte.b	#%11111111
   2879  cf72		       00		      .byte.b	#%00000000
   2880  cf73		       00		      .byte.b	#%00000000
   2881  cf74		       00		      .byte.b	#%00000000
   2882  cf75
   2883  cf75				   ROnly1Room		;Used for PF2
   2884  cf75		       00		      .byte.b	#%00000000
   2885  cf76		       00		      .byte.b	#%00000000
   2886  cf77		       00		      .byte.b	#%00000000
   2887  cf78		       00		      .byte.b	#%00000000
   2888  cf79		       00		      .byte.b	#%00000000
   2889  cf7a		       00		      .byte.b	#%00000000
   2890  cf7b		       00		      .byte.b	#%00000000
   2891  cf7c		       00		      .byte.b	#%00000000
   2892  cf7d		       00		      .byte.b	#%00000000
   2893  cf7e		       00		      .byte.b	#%00000000
   2894  cf7f		       00		      .byte.b	#%00000000
   2895  cf80		       00		      .byte.b	#%00000000
   2896  cf81		       ff		      .byte.b	#%11111111
   2897  cf82		       ff		      .byte.b	#%11111111
   2898  cf83		       ff		      .byte.b	#%11111111
   2899  cf84		       ff		      .byte.b	#%11111111
   2900  cf85		       ff		      .byte.b	#%11111111
   2901  cf86		       ff		      .byte.b	#%11111111
   2902  cf87		       ff		      .byte.b	#%11111111
   2903  cf88		       ff		      .byte.b	#%11111111
   2904  cf89		       ff		      .byte.b	#%11111111
   2905  cf8a		       ff		      .byte.b	#%11111111
   2906  cf8b		       ff		      .byte.b	#%11111111
   2907  cf8c		       ff		      .byte.b	#%11111111
   2908  cf8d		       ff		      .byte.b	#%11111111
   2909  cf8e		       ff		      .byte.b	#%11111111
   2910  cf8f		       ff		      .byte.b	#%11111111
   2911  cf90		       00		      .byte.b	#%00000000
   2912  cf91		       00		      .byte.b	#%00000000
   2913  cf92		       00		      .byte.b	#%00000000
   2914  cf93		       00		      .byte.b	#%00000000
   2915  cf94		       00		      .byte.b	#%00000000
   2916  cf95		       00		      .byte.b	#%00000000
   2917  cf96		       00		      .byte.b	#%00000000
   2918  cf97		       00		      .byte.b	#%00000000
   2919  cf98		       00		      .byte.b	#%00000000
   2920  cf99		       00		      .byte.b	#%00000000
   2921  cf9a		       00		      .byte.b	#%00000000
   2922  cf9b		       00		      .byte.b	#%00000000
   2923  cf9c
   2924  cfc0					      ORG	$CFC0
   2925  cfc0					      RORG	$FFC0
   2926  cfc0
   2927  cfc0				   RCatchFromEnemyDrawing
   2928  cfc0		       ea		      nop
   2929  cfc1		       ea		      nop
   2930  cfc2		       ea		      nop
   2931  cfc3		       4c 07 f1 	      jmp	RPlaceBattleText
   2932  cfc6				   RGoToEnemyDrawingBank
   2933  cfc6		       8d f8 1f 	      sta	$1FF8	;Go to bank 2
   2934  cfc9		       ea		      nop
   2935  cfca		       ea		      nop
   2936  cfcb		       ea		      nop
   2937  cfcc
   2938  cfe0					      ORG	$CFE0
   2939  cfe0					      RORG	$FFE0
   2940  cfe0
   2941  cfe0				   RCatchFromVBlank
   2942  cfe0		       ea		      nop
   2943  cfe1		       ea		      nop
   2944  cfe2		       ea		      nop
   2945  cfe3		       4c 03 f0 	      jmp	RMainPicture
   2946  cfe6				   RGoToOverscan
   2947  cfe6		       8d f7 1f 	      sta	$1FF7	;Go to bank 1
   2948  cfe9		       ea		      nop
   2949  cfea		       ea		      nop
   2950  cfeb		       ea		      nop
   2951  cfec
   2952  cffa					      ORG	$CFFA
   2953  cffa					      RORG	$FFFA
   2954  cffa
   2955  cffa							;NMI, IRQ, and RESET information
   2956  cffa		       00 f0		      .word.w	RReset
   2957  cffc		       00 f0		      .word.w	RReset
   2958  cffe		       00 f0		      .word.w	RReset
   2959  d000
   2960  d000					      ORG	$D000
   2961  d000					      RORG	$F000
   2962  d000
   2963  d000							;BANK 1 - CONTAINS THE MAJORITY OF THE MAZE/BATTLE SYSTEM LOGIC
   2964  d000
   2965  d000				   LReset
   2966  d000		       0c f7 1f 	      nop	$1FF7	;Make sure to stay in bank 1
   2967  d003		       a2 00		      ldx	#0
   2968  d005		       8a		      txa
   2969  d006		       a8		      tay
   2970  d007				   LClear
   2971  d007		       ca		      dex
   2972  d008		       9a		      txs
   2973  d009		       48		      pha
   2974  d00a		       d0 fb		      bne	LClear
   2975  d00c		       d8		      cld
   2976  d00d
   2977  d00d		       a9 15		      lda	#21
   2978  d00f		       85 0a		      sta	CTRLPF	;Sets the playfield to reflect, and makes the ball 4 clocks wide
   2979  d011
   2980  d011		       a9 00		      lda	#0
   2981  d013		       8d 81 02 	      sta	SWACNT
   2982  d016		       85 a2		      sta	playerX
   2983  d018		       85 a3		      sta	playerY
   2984  d01a		       85 a4		      sta	playerFacing
   2985  d01c
   2986  d01c		       ad 84 02 	      lda	INTIM	;Seed the random number generator
   2987  d01f		       d0 02		      bne	LSkipSeeding
   2988  d021		       a9 6b		      lda	#$6B	;Extremely random random number generator here
   2989  d023				   LSkipSeeding
   2990  d023		       85 b7		      sta	rand8
   2991  d025
   2992  d025		       a9 09		      lda	#$09	;Maze level 0, party level 9
   2993  d027		       85 f2		      sta	mazeAndPartyLevel
   2994  d029
   2995  d029		       a0 03		      ldy	#3	; Subroutine ID for SClearMazeData
   2996  d02b		       20 b0 ff 	      jsr	LRunFunctionInSBank
   2997  d02e
   2998  d02e		       a0 00		      ldy	#0	; Subroutine ID for SGenerateMazeData
   2999  d030		       20 b0 ff 	      jsr	LRunFunctionInSBank
   3000  d033
   3001  d033							;Temp testing code that will be removed much, much later
   3002  d033		       a9 33		      lda	#$33
   3003  d035		       85 81		      sta	char1
   3004  d037		       a9 06		      lda	#F
   3005  d039		       85 85		      sta	name1
   3006  d03b		       a9 12		      lda	#R
   3007  d03d		       85 89		      sta	name2
   3008  d03f		       a9 05		      lda	#E
   3009  d041		       85 8d		      sta	name3
   3010  d043		       a9 04		      lda	#D
   3011  d045		       85 91		      sta	name4
   3012  d047		       a9 00		      lda	#EMPTY
   3013  d049		       85 95		      sta	name5
   3014  d04b		       a9 58		      lda	#$58
   3015  d04d		       85 99		      sta	hp1
   3016  d04f		       a9 23		      lda	#$23
   3017  d051		       85 9d		      sta	mp1
   3018  d053
   3019  d053		       a9 35		      lda	#$35
   3020  d055		       85 82		      sta	char2
   3021  d057		       a9 04		      lda	#D
   3022  d059		       85 86		      sta	name1+1
   3023  d05b		       a9 01		      lda	#A
   3024  d05d		       85 8a		      sta	name2+1
   3025  d05f		       a9 16		      lda	#V
   3026  d061		       85 8e		      sta	name3+1
   3027  d063		       a9 05		      lda	#E
   3028  d065		       85 92		      sta	name4+1
   3029  d067		       a9 00		      lda	#EMPTY
   3030  d069		       85 96		      sta	name5+1
   3031  d06b		       a9 17		      lda	#$17
   3032  d06d		       85 9a		      sta	hp2
   3033  d06f		       a9 17		      lda	#$17
   3034  d071		       85 9e		      sta	mp2
   3035  d073
   3036  d073		       a9 32		      lda	#$32
   3037  d075		       85 83		      sta	char3
   3038  d077		       a9 14		      lda	#T
   3039  d079		       85 87		      sta	name1+2
   3040  d07b		       a9 09		      lda	#I
   3041  d07d		       85 8b		      sta	name2+2
   3042  d07f		       a9 0d		      lda	#M
   3043  d081		       85 8f		      sta	name3+2
   3044  d083		       a9 00		      lda	#EMPTY
   3045  d085		       85 93		      sta	name4+2
   3046  d087		       85 97		      sta	name5+2
   3047  d089		       a9 45		      lda	#$45
   3048  d08b		       85 9b		      sta	hp3
   3049  d08d		       a9 00		      lda	#$00
   3050  d08f		       85 9f		      sta	mp3
   3051  d091
   3052  d091		       a9 34		      lda	#$34
   3053  d093		       85 84		      sta	char4
   3054  d095		       a9 0a		      lda	#J
   3055  d097		       85 88		      sta	name1+3
   3056  d099		       a9 0f		      lda	#O
   3057  d09b		       85 8c		      sta	name2+3
   3058  d09d		       a9 08		      lda	#H
   3059  d09f		       85 90		      sta	name3+3
   3060  d0a1		       a9 0e		      lda	#N
   3061  d0a3		       85 94		      sta	name4+3
   3062  d0a5		       a9 00		      lda	#EMPTY
   3063  d0a7		       85 98		      sta	name5+3
   3064  d0a9		       a9 10		      lda	#$10
   3065  d0ab		       85 9c		      sta	hp4
   3066  d0ad		       a9 00		      lda	#$00
   3067  d0af		       85 a0		      sta	mp4
   3068  d0b1
   3069  d0b1		       20 71 f4 	      jsr	LUpdateAvatars
   3070  d0b4
   3071  d0b4		       a9 80		      lda	#$80
   3072  d0b6		       85 bf		      sta	inBattle
   3073  d0b8		       a9 ff		      lda	#$FF
   3074  d0ba		       85 e7		      sta	hasAction
   3075  d0bc							;lda #$80
   3076  d0bc							;sta currentMenu
   3077  d0bc							;lda #$03
   3078  d0bc							;sta menuSize
   3079  d0bc		       a9 01		      lda	#1
   3080  d0be		       85 d6		      sta	enemyHP
   3081  d0c0		       85 d7		      sta	enemyHP+1
   3082  d0c2		       85 d8		      sta	enemyHP+2
   3083  d0c4		       85 d9		      sta	enemyHP+3
   3084  d0c6
   3085  d0c6				   LStartOfFrame
   3086  d0c6		       a9 82		      lda	#$82
   3087  d0c8		       85 01		      sta	VBLANK	;Enable blanking
   3088  d0ca		       85 00		      sta	VSYNC	;Enable syncing signal
   3089  d0cc		       85 02		      sta	WSYNC	;Requisite 3 scanlines of VSYNC
   3090  d0ce		       85 02		      sta	WSYNC
   3091  d0d0		       85 02		      sta	WSYNC
   3092  d0d2		       a9 00		      lda	#0
   3093  d0d4		       85 00		      sta	VSYNC	;Stop broadcasting VSYNC signal
   3094  d0d6
   3095  d0d6
   3096  d0d6		       20 09 f4 	      jsr	LRandom	;Tick the random number generator
   3097  d0d9
   3098  d0d9		       a9 01		      lda	#1
   3099  d0db		       2c 82 02 	      bit	SWCHB
   3100  d0de		       f0 16		      beq	LGoToReset	;Reset the game if the console reset switch is pressed
   3101  d0e0
   3102  d0e0		       a9 2c		      lda	#VBLANK_TIMER_DURATION
   3103  d0e2		       8d 96 02 	      sta	TIM64T	;Set timer to complete at the end of VBLANK.
   3104  d0e5
   3105  d0e5		       a5 bf		      lda	inBattle
   3106  d0e7		       d0 34		      bne	LWaitForVblankTimer	;Skip this logic if we are not in maze mode...
   3107  d0e9
   3108  d0e9		       a0 02		      ldy	#2	; Subroutine ID for SUpdatePlayerMovement
   3109  d0eb		       20 b0 ff 	      jsr	LRunFunctionInSBank
   3110  d0ee
   3111  d0ee		       a0 01		      ldy	#1	; Subroutine ID for SUpdateMazeRenderingPointers
   3112  d0f0		       20 b0 ff 	      jsr	LRunFunctionInSBank
   3113  d0f3
   3114  d0f3		       4c f9 f0 	      jmp	LUpdateCompassPointer
   3115  d0f6
   3116  d0f6
   3117  d0f6				   LGoToReset
   3118  d0f6		       4c 00 f0 	      jmp	LReset
   3119  d0f9
   3120  d0f9				   LUpdateCompassPointer
   3121  d0f9		       a4 a4		      ldy	playerFacing
   3122  d0fb		       f0 15		      beq	LCompassEast
   3123  d0fd		       88		      dey
   3124  d0fe		       f0 08		      beq	LCompassSouth
   3125  d100		       88		      dey
   3126  d101		       f0 0a		      beq	LCompassWest
   3127  d103				   LCompassNorth
   3128  d103		       a9 70		      lda	#(RLetterN & $FF)
   3129  d105		       4c 14 f1 	      jmp	LStoreCompassPointer
   3130  d108				   LCompassSouth
   3131  d108		       a9 98		      lda	#(RLetterS & $FF)
   3132  d10a		       4c 14 f1 	      jmp	LStoreCompassPointer
   3133  d10d				   LCompassWest
   3134  d10d		       a9 b8		      lda	#(RLetterW & $FF)
   3135  d10f		       4c 14 f1 	      jmp	LStoreCompassPointer
   3136  d112				   LCompassEast
   3137  d112		       a9 28		      lda	#(RLetterE & $FF)
   3138  d114
   3139  d114				   LStoreCompassPointer
   3140  d114		       85 b1		      sta	tempPointer1
   3141  d116
   3142  d116		       a9 fd		      lda	#(RLetterN >> 8 & $FF)
   3143  d118		       85 b2		      sta	tempPointer1+1
   3144  d11a
   3145  d11a		       4c d0 ff 	      jmp	LGoToUpdateEffects
   3146  d11d
   3147  d11d				   LAfterEffectUpdate
   3148  d11d				   LWaitForVblankTimer
   3149  d11d		       ad 84 02 	      lda	INTIM
   3150  d120		       d0 fb		      bne	LWaitForVblankTimer	;Is VBLANK over yet?
   3151  d122		       85 02		      sta	WSYNC
   3152  d124
   3153  d124		       4c e0 ff 	      jmp	LGoToMainPicture
   3154  d127
   3155  d127				   LOverscan
   3156  d127		       a9 24		      lda	#OVERSCAN_TIMER_DURATION
   3157  d129		       8d 96 02 	      sta	TIM64T
   3158  d12c
   3159  d12c		       a5 bf		      lda	inBattle
   3160  d12e		       f0 62		      beq	LMazeLogic	;Skip the following logic if we are in maze mode...
   3161  d130
   3162  d130				   LBattleLogic
   3163  d130		       ad 80 02 	      lda	SWCHA
   3164  d133		       29 f0		      and	#$F0
   3165  d135		       85 a8		      sta	temp1
   3166  d137		       a5 0c		      lda	INPT4
   3167  d139		       29 80		      and	#$80
   3168  d13b		       4a		      lsr
   3169  d13c		       4a		      lsr
   3170  d13d		       4a		      lsr
   3171  d13e		       4a		      lsr
   3172  d13f		       05 a8		      ora	temp1
   3173  d141		       85 a8		      sta	temp1
   3174  d143		       a5 b9		      lda	currentMenu
   3175  d145		       10 28		      bpl	LNotInMenu
   3176  d147				   LInMenu
   3177  d147		       a5 a8		      lda	temp1
   3178  d149		       45 a7		      eor	previousInput
   3179  d14b		       29 f0		      and	#$F0
   3180  d14d		       f0 03		      beq	LNoMenuMovement
   3181  d14f				   LMenuMovement
   3182  d14f		       20 4e f4 	      jsr	LUpdateMenuCursorPos
   3183  d152				   LNoMenuMovement
   3184  d152		       a5 a8		      lda	temp1
   3185  d154		       45 a7		      eor	previousInput
   3186  d156		       29 08		      and	#$08
   3187  d158		       f0 12		      beq	LNoMenuAdvancement
   3188  d15a				   LMenuAdvancement
   3189  d15a		       20 13 f4 	      jsr	LUpdateMenuAdvancement
   3190  d15d		       a5 bf		      lda	inBattle
   3191  d15f		       c9 81		      cmp	#$81
   3192  d161		       d0 2c		      bne	LSkipBattleLogic
   3193  d163		       20 1e f2 	      jsr	LDetermineNextBattler	;If battle options menu was just exited, force a new battler to be chosen
   3194  d166		       20 71 f4 	      jsr	LUpdateAvatars
   3195  d169		       20 3f f3 	      jsr	LDoBattle
   3196  d16c				   LNoMenuAdvancement
   3197  d16c		       4c 8f f1 	      jmp	LSkipBattleLogic
   3198  d16f				   LNotInMenu
   3199  d16f		       a5 a8		      lda	temp1
   3200  d171		       45 a7		      eor	previousInput
   3201  d173		       29 08		      and	#$08
   3202  d175		       f0 18		      beq	LSkipBattleLogic	;Button is not pressed, so don't advance battle logic
   3203  d177		       a5 bf		      lda	inBattle
   3204  d179		       c9 81		      cmp	#$81
   3205  d17b		       f0 09		      beq	LNeedANewBattler
   3206  d17d		       20 71 f4 	      jsr	LUpdateAvatars
   3207  d180		       20 3f f3 	      jsr	LDoBattle
   3208  d183		       4c 8f f1 	      jmp	LSkipBattleLogic
   3209  d186				   LNeedANewBattler
   3210  d186		       20 1e f2 	      jsr	LDetermineNextBattler
   3211  d189							;lda inBattle
   3212  d189		       20 71 f4 	      jsr	LUpdateAvatars
   3213  d18c		       20 3f f3 	      jsr	LDoBattle
   3214  d18f				   LSkipBattleLogic
   3215  d18f		       4c f9 f1 	      jmp	LDoneWithSeparateLogic
   3216  d192
   3217  d192				   LMazeLogic
   3218  d192							;Need to check for the maze exit and campfire location
   3219  d192							;Need to determine if a random encounter occurs
   3220  d192
   3221  d192		       a5 0c		      lda	INPT4
   3222  d194		       30 30		      bmi	LButtonNotPressed
   3223  d196		       29 80		      and	#$80
   3224  d198		       4a		      lsr
   3225  d199		       4a		      lsr
   3226  d19a		       4a		      lsr
   3227  d19b		       4a		      lsr
   3228  d19c		       85 a8		      sta	temp1
   3229  d19e		       a5 a7		      lda	previousInput
   3230  d1a0		       29 08		      and	#$08
   3231  d1a2		       45 a8		      eor	temp1
   3232  d1a4		       f0 20		      beq	LButtonNotPressed
   3233  d1a6		       a5 b9		      lda	currentMenu
   3234  d1a8		       d0 12		      bne	LExitPosSwapMenu
   3235  d1aa				   LEnterPosSwapMenu
   3236  d1aa		       a9 82		      lda	#$82
   3237  d1ac		       85 b9		      sta	currentMenu
   3238  d1ae		       a9 01		      lda	#1
   3239  d1b0		       85 ef		      sta	currentEffect
   3240  d1b2		       85 f0		      sta	effectCounter
   3241  d1b4		       85 f1		      sta	effectCountdown
   3242  d1b6		       a9 03		      lda	#$03
   3243  d1b8		       85 be		      sta	menuSize
   3244  d1ba		       d0 0a		      bne	LButtonNotPressed	;Should always be true, just saves one byte over jmp
   3245  d1bc				   LExitPosSwapMenu
   3246  d1bc		       a9 00		      lda	#$00
   3247  d1be		       85 ef		      sta	currentEffect
   3248  d1c0		       85 f0		      sta	effectCounter
   3249  d1c2		       85 b9		      sta	currentMenu
   3250  d1c4		       85 be		      sta	menuSize
   3251  d1c6				   LButtonNotPressed
   3252  d1c6		       a5 b9		      lda	currentMenu
   3253  d1c8		       f0 2f		      beq	LNoPartyPosSwapLogic
   3254  d1ca		       a5 a7		      lda	previousInput
   3255  d1cc		       ad 80 02 	      lda	SWCHA
   3256  d1cf		       29 f0		      and	#$F0
   3257  d1d1		       85 a8		      sta	temp1
   3258  d1d3		       a5 a7		      lda	previousInput
   3259  d1d5		       29 f0		      and	#$F0
   3260  d1d7		       c5 a8		      cmp	temp1
   3261  d1d9		       f0 1e		      beq	LNoPartyPosSwapLogic
   3262  d1db		       20 4e f4 	      jsr	LUpdateMenuCursorPos
   3263  d1de		       a5 ba		      lda	cursorIndexAndMessageY
   3264  d1e0		       85 bd		      sta	highlightedIndex
   3265  d1e2		       a9 40		      lda	#LEFT_MASK
   3266  d1e4		       2c 80 02 	      bit	SWCHA
   3267  d1e7		       d0 10		      bne	LNoPartyPosSwapLogic
   3268  d1e9							;Left is held down, so swap this person
   3269  d1e9		       a9 01		      lda	#1
   3270  d1eb		       a4 bd		      ldy	highlightedIndex
   3271  d1ed		       c8		      iny
   3272  d1ee				   LPartyPosMaskLoop
   3273  d1ee		       88		      dey
   3274  d1ef		       f0 04		      beq	LAfterPartyPosMaskLoop
   3275  d1f1		       0a		      asl
   3276  d1f2		       4c ee f1 	      jmp	LPartyPosMaskLoop
   3277  d1f5				   LAfterPartyPosMaskLoop
   3278  d1f5		       45 a1		      eor	partyBattlePos
   3279  d1f7		       85 a1		      sta	partyBattlePos
   3280  d1f9				   LNoPartyPosSwapLogic
   3281  d1f9
   3282  d1f9
   3283  d1f9				   LDoneWithSeparateLogic
   3284  d1f9
   3285  d1f9							;Update the previousInput variable, since both maze and battle logic use this.
   3286  d1f9		       ad 80 02 	      lda	SWCHA
   3287  d1fc		       29 f0		      and	#$F0
   3288  d1fe		       85 a8		      sta	temp1
   3289  d200		       a5 0c		      lda	INPT4
   3290  d202		       29 80		      and	#$80
   3291  d204		       4a		      lsr
   3292  d205		       4a		      lsr
   3293  d206		       4a		      lsr
   3294  d207		       4a		      lsr
   3295  d208		       05 a8		      ora	temp1
   3296  d20a		       85 a7		      sta	previousInput
   3297  d20c
   3298  d20c				   LWaitForOverscanTimer
   3299  d20c		       ad 84 02 	      lda	INTIM
   3300  d20f		       d0 fb		      bne	LWaitForOverscanTimer
   3301  d211
   3302  d211		       85 02		      sta	WSYNC
   3303  d213		       4c c6 f0 	      jmp	LStartOfFrame
   3304  d216
   3305  d216				   LHasActionMasks
   3306  d216		       80		      .byte.b	#$80
   3307  d217		       40		      .byte.b	#$40
   3308  d218		       20		      .byte.b	#$20
   3309  d219		       10		      .byte.b	#$10
   3310  d21a		       08		      .byte.b	#$08
   3311  d21b		       04		      .byte.b	#$04
   3312  d21c		       02		      .byte.b	#$02
   3313  d21d		       01		      .byte.b	#$01
   3314  d21e
   3315  d21e				   LDetermineNextBattler SUBROUTINE		;Performs the logic required to determine the next battler to take their action
   3316  d21e		       a5 0c		      lda	INPT4
   3317  d220		       10 01		      bpl	.LButtonPressed
   3318  d222		       60		      rts
   3319  d223				   .LButtonPressed
   3320  d223							;Need to check if either side has lost
   3321  d223		       a5 99		      lda	hp1
   3322  d225		       05 9a		      ora	hp2
   3323  d227		       05 9b		      ora	hp3
   3324  d229		       05 9c		      ora	hp4
   3325  d22b		       f0 12		      beq	.LPartyDead
   3326  d22d		       a5 d6		      lda	enemyHP
   3327  d22f		       05 d7		      ora	enemyHP+1
   3328  d231		       05 d8		      ora	enemyHP+2
   3329  d233		       05 d9		      ora	enemyHP+3
   3330  d235		       f0 0d		      beq	.LEnemiesDefeated
   3331  d237		       a5 e7		      lda	hasAction
   3332  d239		       d0 60		      bne	.LContinue
   3333  d23b							;If here, that means that all actions have been taken, so need to take new actions
   3334  d23b		       4c 49 f2 	      jmp	.LDoneDelaying	;Rename this label if this code works
   3335  d23e		       60		      rts
   3336  d23f				   .LPartyDead
   3337  d23f		       a9 91		      lda	#$91
   3338  d241		       85 bf		      sta	inBattle
   3339  d243		       60		      rts
   3340  d244				   .LEnemiesDefeated
   3341  d244		       a9 90		      lda	#$90
   3342  d246		       85 bf		      sta	inBattle
   3343  d248		       60		      rts
   3344  d249				   .LDoneDelaying
   3345  d249		       a2 00		      ldx	#0
   3346  d24b		       86 e7		      stx	hasAction
   3347  d24d				   .LDetermineIfBattlerIsAlive
   3348  d24d		       e0 04		      cpx	#4
   3349  d24f		       b0 06		      bcs	.LCheckEnemies
   3350  d251		       b5 99		      lda	hp1,x
   3351  d253		       f0 16		      beq	.LBattlerIsUnconscious
   3352  d255		       d0 0e		      bne	.L1
   3353  d257				   .LCheckEnemies
   3354  d257		       86 a8		      stx	temp1
   3355  d259		       ca		      dex
   3356  d25a		       ca		      dex
   3357  d25b		       ca		      dex
   3358  d25c		       ca		      dex
   3359  d25d		       b5 d6		      lda	enemyHP,x
   3360  d25f		       a6 a8		      ldx	temp1
   3361  d261		       c9 00		      cmp	#0
   3362  d263		       f0 06		      beq	.LBattlerIsUnconscious
   3363  d265				   .L1
   3364  d265		       a9 01		      lda	#1
   3365  d267		       85 a8		      sta	temp1
   3366  d269		       d0 04		      bne	.LAfterChecking
   3367  d26b				   .LBattlerIsUnconscious
   3368  d26b		       a9 00		      lda	#0
   3369  d26d		       85 a8		      sta	temp1
   3370  d26f				   .LAfterChecking
   3371  d26f		       a5 e7		      lda	hasAction
   3372  d271		       0a		      asl
   3373  d272		       05 a8		      ora	temp1
   3374  d274		       85 e7		      sta	hasAction
   3375  d276		       e8		      inx
   3376  d277		       e0 08		      cpx	#8
   3377  d279		       90 d2		      bcc	.LDetermineIfBattlerIsAlive
   3378  d27b
   3379  d27b		       a9 80		      lda	#$80	;At least one battler on each side is still alive, so continue the battle
   3380  d27d		       85 bf		      sta	inBattle
   3381  d27f		       85 b9		      sta	currentMenu
   3382  d281		       a9 00		      lda	#0
   3383  d283		       85 ba		      sta	cursorIndexAndMessageY
   3384  d285		       85 d2		      sta	battleActions
   3385  d287		       85 d3		      sta	battleActions+1
   3386  d289		       85 d4		      sta	battleActions+2
   3387  d28b		       85 d5		      sta	battleActions+3
   3388  d28d		       85 e6		      sta	enemyAction
   3389  d28f		       a9 03		      lda	#3
   3390  d291		       85 be		      sta	menuSize
   3391  d293		       20 13 f3 	      jsr	LFindFirstLivingAlly
   3392  d296		       86 c0		      stx	currentBattler
   3393  d298		       86 bd		      stx	highlightedIndex
   3394  d29a		       60		      rts
   3395  d29b				   .LContinue
   3396  d29b		       a9 00		      lda	#0
   3397  d29d		       85 ad		      sta	temp5	;Will be used to hold the currentBattler value of the battler with the current max speed
   3398  d29f		       85 af		      sta	temp6	;Will be used to hold the current max speed
   3399  d2a1		       a2 07		      ldx	#7
   3400  d2a3		       a5 bf		      lda	inBattle
   3401  d2a5		       c9 81		      cmp	#$81
   3402  d2a7		       f0 01		      beq	.LFindMaxSpeed
   3403  d2a9		       60		      rts		;inBattle is not 81, so do not update the current battler
   3404  d2aa				   .LFindMaxSpeed
   3405  d2aa		       a5 e7		      lda	hasAction
   3406  d2ac		       3d 16 f2 	      and	LHasActionMasks,x	;Go check the next person if this battler has already acted this turn
   3407  d2af		       f0 4b		      beq	.LNextIteration
   3408  d2b1		       e0 04		      cpx	#4
   3409  d2b3		       b0 21		      bcs	.LCheckEnemySpeed
   3410  d2b5				   .LCheckAllySpeed
   3411  d2b5		       b5 81		      lda	char1,x
   3412  d2b7		       29 0f		      and	#$0F	;Get the class of this character
   3413  d2b9		       a8		      tay
   3414  d2ba		       b9 0c fe 	      lda	LClassSpeedLookup,y	;Get the pointer to the table for this class's speed data
   3415  d2bd		       85 b1		      sta	tempPointer1
   3416  d2bf		       a9 fd		      lda	#(LStat1PerLevel >> 8 & $FF)
   3417  d2c1		       85 b2		      sta	tempPointer1+1
   3418  d2c3		       a5 f2		      lda	mazeAndPartyLevel
   3419  d2c5		       29 0f		      and	#$0F	;Get the level of the party
   3420  d2c7		       a8		      tay
   3421  d2c8		       88		      dey
   3422  d2c9		       b1 b1		      lda	(tempPointer1),y	;Get the speed for this character's class and level
   3423  d2cb		       c5 af		      cmp	temp6
   3424  d2cd		       90 2d		      bcc	.LNextIteration
   3425  d2cf		       86 ad		      stx	temp5
   3426  d2d1		       85 af		      sta	temp6
   3427  d2d3		       4c fc f2 	      jmp	.LNextIteration
   3428  d2d6				   .LCheckEnemySpeed
   3429  d2d6		       ca		      dex
   3430  d2d7		       ca		      dex
   3431  d2d8		       ca		      dex
   3432  d2d9		       ca		      dex
   3433  d2da		       b5 d6		      lda	enemyHP,x
   3434  d2dc		       e8		      inx
   3435  d2dd		       e8		      inx
   3436  d2de		       e8		      inx
   3437  d2df		       e8		      inx
   3438  d2e0		       c9 00		      cmp	#0
   3439  d2e2		       f0 18		      beq	.LNextIteration
   3440  d2e4		       ca		      dex
   3441  d2e5		       ca		      dex
   3442  d2e6		       ca		      dex
   3443  d2e7		       ca		      dex
   3444  d2e8		       b5 da		      lda	enemyID,x	;Horrifically inefficient
   3445  d2ea		       e8		      inx
   3446  d2eb		       e8		      inx
   3447  d2ec		       e8		      inx
   3448  d2ed		       e8		      inx
   3449  d2ee		       29 3f		      and	#$3F
   3450  d2f0		       a8		      tay
   3451  d2f1		       b9 43 fc 	      lda	LEnemySpeed,y
   3452  d2f4		       c5 af		      cmp	temp6
   3453  d2f6		       90 04		      bcc	.LNextIteration	;This enemy's speed is not high enough to be the new max
   3454  d2f8		       86 ad		      stx	temp5	;The currentBattler value
   3455  d2fa		       85 af		      sta	temp6	;The new speed value to compare against
   3456  d2fc				   .LNextIteration
   3457  d2fc		       ca		      dex
   3458  d2fd		       10 ab		      bpl	.LFindMaxSpeed
   3459  d2ff		       a6 ad		      ldx	temp5
   3460  d301		       86 c0		      stx	currentBattler	;The next action to be taken is the one now in currentBattler
   3461  d303		       bd 16 f2 	      lda	LHasActionMasks,x
   3462  d306		       45 e7		      eor	hasAction
   3463  d308		       85 e7		      sta	hasAction	;Mark that this battler has already taken their action
   3464  d30a		       e0 04		      cpx	#4
   3465  d30c		       b0 01		      bcs	.LDetermineEnemyAI
   3466  d30e		       60		      rts
   3467  d30f				   .LDetermineEnemyAI
   3468  d30f		       20 1d f3 	      jsr	LSetEnemyAction
   3469  d312		       60		      rts
   3470  d313
   3471  d313				   LFindFirstLivingAlly SUBROUTINE		;Returns the id of first party member with positive HP in X.
   3472  d313		       a2 00		      ldx	#0
   3473  d315				   .LLoop
   3474  d315		       b5 99		      lda	hp1,x
   3475  d317		       d0 03		      bne	.LEnd
   3476  d319		       e8		      inx
   3477  d31a		       d0 f9		      bne	.LLoop
   3478  d31c				   .LEnd
   3479  d31c		       60		      rts
   3480  d31d
   3481  d31d				   LSetEnemyAction SUBROUTINE		;Choose what action this enemy will perform and set enemyAction accordingly.
   3482  d31d							;Will have to be way more complicated in the future, but this works for the moment. RIP Whomever is in front of the party
   3483  d31d		       a9 00		      lda	#$00
   3484  d31f		       85 e6		      sta	enemyAction
   3485  d321		       60		      rts
   3486  d322
   3487  d322				   LKillTarget SUBROUTINE		;Performs the correct housekeeping after a target has suffered lethal damage.
   3488  d322		       a6 bb		      ldx	startingCursorIndexAndTargetID
   3489  d324		       bd 16 f2 	      lda	LHasActionMasks,x
   3490  d327		       49 ff		      eor	#$FF
   3491  d329		       25 e7		      and	hasAction
   3492  d32b		       85 e7		      sta	hasAction	;Make sure this battler loses their action on death
   3493  d32d		       e0 04		      cpx	#4
   3494  d32f		       b0 05		      bcs	.LEnemyDied
   3495  d331				   .LFriendlyDied
   3496  d331		       a9 00		      lda	#0
   3497  d333		       95 99		      sta	hp1,x
   3498  d335		       60		      rts
   3499  d336				   .LEnemyDied
   3500  d336		       ca		      dex
   3501  d337		       ca		      dex
   3502  d338		       ca		      dex
   3503  d339		       ca		      dex
   3504  d33a		       a9 00		      lda	#0
   3505  d33c		       95 d6		      sta	enemyHP,x
   3506  d33e		       60		      rts
   3507  d33f
   3508  d33f				   LDoBattle  SUBROUTINE		;Perform the correct battle logic and update the messages accordingly. This one's a doozy.
   3509  d33f		       60		      rts
   3510  d340
   3511  d340				   LCheckBattlerDied SUBROUTINE		;Applies the binary damage in A to the battler ID of startingCursorIndexAndTargetID, and checks for death
   3512  d340		       85 b1		      sta	tempPointer1
   3513  d342		       a4 bb		      ldy	startingCursorIndexAndTargetID
   3514  d344		       c0 04		      cpy	#4
   3515  d346		       b0 1f		      bcs	.LEnemy
   3516  d348				   .LAlly
   3517  d348		       20 c2 f3 	      jsr	LBinaryToDecimal
   3518  d34b		       85 b1		      sta	tempPointer1
   3519  d34d		       b9 99 00 	      lda	hp1,y
   3520  d350		       38		      sec
   3521  d351		       f8		      sed
   3522  d352		       e5 b1		      sbc	tempPointer1
   3523  d354		       d8		      cld
   3524  d355		       f0 08		      beq	.LAllyDied
   3525  d357		       90 06		      bcc	.LAllyDied
   3526  d359		       99 99 00 	      sta	hp1,y	;Ally did not die
   3527  d35c		       a9 00		      lda	#$0
   3528  d35e		       60		      rts
   3529  d35f				   .LAllyDied
   3530  d35f		       a9 00		      lda	#0
   3531  d361		       99 99 00 	      sta	hp1,y
   3532  d364		       a9 ff		      lda	#$FF
   3533  d366		       60		      rts
   3534  d367				   .LEnemy
   3535  d367		       88		      dey
   3536  d368		       88		      dey
   3537  d369		       88		      dey
   3538  d36a		       88		      dey
   3539  d36b		       b9 d6 00 	      lda	enemyHP,y
   3540  d36e		       38		      sec
   3541  d36f		       e5 b1		      sbc	tempPointer1
   3542  d371		       f0 08		      beq	.LEnemyDied
   3543  d373		       90 06		      bcc	.LEnemyDied
   3544  d375		       99 d6 00 	      sta	enemyHP,y	;Enemy did not die
   3545  d378		       a9 00		      lda	#$0
   3546  d37a		       60		      rts
   3547  d37b				   .LEnemyDied
   3548  d37b		       a9 00		      lda	#0
   3549  d37d		       99 d6 00 	      sta	enemyHP,y
   3550  d380		       a9 ff		      lda	#$FF
   3551  d382		       60		      rts
   3552  d383
   3553  d383				   LFindAoETarget SUBROUTINE		;Finds the next target for AoE spells, returning the correct id in A. Returns $FF if there are no more targets.
   3554  d383		       a6 bc		      ldx	aoeTargetID
   3555  d385		       e0 04		      cpx	#4
   3556  d387		       b0 03		      bcs	.LLookingForEnemyID
   3557  d389				   .LLookingForAllyID
   3558  d389		       e8		      inx
   3559  d38a		       b5 99		      lda	hp1,x
   3560  d38c				   .LLookingForEnemyID
   3561  d38c
   3562  d38c		       60		      rts
   3563  d38d
   3564  d38d				   LGetBattlerMagic SUBROUTINE		;Returns the magic power of the currentBattler in A
   3565  d38d		       a6 c0		      ldx	currentBattler
   3566  d38f		       e0 04		      cpx	#4
   3567  d391		       b0 16		      bcs	.LFindEnemyMagic
   3568  d393				   .LFindAllyMagic
   3569  d393		       a5 f2		      lda	mazeAndPartyLevel
   3570  d395		       29 0f		      and	#$0F
   3571  d397		       a8		      tay		;Y now contains the level of the party
   3572  d398		       b5 81		      lda	char1,x
   3573  d39a		       29 0f		      and	#$0F	;Get just the class of this battler
   3574  d39c		       aa		      tax
   3575  d39d		       bd 06 fe 	      lda	LClassMagicLookup,x
   3576  d3a0		       85 b1		      sta	tempPointer1
   3577  d3a2		       a9 fd		      lda	#(LStat1PerLevel >> 8 & $FF)
   3578  d3a4		       85 b2		      sta	tempPointer1+1
   3579  d3a6		       b1 b1		      lda	(tempPointer1),y
   3580  d3a8		       60		      rts
   3581  d3a9				   .LFindEnemyMagic
   3582  d3a9		       b5 da		      lda	enemyID,x
   3583  d3ab		       29 3f		      and	#$3F	;Get this enemy's id
   3584  d3ad		       aa		      tax
   3585  d3ae		       bd 46 fc 	      lda	LEnemyMagic,x
   3586  d3b1		       60		      rts
   3587  d3b2
   3588  d3b2							;Interprets X as the cursorPosition
   3589  d3b2				   LCursorIndexToBattlerIndex SUBROUTINE		;Converts the position of a menu cursor into the correct location in the array of the target (based on tempPointer1)
   3590  d3b2		       a0 00		      ldy	#0
   3591  d3b4		       e8		      inx
   3592  d3b5				   .LIndexConversionLoop
   3593  d3b5		       b1 b1		      lda	(tempPointer1),y
   3594  d3b7		       c9 00		      cmp	#0
   3595  d3b9		       f0 03		      beq	.LNoHit
   3596  d3bb		       ca		      dex
   3597  d3bc		       f0 03		      beq	.LDone
   3598  d3be				   .LNoHit
   3599  d3be		       c8		      iny
   3600  d3bf		       10 f4		      bpl	.LIndexConversionLoop	;Saves byte over jmp
   3601  d3c1				   .LDone
   3602  d3c1		       60		      rts		;Y is the correct offset into the enemyID array
   3603  d3c2
   3604  d3c2
   3605  d3c2
   3606  d3c2				   LBinaryToDecimal SUBROUTINE		;Will interpret A as the number in binary to convert to decimal.
   3607  d3c2				   .LRemove10s
   3608  d3c2		       38		      sec
   3609  d3c3		       e9 0a		      sbc	#10
   3610  d3c5		       30 04		      bmi	.LDoneRemoving10s
   3611  d3c7		       e8		      inx
   3612  d3c8		       4c c2 f3 	      jmp	.LRemove10s
   3613  d3cb				   .LDoneRemoving10s
   3614  d3cb		       18		      clc
   3615  d3cc		       69 0a		      adc	#10
   3616  d3ce		       85 ab		      sta	temp4
   3617  d3d0		       8a		      txa
   3618  d3d1		       0a		      asl
   3619  d3d2		       0a		      asl
   3620  d3d3		       0a		      asl
   3621  d3d4		       0a		      asl
   3622  d3d5		       05 ab		      ora	temp4
   3623  d3d7		       60		      rts
   3624  d3d8
   3625  d3d8				   LDecimalToBinary SUBROUTINE		;Will interpret A as the number in decimal to convert to binary. Returns the result in A.
   3626  d3d8		       a2 00		      ldx	#0
   3627  d3da		       f8		      sed
   3628  d3db				   .LRemove16s
   3629  d3db		       38		      sec
   3630  d3dc		       e9 16		      sbc	#$16
   3631  d3de		       30 03		      bmi	.LDoneRemoving16s
   3632  d3e0		       e8		      inx
   3633  d3e1		       d0 f8		      bne	.LRemove16s
   3634  d3e3				   .LDoneRemoving16s
   3635  d3e3		       69 16		      adc	#$16
   3636  d3e5		       d8		      cld
   3637  d3e6		       c9 10		      cmp	#$10
   3638  d3e8		       b0 04		      bcs	.LOver10
   3639  d3ea		       85 b3		      sta	tempPointer2
   3640  d3ec		       90 07		      bcc	.LCombine	;Should always be taken
   3641  d3ee				   .LOver10
   3642  d3ee		       29 0f		      and	#$0F
   3643  d3f0		       18		      clc
   3644  d3f1		       69 0a		      adc	#10
   3645  d3f3		       85 b3		      sta	tempPointer2
   3646  d3f5				   .LCombine
   3647  d3f5		       8a		      txa
   3648  d3f6		       0a		      asl
   3649  d3f7		       0a		      asl
   3650  d3f8		       0a		      asl
   3651  d3f9		       0a		      asl
   3652  d3fa		       05 b3		      ora	tempPointer2
   3653  d3fc		       60		      rts
   3654  d3fd
   3655  d3fd				   LGetEnemyResistances SUBROUTINE		;Will interpret Y as the enemy targetID to return the resistances of (in A). Format is LPFIGEP0
   3656  d3fd		       88		      dey
   3657  d3fe		       88		      dey
   3658  d3ff		       88		      dey
   3659  d400		       88		      dey
   3660  d401		       b9 da 00 	      lda	enemyID,y
   3661  d404		       a8		      tay
   3662  d405		       b9 49 fc 	      lda	LEnemyResistances,y
   3663  d408		       60		      rts
   3664  d409
   3665  d409				   LRandom    SUBROUTINE		;Ticks the random number generator when called
   3666  d409		       a5 b7		      lda	rand8
   3667  d40b		       4a		      lsr
   3668  d40c		       90 02		      bcc	.LNoEOR
   3669  d40e		       49 b4		      eor	#$B4
   3670  d410				   .LNoEOR
   3671  d410		       85 b7		      sta	rand8
   3672  d412		       60		      rts
   3673  d413
   3674  d413				   LUpdateMenuAdvancement SUBROUTINE		;Checks if the button is pressed, and advances with the selected options if so.
   3675  d413		       a5 0c		      lda	INPT4
   3676  d415		       10 01		      bpl	.LContinue	;Return if the button is not pressed
   3677  d417				   .LReturn
   3678  d417		       60		      rts
   3679  d418				   .LContinue
   3680  d418		       a5 b9		      lda	currentMenu
   3681  d41a		       f0 fb		      beq	.LReturn
   3682  d41c		       a6 c0		      ldx	currentBattler
   3683  d41e		       c9 80		      cmp	#$80
   3684  d420		       f0 27		      beq	.LBattleOptionsMenu
   3685  d422		       c9 81		      cmp	#$81
   3686  d424		       f0 26		      beq	.LSelectEnemyMenu
   3687  d426		       c9 84		      cmp	#$84
   3688  d428		       f0 1c		      beq	.LSelectSpellMenu
   3689  d42a				   .LSelectAllyMenuUnique
   3690  d42a				   .LSelectAllyMenu
   3691  d42a		       a9 99		      lda	#hp1
   3692  d42c		       85 b1		      sta	tempPointer1
   3693  d42e		       a9 00		      lda	#0
   3694  d430		       85 b2		      sta	tempPointer1+1
   3695  d432		       a6 ba		      ldx	cursorIndexAndMessageY
   3696  d434		       20 b2 f3 	      jsr	LCursorIndexToBattlerIndex	;This doesn't correctly handle unique ally selection
   3697  d437		       98		      tya
   3698  d438		       0a		      asl
   3699  d439		       0a		      asl
   3700  d43a		       0a		      asl
   3701  d43b		       0a		      asl
   3702  d43c		       0a		      asl
   3703  d43d		       a6 c0		      ldx	currentBattler
   3704  d43f		       15 d2		      ora	battleActions,x
   3705  d441		       95 d2		      sta	battleActions,x
   3706  d443		       4c 4c f4 	      jmp	.LCheckNextBattler
   3707  d446				   .LSelectSpellMenu
   3708  d446							;Need to determine what the targeting of this spell is in order to advance to none or correct targeting
   3709  d446
   3710  d446		       4c 4c f4 	      jmp	.LCheckNextBattler
   3711  d449				   .LBattleOptionsMenu
   3712  d449		       4c 4c f4 	      jmp	.LCheckNextBattler
   3713  d44c				   .LSelectEnemyMenu
   3714  d44c							;Determine how many enemies are alive
   3715  d44c				   .LCheckNextBattler
   3716  d44c		       60		      rts
   3717  d44d
   3718  d44d				   LUpdateMenuRendering SUBROUTINE		;Updates the menuLines and highlightedLine according to the current menu state
   3719  d44d		       60		      rts
   3720  d44e
   3721  d44e				   LUpdateMenuCursorPos SUBROUTINE		;Updates the cursor according to joystick presses
   3722  d44e		       a4 ba		      ldy	cursorIndexAndMessageY
   3723  d450		       a9 20		      lda	#DOWN_MASK
   3724  d452		       2c 80 02 	      bit	SWCHA
   3725  d455		       f0 08		      beq	.LDownPressed
   3726  d457		       a9 10		      lda	#UP_MASK
   3727  d459		       2c 80 02 	      bit	SWCHA
   3728  d45c		       f0 0a		      beq	.LUpPressed
   3729  d45e		       60		      rts
   3730  d45f				   .LDownPressed
   3731  d45f		       c4 be		      cpy	menuSize
   3732  d461		       90 01		      bcc	.LNotAtLastPosition
   3733  d463		       60		      rts
   3734  d464				   .LNotAtLastPosition
   3735  d464		       c8		      iny
   3736  d465		       84 ba		      sty	cursorIndexAndMessageY
   3737  d467		       60		      rts
   3738  d468				   .LUpPressed
   3739  d468		       a4 ba		      ldy	cursorIndexAndMessageY
   3740  d46a		       d0 01		      bne	.LNotAtFirstPosition
   3741  d46c		       60		      rts
   3742  d46d				   .LNotAtFirstPosition
   3743  d46d		       88		      dey
   3744  d46e		       84 ba		      sty	cursorIndexAndMessageY
   3745  d470		       60		      rts
   3746  d471
   3747  d471
   3748  d471
   3749  d471				   LUpdateAvatars SUBROUTINE
   3750  d471		       a5 bf		      lda	inBattle
   3751  d473		       10 05		      bpl	.LContinue
   3752  d475		       a5 0c		      lda	INPT4
   3753  d477		       10 01		      bpl	.LContinue
   3754  d479		       60		      rts
   3755  d47a				   .LContinue
   3756  d47a		       a0 03		      ldy	#3
   3757  d47c				   .LUpdateAvatarLoop
   3758  d47c							;Check for status effect
   3759  d47c		       98		      tya
   3760  d47d
   3761  d47d		       b9 de 00 	      lda	battlerStatus,y
   3762  d480		       85 b1		      sta	tempPointer1
   3763  d482		       29 18		      and	#ASLEEP_MASK
   3764  d484		       d0 3f		      bne	.LAsleep
   3765  d486		       a5 b1		      lda	tempPointer1
   3766  d488		       29 01		      and	#BLIGHTED_MASK
   3767  d48a		       d0 3f		      bne	.LBlighted
   3768  d48c
   3769  d48c							;Check for HP
   3770  d48c		       b9 99 00 	      lda	hp1,y
   3771  d48f		       f0 40		      beq	.LDead
   3772  d491		       20 d8 f3 	      jsr	LDecimalToBinary
   3773  d494		       85 b1		      sta	tempPointer1	;Now contains the current HP for this party member in binary
   3774  d496
   3775  d496		       b9 81 00 	      lda	char1,y
   3776  d499		       29 0f		      and	#$0F
   3777  d49b		       aa		      tax
   3778  d49c		       bd 12 fe 	      lda	LClassHPLookup,x
   3779  d49f		       85 b3		      sta	tempPointer2
   3780  d4a1		       a9 fd		      lda	#(LStat1PerLevel >> 8 & $FF)
   3781  d4a3		       85 b4		      sta	tempPointer2+1
   3782  d4a5
   3783  d4a5		       98		      tya
   3784  d4a6		       aa		      tax
   3785  d4a7
   3786  d4a7		       a5 f2		      lda	mazeAndPartyLevel
   3787  d4a9		       29 0f		      and	#$0F
   3788  d4ab		       a8		      tay
   3789  d4ac		       88		      dey
   3790  d4ad		       b1 b3		      lda	(tempPointer2),y	;A now contains the max HP for this party member
   3791  d4af		       4a		      lsr
   3792  d4b0		       c5 b1		      cmp	tempPointer1
   3793  d4b2		       90 09		      bcc	.LAboveHalf
   3794  d4b4		       4a		      lsr
   3795  d4b5		       c5 b1		      cmp	tempPointer1
   3796  d4b7		       90 08		      bcc	.LAboveQuarter
   3797  d4b9		       a9 10		      lda	#$10	;Mood 1
   3798  d4bb		       d0 16		      bne	.LChangeMood
   3799  d4bd				   .LAboveHalf
   3800  d4bd		       a9 30		      lda	#$30	;Mood 3
   3801  d4bf		       d0 12		      bne	.LChangeMood
   3802  d4c1				   .LAboveQuarter
   3803  d4c1		       a9 20		      lda	#$20	;Mood 2
   3804  d4c3		       d0 0e		      bne	.LChangeMood
   3805  d4c5				   .LAsleep
   3806  d4c5		       a9 60		      lda	#$60	;Mood 6
   3807  d4c7		       85 b1		      sta	tempPointer1
   3808  d4c9		       d0 0c		      bne	.LChangeMoodLater
   3809  d4cb				   .LBlighted
   3810  d4cb		       a9 70		      lda	#$70	;Mood 7
   3811  d4cd		       85 b1		      sta	tempPointer1
   3812  d4cf		       d0 06		      bne	.LChangeMoodLater
   3813  d4d1				   .LDead
   3814  d4d1		       a9 00		      lda	#$00	;Mood 0
   3815  d4d3				   .LChangeMood
   3816  d4d3		       85 b1		      sta	tempPointer1
   3817  d4d5
   3818  d4d5		       8a		      txa
   3819  d4d6		       a8		      tay
   3820  d4d7
   3821  d4d7				   .LChangeMoodLater
   3822  d4d7		       b9 81 00 	      lda	char1,y
   3823  d4da		       29 0f		      and	#$0F
   3824  d4dc		       05 b1		      ora	tempPointer1
   3825  d4de		       99 81 00 	      sta	char1,y
   3826  d4e1		       88		      dey
   3827  d4e2		       10 98		      bpl	.LUpdateAvatarLoop
   3828  d4e4		       60		      rts
   3829  d4e5
   3830  d4e5				   LOverrideAvatar SUBROUTINE		;Sets party member Y's mood to X.
   3831  d4e5		       b9 81 00 	      lda	char1,y
   3832  d4e8		       29 0f		      and	#$0F	;Get just the class
   3833  d4ea		       85 af		      sta	temp6
   3834  d4ec		       8a		      txa
   3835  d4ed		       0a		      asl
   3836  d4ee		       0a		      asl
   3837  d4ef		       0a		      asl
   3838  d4f0		       0a		      asl
   3839  d4f1		       05 af		      ora	temp6
   3840  d4f3		       99 81 00 	      sta	char1,y
   3841  d4f6		       60		      rts
   3842  d4f7
   3843  dc40					      ORG	$DC40	;Used to hold enemy stats and related data
   3844  dc40					      RORG	$FC40
   3845  dc40
   3846  dc40				   LEnemyAttack
   3847  dc40		       02		      .byte.b	2	;Zombie
   3848  dc41		       0a		      .byte.b	10	;Giant
   3849  dc42		       23		      .byte.b	35	;Dragon
   3850  dc43				   LEnemySpeed
   3851  dc43		       01		      .byte.b	1	;Zombie
   3852  dc44		       03		      .byte.b	3	;Giant
   3853  dc45		       28		      .byte.b	40	;Dragon
   3854  dc46				   LEnemyMagic
   3855  dc46		       00		      .byte.b	0	;Zombie
   3856  dc47		       00		      .byte.b	0	;Giant
   3857  dc48		       14		      .byte.b	20	;Dragon
   3858  dc49
   3859  dc49							;Format is LPFIHEP0
   3860  dc49							;L : Legendary (bosses), P : Physical, F : Fire, I : Ice, H : Holy, E : Electric, P : Poison
   3861  dc49				   LEnemyResistances
   3862  dc49		       59		      .byte.b	#%01011001	;Zombie
   3863  dc4a		       00		      .byte.b	#%00000000	;Giant
   3864  dc4b		       82		      .byte.b	#%10000010	;Dragon
   3865  dc4c
   3866  dd00					      ORG	$DD00	;Used to hold battle-related data.
   3867  dd00					      RORG	$FD00
   3868  dd00
   3869  dd00				   LClassFightMessages
   3870  dd00		       04		      .byte.b	$4	;Knight
   3871  dd01		       00		      .byte.b	$0	;Rogue
   3872  dd02		       02		      .byte.b	$2	;Cleric
   3873  dd03		       01		      .byte.b	$1	;Wizard
   3874  dd04		       01		      .byte.b	$1	;Ranger
   3875  dd05		       00		      .byte.b	$0	;Paladin
   3876  dd06
   3877  dd06				   LEnemyFightMessages
   3878  dd06		       03		      .byte.b	$3	;Zombie
   3879  dd07		       02		      .byte.b	$2	;Giant
   3880  dd08		       04		      .byte.b	$4	;Dragon
   3881  dd09
   3882  dd09				   LAllZeroes
   3883  dd09		       00		      .byte.b	0
   3884  dd0a		       00		      .byte.b	0
   3885  dd0b		       00		      .byte.b	0
   3886  dd0c		       00		      .byte.b	0
   3887  dd0d		       00		      .byte.b	0
   3888  dd0e		       00		      .byte.b	0
   3889  dd0f		       00		      .byte.b	0
   3890  dd10		       00		      .byte.b	0
   3891  dd11		       00		      .byte.b	0
   3892  dd12				   LStat1PerLevel
   3893  dd12		       04		      .byte.b	4
   3894  dd13		       05		      .byte.b	5
   3895  dd14		       06		      .byte.b	6
   3896  dd15		       07		      .byte.b	7
   3897  dd16		       08		      .byte.b	8
   3898  dd17		       09		      .byte.b	9
   3899  dd18		       0a		      .byte.b	10
   3900  dd19		       0b		      .byte.b	11
   3901  dd1a		       0c		      .byte.b	12
   3902  dd1b				   LStat2PerLevel
   3903  dd1b		       05		      .byte.b	5
   3904  dd1c		       07		      .byte.b	7
   3905  dd1d		       09		      .byte.b	9
   3906  dd1e		       0b		      .byte.b	11
   3907  dd1f		       0d		      .byte.b	13
   3908  dd20		       0f		      .byte.b	15
   3909  dd21		       11		      .byte.b	17
   3910  dd22		       13		      .byte.b	19
   3911  dd23		       15		      .byte.b	21
   3912  dd24				   LStat3PerLevel
   3913  dd24		       06		      .byte.b	6
   3914  dd25		       09		      .byte.b	9
   3915  dd26		       0c		      .byte.b	12
   3916  dd27		       0f		      .byte.b	15
   3917  dd28		       12		      .byte.b	18
   3918  dd29		       15		      .byte.b	21
   3919  dd2a		       18		      .byte.b	24
   3920  dd2b		       1b		      .byte.b	27
   3921  dd2c		       1e		      .byte.b	30
   3922  dd2d				   LStat4PerLevel
   3923  dd2d		       07		      .byte.b	7
   3924  dd2e		       0b		      .byte.b	11
   3925  dd2f		       0f		      .byte.b	15
   3926  dd30		       13		      .byte.b	19
   3927  dd31		       17		      .byte.b	23
   3928  dd32		       1b		      .byte.b	27
   3929  dd33		       1f		      .byte.b	31
   3930  dd34		       23		      .byte.b	35
   3931  dd35		       27		      .byte.b	39
   3932  dd36				   LStat5PerLevel
   3933  dd36		       08		      .byte.b	8
   3934  dd37		       0d		      .byte.b	13
   3935  dd38		       12		      .byte.b	18
   3936  dd39		       17		      .byte.b	23
   3937  dd3a		       1c		      .byte.b	28
   3938  dd3b		       21		      .byte.b	33
   3939  dd3c		       26		      .byte.b	38
   3940  dd3d		       2b		      .byte.b	43
   3941  dd3e		       30		      .byte.b	48
   3942  dd3f				   LHP2PerLevel
   3943  dd3f		       0b		      .byte.b	11
   3944  dd40		       0d		      .byte.b	13
   3945  dd41		       0f		      .byte.b	15
   3946  dd42		       11		      .byte.b	17
   3947  dd43		       13		      .byte.b	19
   3948  dd44		       15		      .byte.b	21
   3949  dd45		       17		      .byte.b	23
   3950  dd46		       19		      .byte.b	25
   3951  dd47		       1b		      .byte.b	27
   3952  dd48				   LHP4PerLevel
   3953  dd48		       0c		      .byte.b	12
   3954  dd49		       10		      .byte.b	16
   3955  dd4a		       14		      .byte.b	20
   3956  dd4b		       18		      .byte.b	24
   3957  dd4c		       1c		      .byte.b	28
   3958  dd4d		       20		      .byte.b	32
   3959  dd4e		       24		      .byte.b	36
   3960  dd4f		       28		      .byte.b	40
   3961  dd50		       2c		      .byte.b	44
   3962  dd51				   LHP6PerLevel
   3963  dd51		       0d		      .byte.b	13
   3964  dd52		       13		      .byte.b	19
   3965  dd53		       19		      .byte.b	25
   3966  dd54		       1f		      .byte.b	31
   3967  dd55		       25		      .byte.b	37
   3968  dd56		       2b		      .byte.b	43
   3969  dd57		       31		      .byte.b	49
   3970  dd58		       37		      .byte.b	55
   3971  dd59		       3d		      .byte.b	61
   3972  dd5a				   LHP8PerLevel
   3973  dd5a		       0e		      .byte.b	14
   3974  dd5b		       16		      .byte.b	22
   3975  dd5c		       1e		      .byte.b	30
   3976  dd5d		       26		      .byte.b	38
   3977  dd5e		       2e		      .byte.b	46
   3978  dd5f		       36		      .byte.b	54
   3979  dd60		       3e		      .byte.b	62
   3980  dd61		       46		      .byte.b	70
   3981  dd62		       4e		      .byte.b	78
   3982  dd63				   LHP10PerLevel
   3983  dd63		       0f		      .byte.b	15
   3984  dd64		       19		      .byte.b	25
   3985  dd65		       23		      .byte.b	35
   3986  dd66		       2d		      .byte.b	45
   3987  dd67		       37		      .byte.b	55
   3988  dd68		       41		      .byte.b	65
   3989  dd69		       4b		      .byte.b	75
   3990  dd6a		       55		      .byte.b	85
   3991  dd6b		       5f		      .byte.b	95
   3992  dd6c				   LMP2PerLevel
   3993  dd6c		       07		      .byte.b	7
   3994  dd6d		       09		      .byte.b	9
   3995  dd6e		       0b		      .byte.b	11
   3996  dd6f		       0d		      .byte.b	13
   3997  dd70		       0f		      .byte.b	15
   3998  dd71		       11		      .byte.b	17
   3999  dd72		       13		      .byte.b	19
   4000  dd73		       15		      .byte.b	21
   4001  dd74		       17		      .byte.b	23
   4002  dd75				   LMP3PerLevel
   4003  dd75		       08		      .byte.b	8
   4004  dd76		       0b		      .byte.b	11
   4005  dd77		       0e		      .byte.b	14
   4006  dd78		       11		      .byte.b	17
   4007  dd79		       14		      .byte.b	20
   4008  dd7a		       17		      .byte.b	23
   4009  dd7b		       1a		      .byte.b	26
   4010  dd7c		       1d		      .byte.b	29
   4011  dd7d		       20		      .byte.b	32
   4012  dd7e				   LMP5PerLevel
   4013  dd7e		       0a		      .byte.b	10
   4014  dd7f		       0f		      .byte.b	15
   4015  dd80		       14		      .byte.b	20
   4016  dd81		       19		      .byte.b	25
   4017  dd82		       1e		      .byte.b	30
   4018  dd83		       23		      .byte.b	35
   4019  dd84		       28		      .byte.b	40
   4020  dd85		       2d		      .byte.b	45
   4021  dd86		       32		      .byte.b	50
   4022  dd87
   4023  de00					      ORG	$DE00	;Used to hold miscellaneous data/lookup tables
   4024  de00					      RORG	$FE00
   4025  de00
   4026  de00				   LClassAttackLookup
   4027  de00		       24		      .byte.b	(LStat3PerLevel & $FF)	;Knight
   4028  de01		       36		      .byte.b	(LStat5PerLevel & $FF)	;Rogue
   4029  de02		       1b		      .byte.b	(LStat2PerLevel & $FF)	;Cleric
   4030  de03		       12		      .byte.b	(LStat1PerLevel & $FF)	;Wizard
   4031  de04		       2d		      .byte.b	(LStat4PerLevel & $FF)	;Ranger
   4032  de05		       24		      .byte.b	(LStat3PerLevel & $FF)	;Paladin
   4033  de06				   LClassMagicLookup
   4034  de06		       09		      .byte.b	(LAllZeroes & $FF)
   4035  de07		       09		      .byte.b	(LAllZeroes & $FF)
   4036  de08		       24		      .byte.b	(LStat3PerLevel & $FF)
   4037  de09		       36		      .byte.b	(LStat5PerLevel & $FF)
   4038  de0a		       1b		      .byte.b	(LStat2PerLevel & $FF)
   4039  de0b		       24		      .byte.b	(LStat3PerLevel & $FF)
   4040  de0c				   LClassSpeedLookup
   4041  de0c		       1b		      .byte.b	(LStat2PerLevel & $FF)
   4042  de0d		       36		      .byte.b	(LStat5PerLevel & $FF)
   4043  de0e		       12		      .byte.b	(LStat1PerLevel & $FF)
   4044  de0f		       24		      .byte.b	(LStat3PerLevel & $FF)
   4045  de10		       2d		      .byte.b	(LStat4PerLevel & $FF)
   4046  de11		       24		      .byte.b	(LStat3PerLevel & $FF)
   4047  de12				   LClassHPLookup
   4048  de12		       63		      .byte.b	(LHP10PerLevel & $FF)
   4049  de13		       48		      .byte.b	(LHP4PerLevel & $FF)
   4050  de14		       5a		      .byte.b	(LHP8PerLevel & $FF)
   4051  de15		       3f		      .byte.b	(LHP2PerLevel & $FF)
   4052  de16		       48		      .byte.b	(LHP4PerLevel & $FF)
   4053  de17		       51		      .byte.b	(LHP6PerLevel & $FF)
   4054  de18				   LClassMPLookup
   4055  de18		       09		      .byte.b	(LAllZeroes & $FF)
   4056  de19		       09		      .byte.b	(LAllZeroes & $FF)
   4057  de1a		       75		      .byte.b	(LMP3PerLevel & $FF)
   4058  de1b		       7e		      .byte.b	(LMP5PerLevel & $FF)
   4059  de1c		       6c		      .byte.b	(LMP2PerLevel & $FF)
   4060  de1d		       75		      .byte.b	(LMP3PerLevel & $FF)
   4061  de1e
   4062  de1e				   LPartyPositionMasks
   4063  de1e		       01		      .byte.b	$01
   4064  de1f		       02		      .byte.b	$02
   4065  de20		       04		      .byte.b	$04
   4066  de21		       08		      .byte.b	$08
   4067  de22
   4068  de22				   LMaxSpellsKnown
   4069  de22		       00		      .byte.b	#0
   4070  de23		       00		      .byte.b	#0
   4071  de24		       08		      .byte.b	#8	;Cleric
   4072  de25		       08		      .byte.b	#8	;Wizard
   4073  de26		       04		      .byte.b	#4	;Ranger
   4074  de27		       04		      .byte.b	#4	;Paladin
   4075  de28
   4076  de28				   LSpellListLookup
   4077  de28		       00		      .byte.b	#0
   4078  de29		       00		      .byte.b	#0
   4079  de2a		       48		      .byte.b	(LClericSpellList & $FF)
   4080  de2b		       3f		      .byte.b	(LWizardSpellList & $FF)
   4081  de2c		       51		      .byte.b	(LRangerSpellList & $FF)
   4082  de2d		       58		      .byte.b	(LPaladinSpellList & $FF)
   4083  de2e
   4084  de2e				   LSpellTargetingLookup		;Contains a 0 if the spell does not have specific targeting, a 1 if it targets enemies, and a 2 if it targets allies
   4085  de2e		       ff		      .byte.b	$FF	;Back
   4086  de2f		       01		      .byte.b	1	;Fire
   4087  de30		       00		      .byte.b	0	;Blizzard
   4088  de31		       02		      .byte.b	2	;Invisible
   4089  de32		       01		      .byte.b	1	;Hold
   4090  de33		       01		      .byte.b	1	;Fira
   4091  de34		       00		      .byte.b	0	;Vanish
   4092  de35		       00		      .byte.b	0	;Holdra
   4093  de36		       00		      .byte.b	0	;Flare
   4094  de37		       02		      .byte.b	2	;Heal
   4095  de38		       01		      .byte.b	1	;Smite
   4096  de39		       02		      .byte.b	2	;Cure
   4097  de3a		       02		      .byte.b	2	;Shield
   4098  de3b		       00		      .byte.b	0	;Restore
   4099  de3c		       01		      .byte.b	1	;Blight
   4100  de3d		       00		      .byte.b	0	;Aegis
   4101  de3e		       00		      .byte.b	0	;Banish
   4102  de3f
   4103  de3f				   LWizardSpellList
   4104  de3f		       10		      .byte.b	#16	;Back
   4105  de40		       00		      .byte.b	#0	;Fire
   4106  de41		       01		      .byte.b	#1	;Blizzard
   4107  de42		       02		      .byte.b	#2	;Invisible
   4108  de43		       03		      .byte.b	#3	;Hold
   4109  de44		       04		      .byte.b	#4	;Fira
   4110  de45		       05		      .byte.b	#5	;Vanish
   4111  de46		       06		      .byte.b	#6	;Holdra
   4112  de47		       07		      .byte.b	#7	;Flare
   4113  de48				   LClericSpellList
   4114  de48		       10		      .byte.b	#16	;Back
   4115  de49		       08		      .byte.b	#8	;Heal
   4116  de4a		       09		      .byte.b	#9	;Smite
   4117  de4b		       0a		      .byte.b	#10	;Cure
   4118  de4c		       0b		      .byte.b	#11	;Shield
   4119  de4d		       0c		      .byte.b	#12	;Restore
   4120  de4e		       0d		      .byte.b	#13	;Blight
   4121  de4f		       0e		      .byte.b	#14	;Aegis
   4122  de50		       0f		      .byte.b	#15	;Banish
   4123  de51				   LRangerSpellList
   4124  de51		       10		      .byte.b	#16	;Back
   4125  de52		       08		      .byte.b	#8	;Heal
   4126  de53		       02		      .byte.b	#2	;Invis
   4127  de54		       0a		      .byte.b	#10	;Cure
   4128  de55		       0b		      .byte.b	#11	;Shield
   4129  de56		       05		      .byte.b	#5	;Vanish
   4130  de57		       0d		      .byte.b	#13	;Blight
   4131  de58				   LPaladinSpellList
   4132  de58		       10		      .byte.b	#16	;Back
   4133  de59		       00		      .byte.b	#0	;Fire
   4134  de5a		       08		      .byte.b	#8	;Heal
   4135  de5b		       09		      .byte.b	#9	;Smite
   4136  de5c		       03		      .byte.b	#3	;Hold
   4137  de5d		       0b		      .byte.b	#11	;Shield
   4138  de5e		       04		      .byte.b	#4	;Fira
   4139  de5f
   4140  dfb0					      ORG	$DFB0
   4141  dfb0					      RORG	$FFB0
   4142  dfb0
   4143  dfb0				   LRunFunctionInSBank
   4144  dfb0		       8d f9 1f 	      sta	$1FF9	;Go to bank 3
   4145  dfb3		       ea		      nop		;4
   4146  dfb4		       ea		      nop
   4147  dfb5		       ea		      nop
   4148  dfb6		       ea		      nop
   4149  dfb7		       ea		      nop
   4150  dfb8		       ea		      nop
   4151  dfb9		       ea		      nop		;10
   4152  dfba		       ea		      nop
   4153  dfbb		       ea		      nop
   4154  dfbc		       ea		      nop
   4155  dfbd		       ea		      nop
   4156  dfbe		       ea		      nop
   4157  dfbf		       ea		      nop
   4158  dfc0		       ea		      nop
   4159  dfc1		       ea		      nop
   4160  dfc2		       ea		      nop
   4161  dfc3		       ea		      nop		;20
   4162  dfc4		       ea		      nop
   4163  dfc5		       ea		      nop
   4164  dfc6		       ea		      nop
   4165  dfc7		       ea		      nop
   4166  dfc8		       ea		      nop
   4167  dfc9		       ea		      nop
   4168  dfca		       ea		      nop
   4169  dfcb		       60		      rts		;28
   4170  dfcc
   4171  dfd0					      ORG	$DFD0
   4172  dfd0					      RORG	$FFD0
   4173  dfd0
   4174  dfd0				   LGoToUpdateEffects
   4175  dfd0		       8d f8 1f 	      sta	$1FF8	;Go to bank 2
   4176  dfd3		       ea		      nop		;
   4177  dfd4		       ea		      nop		; JSR EUpdateEffects
   4178  dfd5		       ea		      nop		;
   4179  dfd6		       ea		      nop		;
   4180  dfd7		       ea		      nop		; sta $1FF7
   4181  dfd8		       ea		      nop		;
   4182  dfd9		       4c 1d f1 	      jmp	LAfterEffectUpdate
   4183  dfdc
   4184  dfe0					      ORG	$DFE0
   4185  dfe0					      RORG	$FFE0
   4186  dfe0
   4187  dfe0				   LGoToMainPicture
   4188  dfe0		       8d f6 1f 	      sta	$1FF6	;Go to bank 1, it is time to render the picture
   4189  dfe3		       ea		      nop
   4190  dfe4		       ea		      nop
   4191  dfe5		       ea		      nop
   4192  dfe6				   LCatchFromMainPicture
   4193  dfe6		       ea		      nop
   4194  dfe7		       ea		      nop
   4195  dfe8		       ea		      nop
   4196  dfe9		       4c 27 f1 	      jmp	LOverscan
   4197  dfec
   4198  dffa					      ORG	$DFFA
   4199  dffa					      RORG	$FFFA
   4200  dffa
   4201  dffa							;NMI, IRQ, and RESET information
   4202  dffa		       00 f0		      .word.w	LReset
   4203  dffc		       00 f0		      .word.w	LReset
   4204  dffe		       00 f0		      .word.w	LReset
   4205  e000
   4206  e000							;BANK 2 - CONTAINS LOGIC AND DATA USED FOR THE RENDERING OF ENEMIES IN BATTLE
   4207  e000
   4208  e000					      ORG	$E000
   4209  e000					      RORG	$F000
   4210  e000
   4211  e000				   EReset
   4212  e000		       8d f7 1f 	      sta	$1FF7	;Go to bank 1, the correct startup bank
   4213  e003
   4214  e003				   ETestEffect
   4215  e003		       10		      .byte.b	$10
   4216  e004		       20		      .byte.b	$20
   4217  e005		       30		      .byte.b	$30
   4218  e006		       40		      .byte.b	$40
   4219  e007		       50		      .byte.b	$50
   4220  e008		       60		      .byte.b	$60
   4221  e009		       70		      .byte.b	$70
   4222  e00a		       80		      .byte.b	$80
   4223  e00b
   4224  e00b				   EEffectLowLookup
   4225  e00b		       00		      .byte.b	0	;No effect
   4226  e00c		       00		      .byte.b	0	;Party member highlighting
   4227  e00d		       03		      .byte.b	(ETestEffect & $FF)
   4228  e00e
   4229  e00e				   EEffectHighLookup
   4230  e00e		       00		      .byte.b	0	;No effect
   4231  e00f		       00		      .byte.b	0	;Party member highlighting
   4232  e010		       f0		      .byte.b	(ETestEffect >> 8 & $FF)
   4233  e011
   4234  e011				   EEffectLength
   4235  e011		       00		      .byte.b	#0
   4236  e012		       00		      .byte.b	#0
   4237  e013		       08		      .byte.b	#8
   4238  e014				   EEffectFrequency
   4239  e014		       00		      .byte.b	#0
   4240  e015		       20		      .byte.b	#32
   4241  e016		       1e		      .byte.b	#30
   4242  e017
   4243  e017				   ERenderEffects
   4244  e017		       85 02		      sta	WSYNC
   4245  e019		       a9 02		      lda	#BATTLE_BOX_COLOR
   4246  e01b		       85 08		      sta	COLUPF
   4247  e01d		       a9 ff		      lda	#$FF
   4248  e01f		       85 0d		      sta	PF0
   4249  e021		       85 0e		      sta	PF1
   4250  e023		       85 0f		      sta	PF2
   4251  e025
   4252  e025		       20 22 f2 	      jsr	EUpdateEffects
   4253  e028
   4254  e028		       a6 a9		      ldx	temp2
   4255  e02a		       f0 08		      beq	ELine0
   4256  e02c		       c9 01		      cmp	#1
   4257  e02e		       f0 02		      beq	ELine1
   4258  e030				   ELine2
   4259  e030		       85 02		      sta	WSYNC
   4260  e032				   ELine1
   4261  e032		       85 02		      sta	WSYNC
   4262  e034				   ELine0
   4263  e034		       85 02		      sta	WSYNC
   4264  e036		       a9 00		      lda	#0
   4265  e038		       85 0f		      sta	PF2
   4266  e03a		       a9 80		      lda	#$80
   4267  e03c		       85 0e		      sta	PF1
   4268  e03e
   4269  e03e				   ERenderEnemies
   4270  e03e		       a9 00		      lda	#0
   4271  e040		       85 aa		      sta	temp3	;Will be used to hold the index of the next enemy to render
   4272  e042		       a2 4d		      ldx	#77
   4273  e044		       86 a8		      stx	temp1	;Will be used to hold the total height of the battle box, so this number can be tuned.
   4274  e046		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4275  e049
   4276  e049				   EGoToEAfterRenderingEnemies
   4277  e049		       4c 25 f1 	      jmp	EAfterRenderingEnemies
   4278  e04c
   4279  e04c				   EEnemyRenderingLoop
   4280  e04c		       a6 aa		      ldx	temp3	;Get the current index into the enemyID list
   4281  e04e		       e0 04		      cpx	#4
   4282  e050		       f0 f7		      beq	EGoToEAfterRenderingEnemies	;All enemies have been rendered, stop the rendering routine
   4283  e052		       b5 d6		      lda	enemyHP,x
   4284  e054		       c9 00		      cmp	#0
   4285  e056		       d0 14		      bne	ERenderEnemy
   4286  e058							;If the current enemy is dead, delay the requisite amount of scanlines...
   4287  e058		       e8		      inx
   4288  e059		       86 aa		      stx	temp3
   4289  e05b		       a2 13		      ldx	#19
   4290  e05d				   EDrawBlankEnemyLoop
   4291  e05d		       85 02		      sta	WSYNC
   4292  e05f		       ca		      dex
   4293  e060		       d0 fb		      bne	EDrawBlankEnemyLoop
   4294  e062		       a5 a8		      lda	temp1
   4295  e064		       38		      sec
   4296  e065		       e9 13		      sbc	#19
   4297  e067		       85 a8		      sta	temp1
   4298  e069		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4299  e06c				   ERenderEnemy
   4300  e06c		       b5 da		      lda	enemyID,x
   4301  e06e		       29 3f		      and	#$3F
   4302  e070		       aa		      tax
   4303  e071		       bd 00 ff 	      lda	EEnemySizes,x
   4304  e074		       f0 07		      beq	EPrepSmallEnemy
   4305  e076		       c9 01		      cmp	#1
   4306  e078		       f0 2d		      beq	EPrepMediumEnemy
   4307  e07a		       4c e1 f0 	      jmp	EPrepLargeEnemy
   4308  e07d				   EPrepSmallEnemy
   4309  e07d		       bd 03 fe 	      lda	EEnemyGraphicsHighLookup,x
   4310  e080		       85 b2		      sta	tempPointer1+1
   4311  e082		       bd 00 fe 	      lda	EEnemyGraphicsLowLookup,x
   4312  e085		       85 b1		      sta	tempPointer1
   4313  e087		       bd 09 fe 	      lda	EEnemyColorsHighLookup,x
   4314  e08a		       85 ae		      sta	tempPointer5
   4315  e08c		       bd 06 fe 	      lda	EEnemyColorsLowLookup,x
   4316  e08f		       85 ad		      sta	temp5
   4317  e091		       ea		      nop
   4318  e092		       ea		      nop
   4319  e093		       85 02		      sta	WSYNC
   4320  e095		       20 32 f1 	      jsr	EDrawSmallEnemy
   4321  e098
   4322  e098		       a6 aa		      ldx	temp3
   4323  e09a		       e8		      inx
   4324  e09b		       86 aa		      stx	temp3
   4325  e09d		       a5 a8		      lda	temp1
   4326  e09f		       38		      sec
   4327  e0a0		       e9 13		      sbc	#19
   4328  e0a2		       85 a8		      sta	temp1
   4329  e0a4		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4330  e0a7				   EPrepMediumEnemy
   4331  e0a7		       bd 03 fe 	      lda	EEnemyGraphicsHighLookup,x
   4332  e0aa		       85 b2		      sta	tempPointer1+1
   4333  e0ac		       85 b4		      sta	tempPointer2+1
   4334  e0ae		       bd 00 fe 	      lda	EEnemyGraphicsLowLookup,x
   4335  e0b1		       85 b3		      sta	tempPointer2
   4336  e0b3		       18		      clc
   4337  e0b4		       69 10		      adc	#16
   4338  e0b6		       85 b1		      sta	tempPointer1
   4339  e0b8		       bd 09 fe 	      lda	EEnemyColorsHighLookup,x
   4340  e0bb		       85 ae		      sta	tempPointer5
   4341  e0bd		       85 b0		      sta	tempPointer6
   4342  e0bf		       bd 06 fe 	      lda	EEnemyColorsLowLookup,x
   4343  e0c2		       85 af		      sta	temp6
   4344  e0c4		       69 10		      adc	#16
   4345  e0c6		       85 ad		      sta	temp5
   4346  e0c8		       85 02		      sta	WSYNC
   4347  e0ca		       85 02		      sta	WSYNC
   4348  e0cc		       20 60 f1 	      jsr	EDrawMediumEnemy
   4349  e0cf		       85 02		      sta	WSYNC
   4350  e0d1		       a6 aa		      ldx	temp3
   4351  e0d3		       e8		      inx
   4352  e0d4		       e8		      inx
   4353  e0d5		       86 aa		      stx	temp3
   4354  e0d7		       a5 a8		      lda	temp1
   4355  e0d9		       38		      sec
   4356  e0da		       e9 26		      sbc	#38
   4357  e0dc		       85 a8		      sta	temp1
   4358  e0de		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4359  e0e1				   EPrepLargeEnemy
   4360  e0e1		       bd 03 fe 	      lda	EEnemyGraphicsHighLookup,x
   4361  e0e4		       85 b2		      sta	tempPointer1+1
   4362  e0e6		       85 b4		      sta	tempPointer2+1
   4363  e0e8		       85 b6		      sta	tempPointer3+1
   4364  e0ea		       85 ac		      sta	tempPointer4
   4365  e0ec		       bd 00 fe 	      lda	EEnemyGraphicsLowLookup,x
   4366  e0ef		       85 ab		      sta	temp4
   4367  e0f1		       18		      clc
   4368  e0f2		       69 20		      adc	#32
   4369  e0f4		       85 b5		      sta	tempPointer3
   4370  e0f6		       69 20		      adc	#32
   4371  e0f8		       85 b3		      sta	tempPointer2
   4372  e0fa		       69 20		      adc	#32
   4373  e0fc		       85 b1		      sta	tempPointer1
   4374  e0fe		       bd 09 fe 	      lda	EEnemyColorsHighLookup,x
   4375  e101		       85 ae		      sta	tempPointer5
   4376  e103		       85 b0		      sta	tempPointer6
   4377  e105		       bd 06 fe 	      lda	EEnemyColorsLowLookup,x
   4378  e108		       85 af		      sta	temp6
   4379  e10a		       69 20		      adc	#32
   4380  e10c		       85 ad		      sta	temp5
   4381  e10e		       85 02		      sta	WSYNC
   4382  e110		       20 a8 f1 	      jsr	EDrawLargeEnemy
   4383  e113		       a6 aa		      ldx	temp3
   4384  e115		       e8		      inx
   4385  e116		       e8		      inx
   4386  e117		       e8		      inx
   4387  e118		       e8		      inx
   4388  e119		       86 aa		      stx	temp3
   4389  e11b		       a5 a8		      lda	temp1
   4390  e11d		       38		      sec
   4391  e11e		       e9 45		      sbc	#69
   4392  e120		       85 a8		      sta	temp1
   4393  e122		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4394  e125				   EAfterRenderingEnemies
   4395  e125		       a6 a8		      ldx	temp1
   4396  e127		       e8		      inx
   4397  e128				   EAfterRenderingEnemiesLoop
   4398  e128		       85 02		      sta	WSYNC
   4399  e12a		       ca		      dex
   4400  e12b		       d0 fb		      bne	EAfterRenderingEnemiesLoop
   4401  e12d		       86 09		      stx	COLUBK	;Clear any spellcasting effects that may be present
   4402  e12f		       4c c0 ff 	      jmp	EGoToDrawingBattleText
   4403  e132
   4404  e132				   EDrawSmallEnemy SUBROUTINE		;This subroutine is used for drawing enemies that are 8x8 pixels i size. Graphical information is interpreted from tempPointer1, and color information is interpreted from tempPointer5
   4405  e132		       20 a7 f1 	      jsr	ESpinWheels
   4406  e135		       20 a7 f1 	      jsr	ESpinWheels
   4407  e138		       20 a7 f1 	      jsr	ESpinWheels
   4408  e13b		       ea		      nop
   4409  e13c		       85 10		      sta	RESP0
   4410  e13e		       a0 08		      ldy	#8
   4411  e140		       a9 00		      lda	#0
   4412  e142		       85 04		      sta	NUSIZ0
   4413  e144		       85 05		      sta	NUSIZ1
   4414  e146				   .EDrawSmallEnemyLoop
   4415  e146		       88		      dey
   4416  e147		       85 02		      sta	WSYNC
   4417  e149		       30 0d		      bmi	.EDoneDrawingSmallEnemy
   4418  e14b		       b1 b1		      lda	(tempPointer1),y
   4419  e14d		       85 1b		      sta	GRP0
   4420  e14f		       b1 ad		      lda	(temp5),y
   4421  e151		       85 06		      sta	COLUP0
   4422  e153		       85 02		      sta	WSYNC
   4423  e155		       4c 46 f1 	      jmp	.EDrawSmallEnemyLoop
   4424  e158				   .EDoneDrawingSmallEnemy
   4425  e158		       c8		      iny
   4426  e159		       84 1b		      sty	GRP0
   4427  e15b		       84 06		      sty	COLUP0
   4428  e15d		       84 20		      sty	HMP0
   4429  e15f		       60		      rts
   4430  e160
   4431  e160				   EDrawMediumEnemy SUBROUTINE		;This subroutine is used for drawing enemies that are 16x16 pixels in size. Graphical information is interpreted from tempPointer1 and tempPointer2, color information is interpreted from tempPointer5 and tempPointer6.
   4432  e160		       a9 10		      lda	#$10	;Moves one pixel to the left
   4433  e162		       85 21		      sta	HMP1
   4434  e164		       20 a7 f1 	      jsr	ESpinWheels
   4435  e167		       20 a7 f1 	      jsr	ESpinWheels
   4436  e16a		       ea		      nop
   4437  e16b		       ea		      nop
   4438  e16c		       ea		      nop
   4439  e16d		       ea		      nop
   4440  e16e		       ea		      nop
   4441  e16f		       85 10		      sta	RESP0
   4442  e171		       85 11		      sta	RESP1
   4443  e173		       20 a7 f1 	      jsr	ESpinWheels
   4444  e176		       ea		      nop
   4445  e177		       ea		      nop
   4446  e178		       ea		      nop
   4447  e179		       ea		      nop
   4448  e17a							;sta WSYNC
   4449  e17a		       85 2a		      sta	HMOVE	;Need to make this happen on cycle 73 exactly...
   4450  e17c		       a0 10		      ldy	#16	;Height of the enemy
   4451  e17e		       a9 00		      lda	#0	;No duplication
   4452  e180		       85 04		      sta	NUSIZ0
   4453  e182		       85 05		      sta	NUSIZ1
   4454  e184				   .EDrawMediumEnemyLoop
   4455  e184		       88		      dey
   4456  e185		       85 02		      sta	WSYNC
   4457  e187		       30 15		      bmi	.EDoneDrawingMediumEnemy
   4458  e189		       b1 b1		      lda	(tempPointer1),y
   4459  e18b		       85 1b		      sta	GRP0
   4460  e18d		       b1 b3		      lda	(tempPointer2),y
   4461  e18f		       85 1c		      sta	GRP1
   4462  e191		       b1 ad		      lda	(temp5),y
   4463  e193		       85 06		      sta	COLUP0
   4464  e195		       b1 af		      lda	(temp6),y
   4465  e197		       85 07		      sta	COLUP1
   4466  e199		       85 02		      sta	WSYNC
   4467  e19b		       4c 84 f1 	      jmp	.EDrawMediumEnemyLoop
   4468  e19e				   .EDoneDrawingMediumEnemy
   4469  e19e		       c8		      iny
   4470  e19f		       84 1b		      sty	GRP0
   4471  e1a1		       84 1c		      sty	GRP1
   4472  e1a3		       84 06		      sty	COLUP0
   4473  e1a5		       84 07		      sty	COLUP1
   4474  e1a7				   ESpinWheels
   4475  e1a7		       60		      rts
   4476  e1a8
   4477  e1a8				   EDrawLargeEnemy SUBROUTINE		; This subroutine is used for drawing enemies that are 32x32 in size. Graphical information is pulled from tempPointers1-4, color information for columns 0 and 2 is pulled from tempPointer5, and color information for columns 1 and 3 is pulled from tempPointer6.
   4478  e1a8		       a9 10		      lda	#$10	;Moves one pixel to the left
   4479  e1aa		       85 21		      sta	HMP1
   4480  e1ac		       20 a7 f1 	      jsr	ESpinWheels
   4481  e1af		       20 a7 f1 	      jsr	ESpinWheels
   4482  e1b2		       ea		      nop
   4483  e1b3		       ea		      nop
   4484  e1b4		       c5 a8		      cmp	temp1
   4485  e1b6		       85 10		      sta	RESP0
   4486  e1b8		       85 11		      sta	RESP1
   4487  e1ba		       85 02		      sta	WSYNC
   4488  e1bc		       20 a7 f1 	      jsr	ESpinWheels
   4489  e1bf		       20 a7 f1 	      jsr	ESpinWheels
   4490  e1c2		       20 a7 f1 	      jsr	ESpinWheels
   4491  e1c5		       20 a7 f1 	      jsr	ESpinWheels
   4492  e1c8		       20 a7 f1 	      jsr	ESpinWheels
   4493  e1cb		       e4 a8		      cpx	temp1
   4494  e1cd		       e4 a8		      cpx	temp1
   4495  e1cf		       e4 a8		      cpx	temp1
   4496  e1d1							;sta WSYNC
   4497  e1d1		       85 2a		      sta	HMOVE	;need to lose 5
   4498  e1d3		       a0 20		      ldy	#32
   4499  e1d5		       a9 01		      lda	#1	;Two copies close
   4500  e1d7		       85 04		      sta	NUSIZ0
   4501  e1d9		       85 05		      sta	NUSIZ1
   4502  e1db				   .EDrawLargeEnemyLoop
   4503  e1db		       88		      dey
   4504  e1dc		       85 02		      sta	WSYNC
   4505  e1de		       30 38		      bmi	.EDoneDrawingLargeEnemy
   4506  e1e0		       b1 b1		      lda	(tempPointer1),y
   4507  e1e2		       85 1b		      sta	GRP0
   4508  e1e4		       b1 b3		      lda	(tempPointer2),y
   4509  e1e6		       85 1c		      sta	GRP1
   4510  e1e8		       b1 ad		      lda	(temp5),y
   4511  e1ea		       85 06		      sta	COLUP0
   4512  e1ec		       b1 af		      lda	(temp6),y
   4513  e1ee		       85 07		      sta	COLUP1
   4514  e1f0		       b1 b5		      lda	(tempPointer3),y
   4515  e1f2		       aa		      tax
   4516  e1f3		       b1 ab		      lda	(temp4),y
   4517  e1f5		       86 1b		      stx	GRP0
   4518  e1f7		       85 1c		      sta	GRP1
   4519  e1f9		       85 02		      sta	WSYNC
   4520  e1fb		       ea		      nop
   4521  e1fc		       b1 b1		      lda	(tempPointer1),y
   4522  e1fe		       85 1b		      sta	GRP0
   4523  e200		       b1 b3		      lda	(tempPointer2),y
   4524  e202		       85 1c		      sta	GRP1
   4525  e204		       b1 ad		      lda	(temp5),y
   4526  e206		       85 06		      sta	COLUP0
   4527  e208		       b1 af		      lda	(temp6),y
   4528  e20a		       85 07		      sta	COLUP1
   4529  e20c		       b1 b5		      lda	(tempPointer3),y
   4530  e20e		       aa		      tax
   4531  e20f		       b1 ab		      lda	(temp4),y
   4532  e211		       86 1b		      stx	GRP0
   4533  e213		       85 1c		      sta	GRP1
   4534  e215		       4c db f1 	      jmp	.EDrawLargeEnemyLoop
   4535  e218				   .EDoneDrawingLargeEnemy
   4536  e218		       c8		      iny
   4537  e219		       84 1b		      sty	GRP0
   4538  e21b		       84 1c		      sty	GRP1
   4539  e21d		       84 06		      sty	COLUP0
   4540  e21f		       84 07		      sty	COLUP1
   4541  e221		       60		      rts
   4542  e222
   4543  e222				   EUpdateEffects SUBROUTINE
   4544  e222		       a9 02		      lda	#2
   4545  e224		       85 a9		      sta	temp2
   4546  e226		       a5 ef		      lda	currentEffect
   4547  e228		       d0 01		      bne	.EContinue
   4548  e22a		       60		      rts
   4549  e22b				   .EContinue
   4550  e22b		       a6 f1		      ldx	effectCountdown
   4551  e22d		       ca		      dex
   4552  e22e		       86 f1		      stx	effectCountdown
   4553  e230		       d0 0d		      bne	.ESkipEffectCounterDecrement
   4554  e232		       aa		      tax
   4555  e233		       bd 14 f0 	      lda	EEffectFrequency,x
   4556  e236		       85 f1		      sta	effectCountdown
   4557  e238		       a4 f0		      ldy	effectCounter
   4558  e23a		       f0 1e		      beq	.EEndEffect
   4559  e23c		       88		      dey
   4560  e23d		       84 f0		      sty	effectCounter
   4561  e23f				   .ESkipEffectCounterDecrement
   4562  e23f		       a6 ef		      ldx	currentEffect
   4563  e241		       e0 01		      cpx	#$1	;party member highlighting, which is the only effect handled outside this bank
   4564  e243		       f0 22		      beq	.EHighlightEffect
   4565  e245				   .ENormalEffect
   4566  e245		       bd 0b f0 	      lda	EEffectLowLookup,x
   4567  e248		       85 b1		      sta	tempPointer1
   4568  e24a		       bd 0e f0 	      lda	EEffectHighLookup,x
   4569  e24d		       85 b2		      sta	tempPointer1+1
   4570  e24f		       a4 f0		      ldy	effectCounter
   4571  e251		       b1 b1		      lda	(tempPointer1),y	;Get the current background color for this effect and effectCounter
   4572  e253		       85 09		      sta	COLUBK
   4573  e255		       a9 01		      lda	#1
   4574  e257		       85 a9		      sta	temp2	;Don't use an extra WSYNC if called during enemy rendering
   4575  e259		       60		      rts
   4576  e25a				   .EEndEffect
   4577  e25a		       84 ef		      sty	currentEffect
   4578  e25c		       84 f0		      sty	effectCounter
   4579  e25e		       84 f1		      sty	effectCountdown
   4580  e260		       84 09		      sty	COLUBK
   4581  e262		       a9 01		      lda	#1
   4582  e264		       85 a9		      sta	temp2
   4583  e266		       60		      rts
   4584  e267				   .EHighlightEffect
   4585  e267		       a9 01		      lda	#1
   4586  e269		       85 f0		      sta	effectCounter
   4587  e26b		       85 a9		      sta	temp2
   4588  e26d		       60		      rts
   4589  e26e
   4590  ec00					      ORG	$EC00
   4591  ec00					      RORG	$FC00
   4592  ec00
   4593  ec00				   SmallTestEnemyGraphics
   4594  ec00		       7e		      .byte.b	%01111110
   4595  ec01		       db		      .byte.b	%11011011
   4596  ec02		       a5		      .byte.b	%10100101
   4597  ec03		       81		      .byte.b	%10000001
   4598  ec04		       a5		      .byte.b	%10100101
   4599  ec05		       81		      .byte.b	%10000001
   4600  ec06		       c3		      .byte.b	%11000011
   4601  ec07		       7e		      .byte.b	%01111110
   4602  ec08				   MediumTestEnemyGraphics
   4603  ec08		       18		      .byte.b	%00011000
   4604  ec09		       18		      .byte.b	%00011000
   4605  ec0a		       18		      .byte.b	%00011000
   4606  ec0b		       18		      .byte.b	%00011000
   4607  ec0c		       18		      .byte.b	%00011000
   4608  ec0d		       18		      .byte.b	%00011000
   4609  ec0e		       7e		      .byte.b	%01111110
   4610  ec0f		       00		      .byte.b	%00000000
   4611  ec10		       00		      .byte.b	%00000000
   4612  ec11		       7e		      .byte.b	%01111110
   4613  ec12		       40		      .byte.b	%01000000
   4614  ec13		       40		      .byte.b	%01000000
   4615  ec14		       78		      .byte.b	%01111000
   4616  ec15		       40		      .byte.b	%01000000
   4617  ec16		       40		      .byte.b	%01000000
   4618  ec17		       7e		      .byte.b	%01111110
   4619  ec18		       78		      .byte.b	%01111000
   4620  ec19		       04		      .byte.b	%00000100
   4621  ec1a		       04		      .byte.b	%00000100
   4622  ec1b		       38		      .byte.b	%00111000
   4623  ec1c		       40		      .byte.b	%01000000
   4624  ec1d		       40		      .byte.b	%01000000
   4625  ec1e		       3c		      .byte.b	%00111100
   4626  ec1f		       00		      .byte.b	%00000000
   4627  ec20		       00		      .byte.b	%00000000
   4628  ec21		       18		      .byte.b	%00011000
   4629  ec22		       18		      .byte.b	%00011000
   4630  ec23		       18		      .byte.b	%00011000
   4631  ec24		       18		      .byte.b	%00011000
   4632  ec25		       18		      .byte.b	%00011000
   4633  ec26		       18		      .byte.b	%00011000
   4634  ec27		       7e		      .byte.b	%01111110
   4635  ec28
   4636  ec28				   SmallTestEnemyColors
   4637  ec28		       9e		      .byte.b	$9e
   4638  ec29		       9c		      .byte.b	$9c
   4639  ec2a		       9a		      .byte.b	$9a
   4640  ec2b		       98		      .byte.b	$98
   4641  ec2c		       96		      .byte.b	$96
   4642  ec2d		       94		      .byte.b	$94
   4643  ec2e		       82		      .byte.b	$82
   4644  ec2f		       80		      .byte.b	$80
   4645  ec30				   MediumTestEnemyColors
   4646  ec30		       6c		      .byte.b	$6c
   4647  ec31		       6a		      .byte.b	$6a
   4648  ec32		       68		      .byte.b	$68
   4649  ec33		       66		      .byte.b	$66
   4650  ec34		       64		      .byte.b	$64
   4651  ec35		       62		      .byte.b	$62
   4652  ec36		       60		      .byte.b	$60
   4653  ec37		       00		      .byte.b	$0
   4654  ec38		       ce		      .byte.b	$ce
   4655  ec39		       cc		      .byte.b	$cc
   4656  ec3a		       ca		      .byte.b	$ca
   4657  ec3b		       c8		      .byte.b	$c8
   4658  ec3c		       c6		      .byte.b	$c6
   4659  ec3d		       c4		      .byte.b	$c4
   4660  ec3e		       c2		      .byte.b	$c2
   4661  ec3f		       c0		      .byte.b	$c0
   4662  ec40		       4e		      .byte.b	$4e
   4663  ec41		       4c		      .byte.b	$4c
   4664  ec42		       48		      .byte.b	$48
   4665  ec43		       46		      .byte.b	$46
   4666  ec44		       44		      .byte.b	$44
   4667  ec45		       42		      .byte.b	$42
   4668  ec46		       40		      .byte.b	$40
   4669  ec47		       00		      .byte.b	$0
   4670  ec48		       9e		      .byte.b	$9e
   4671  ec49		       9c		      .byte.b	$9c
   4672  ec4a		       8a		      .byte.b	$8a
   4673  ec4b		       8a		      .byte.b	$8a
   4674  ec4c		       88		      .byte.b	$88
   4675  ec4d		       86		      .byte.b	$86
   4676  ec4e		       82		      .byte.b	$82
   4677  ec4f		       80		      .byte.b	$80
   4678  ec50
   4679  ed00					      ORG	$ED00
   4680  ed00					      RORG	$FD00
   4681  ed00
   4682  ed00				   LargeTestEnemyGraphics
   4683  ed00		       80		      .byte.b	%10000000
   4684  ed01		       80		      .byte.b	%10000000
   4685  ed02		       80		      .byte.b	%10000000
   4686  ed03		       80		      .byte.b	%10000000
   4687  ed04		       80		      .byte.b	%10000000
   4688  ed05		       80		      .byte.b	%10000000
   4689  ed06		       80		      .byte.b	%10000000
   4690  ed07		       80		      .byte.b	%10000000
   4691  ed08		       80		      .byte.b	%10000000
   4692  ed09		       80		      .byte.b	%10000000
   4693  ed0a		       80		      .byte.b	%10000000
   4694  ed0b		       80		      .byte.b	%10000000
   4695  ed0c		       80		      .byte.b	%10000000
   4696  ed0d		       80		      .byte.b	%10000000
   4697  ed0e		       80		      .byte.b	%10000000
   4698  ed0f		       fe		      .byte.b	%11111110
   4699  ed10		       00		      .byte.b	%00000000
   4700  ed11		       00		      .byte.b	%00000000
   4701  ed12		       00		      .byte.b	%00000000
   4702  ed13		       00		      .byte.b	%00000000
   4703  ed14		       fc		      .byte.b	%11111100
   4704  ed15		       00		      .byte.b	%00000000
   4705  ed16		       00		      .byte.b	%00000000
   4706  ed17		       00		      .byte.b	%00000000
   4707  ed18		       00		      .byte.b	%00000000
   4708  ed19		       00		      .byte.b	%00000000
   4709  ed1a		       00		      .byte.b	%00000000
   4710  ed1b		       00		      .byte.b	%00000000
   4711  ed1c		       00		      .byte.b	%00000000
   4712  ed1d		       00		      .byte.b	%00000000
   4713  ed1e		       00		      .byte.b	%00000000
   4714  ed1f		       fc		      .byte.b	%11111100
   4715  ed20		       01		      .byte.b	%00000001
   4716  ed21		       01		      .byte.b	%00000001
   4717  ed22		       01		      .byte.b	%00000001
   4718  ed23		       01		      .byte.b	%00000001
   4719  ed24		       01		      .byte.b	%00000001
   4720  ed25		       01		      .byte.b	%00000001
   4721  ed26		       01		      .byte.b	%00000001
   4722  ed27		       01		      .byte.b	%00000001
   4723  ed28		       01		      .byte.b	%00000001
   4724  ed29		       01		      .byte.b	%00000001
   4725  ed2a		       01		      .byte.b	%00000001
   4726  ed2b		       01		      .byte.b	%00000001
   4727  ed2c		       01		      .byte.b	%00000001
   4728  ed2d		       01		      .byte.b	%00000001
   4729  ed2e		       01		      .byte.b	%00000001
   4730  ed2f		       7f		      .byte.b	%01111111
   4731  ed30		       00		      .byte.b	%00000000
   4732  ed31		       00		      .byte.b	%00000000
   4733  ed32		       00		      .byte.b	%00000000
   4734  ed33		       00		      .byte.b	%00000000
   4735  ed34		       3f		      .byte.b	%00111111
   4736  ed35		       20		      .byte.b	%00100000
   4737  ed36		       20		      .byte.b	%00100000
   4738  ed37		       20		      .byte.b	%00100000
   4739  ed38		       20		      .byte.b	%00100000
   4740  ed39		       20		      .byte.b	%00100000
   4741  ed3a		       3f		      .byte.b	%00111111
   4742  ed3b		       20		      .byte.b	%00100000
   4743  ed3c		       20		      .byte.b	%00100000
   4744  ed3d		       20		      .byte.b	%00100000
   4745  ed3e		       20		      .byte.b	%00100000
   4746  ed3f		       3f		      .byte.b	%00111111
   4747  ed40		       e0		      .byte.b	%11100000
   4748  ed41		       30		      .byte.b	%00110000
   4749  ed42		       18		      .byte.b	%00011000
   4750  ed43		       08		      .byte.b	%00001000
   4751  ed44		       08		      .byte.b	%00001000
   4752  ed45		       08		      .byte.b	%00001000
   4753  ed46		       38		      .byte.b	%00111000
   4754  ed47		       f0		      .byte.b	%11110000
   4755  ed48		       00		      .byte.b	%00000000
   4756  ed49		       00		      .byte.b	%00000000
   4757  ed4a		       00		      .byte.b	%00000000
   4758  ed4b		       00		      .byte.b	%00000000
   4759  ed4c		       00		      .byte.b	%00000000
   4760  ed4d		       00		      .byte.b	%00000000
   4761  ed4e		       18		      .byte.b	%00011000
   4762  ed4f		       f0		      .byte.b	%11110000
   4763  ed50		       00		      .byte.b	%00000000
   4764  ed51		       00		      .byte.b	%00000000
   4765  ed52		       00		      .byte.b	%00000000
   4766  ed53		       00		      .byte.b	%00000000
   4767  ed54		       80		      .byte.b	%10000000
   4768  ed55		       80		      .byte.b	%10000000
   4769  ed56		       80		      .byte.b	%10000000
   4770  ed57		       80		      .byte.b	%10000000
   4771  ed58		       80		      .byte.b	%10000000
   4772  ed59		       80		      .byte.b	%10000000
   4773  ed5a		       80		      .byte.b	%10000000
   4774  ed5b		       80		      .byte.b	%10000000
   4775  ed5c		       80		      .byte.b	%10000000
   4776  ed5d		       80		      .byte.b	%10000000
   4777  ed5e		       80		      .byte.b	%10000000
   4778  ed5f		       fe		      .byte.b	%11111110
   4779  ed60		       1f		      .byte.b	%00011111
   4780  ed61		       30		      .byte.b	%00110000
   4781  ed62		       00		      .byte.b	%00000000
   4782  ed63		       00		      .byte.b	%00000000
   4783  ed64		       00		      .byte.b	%00000000
   4784  ed65		       00		      .byte.b	%00000000
   4785  ed66		       00		      .byte.b	%00000000
   4786  ed67		       0f		      .byte.b	%00001111
   4787  ed68		       18		      .byte.b	%00011000
   4788  ed69		       30		      .byte.b	%00110000
   4789  ed6a		       20		      .byte.b	%00100000
   4790  ed6b		       20		      .byte.b	%00100000
   4791  ed6c		       20		      .byte.b	%00100000
   4792  ed6d		       30		      .byte.b	%00110000
   4793  ed6e		       18		      .byte.b	%00011000
   4794  ed6f		       07		      .byte.b	%00000111
   4795  ed70		       00		      .byte.b	%00000000
   4796  ed71		       00		      .byte.b	%00000000
   4797  ed72		       00		      .byte.b	%00000000
   4798  ed73		       00		      .byte.b	%00000000
   4799  ed74		       01		      .byte.b	%00000001
   4800  ed75		       01		      .byte.b	%00000001
   4801  ed76		       01		      .byte.b	%00000001
   4802  ed77		       01		      .byte.b	%00000001
   4803  ed78		       01		      .byte.b	%00000001
   4804  ed79		       01		      .byte.b	%00000001
   4805  ed7a		       01		      .byte.b	%00000001
   4806  ed7b		       01		      .byte.b	%00000001
   4807  ed7c		       01		      .byte.b	%00000001
   4808  ed7d		       01		      .byte.b	%00000001
   4809  ed7e		       01		      .byte.b	%00000001
   4810  ed7f		       7f		      .byte.b	%01111111
   4811  ed80
   4812  ed80				   LargeTestEnemyColors
   4813  ed80		       c8		      .byte.b	$c8
   4814  ed81		       c8		      .byte.b	$c8
   4815  ed82		       c8		      .byte.b	$c8
   4816  ed83		       c8		      .byte.b	$c8
   4817  ed84		       c8		      .byte.b	$c8
   4818  ed85		       c8		      .byte.b	$c8
   4819  ed86		       c8		      .byte.b	$c8
   4820  ed87		       c8		      .byte.b	$c8
   4821  ed88		       c8		      .byte.b	$c8
   4822  ed89		       c8		      .byte.b	$c8
   4823  ed8a		       c8		      .byte.b	$c8
   4824  ed8b		       c8		      .byte.b	$c8
   4825  ed8c		       c8		      .byte.b	$c8
   4826  ed8d		       c8		      .byte.b	$c8
   4827  ed8e		       c8		      .byte.b	$c8
   4828  ed8f		       c8		      .byte.b	$c8
   4829  ed90		       c8		      .byte.b	$c8
   4830  ed91		       00		      .byte.b	$0
   4831  ed92		       00		      .byte.b	$0
   4832  ed93		       00		      .byte.b	$0
   4833  ed94		       9c		      .byte.b	$9c
   4834  ed95		       9c		      .byte.b	$9c
   4835  ed96		       9c		      .byte.b	$9c
   4836  ed97		       9c		      .byte.b	$9c
   4837  ed98		       9c		      .byte.b	$9c
   4838  ed99		       9c		      .byte.b	$9c
   4839  ed9a		       9c		      .byte.b	$9c
   4840  ed9b		       9c		      .byte.b	$9c
   4841  ed9c		       9c		      .byte.b	$9c
   4842  ed9d		       9c		      .byte.b	$9c
   4843  ed9e		       9c		      .byte.b	$9c
   4844  ed9f		       9c		      .byte.b	$9c
   4845  eda0		       c0		      .byte.b	$c0
   4846  eda1		       c0		      .byte.b	$c0
   4847  eda2		       c0		      .byte.b	$c0
   4848  eda3		       c0		      .byte.b	$c0
   4849  eda4		       c0		      .byte.b	$c0
   4850  eda5		       c0		      .byte.b	$c0
   4851  eda6		       c0		      .byte.b	$c0
   4852  eda7		       c0		      .byte.b	$c0
   4853  eda8		       c0		      .byte.b	$c0
   4854  eda9		       c0		      .byte.b	$c0
   4855  edaa		       c0		      .byte.b	$c0
   4856  edab		       c0		      .byte.b	$c0
   4857  edac		       c0		      .byte.b	$c0
   4858  edad		       c0		      .byte.b	$c0
   4859  edae		       c0		      .byte.b	$c0
   4860  edaf		       c0		      .byte.b	$c0
   4861  edb0		       00		      .byte.b	$0
   4862  edb1		       00		      .byte.b	$0
   4863  edb2		       00		      .byte.b	$0
   4864  edb3		       00		      .byte.b	$0
   4865  edb4		       90		      .byte.b	$90
   4866  edb5		       90		      .byte.b	$90
   4867  edb6		       90		      .byte.b	$90
   4868  edb7		       90		      .byte.b	$90
   4869  edb8		       90		      .byte.b	$90
   4870  edb9		       90		      .byte.b	$90
   4871  edba		       90		      .byte.b	$90
   4872  edbb		       90		      .byte.b	$90
   4873  edbc		       90		      .byte.b	$90
   4874  edbd		       90		      .byte.b	$90
   4875  edbe		       90		      .byte.b	$90
   4876  edbf		       90		      .byte.b	$90
   4877  edc0
   4878  ee00					      ORG	$EE00
   4879  ee00					      RORG	$FE00
   4880  ee00
   4881  ee00				   EEnemyGraphicsLowLookup		;Stores the low bytes of the pointers to enemy graphics ordered by enemyID
   4882  ee00		       00		      .byte.b	(SmallTestEnemyGraphics & $FF)
   4883  ee01		       08		      .byte.b	(MediumTestEnemyGraphics & $FF)
   4884  ee02		       00		      .byte.b	(LargeTestEnemyGraphics & $FF)
   4885  ee03				   EEnemyGraphicsHighLookup		;Stores the high bytes of the pointers to enemy graphics ordered by enemyID
   4886  ee03		       fc		      .byte.b	(SmallTestEnemyGraphics >> 8 & $FF)
   4887  ee04		       fc		      .byte.b	(MediumTestEnemyGraphics >> 8 & $FF)
   4888  ee05		       fd		      .byte.b	(LargeTestEnemyGraphics >> 8 & $FF)
   4889  ee06				   EEnemyColorsLowLookup		;Stores the low bytes of the pointers to enemy color information ordered by enemyID
   4890  ee06		       28		      .byte.b	(SmallTestEnemyColors & $FF)
   4891  ee07		       30		      .byte.b	(MediumTestEnemyColors & $FF)
   4892  ee08		       80		      .byte.b	(LargeTestEnemyColors & $FF)
   4893  ee09				   EEnemyColorsHighLookup		;Stores the high bytes of the pointers to enemy color information ordered by enemyID
   4894  ee09		       fc		      .byte.b	(SmallTestEnemyColors >> 8 & $FF)
   4895  ee0a		       fc		      .byte.b	(MediumTestEnemyColors >> 8 & $FF)
   4896  ee0b		       fd		      .byte.b	(LargeTestEnemyColors >> 8 & $FF)
   4897  ee0c
   4898  ef00					      ORG	$EF00
   4899  ef00					      RORG	$FF00
   4900  ef00
   4901  ef00				   EEnemySizes		;Stores the size of each enemy by enemyID. 0 if the enemy is 16x16, 1 if the enemy is 32x32
   4902  ef00		       00		      .byte.b	0
   4903  ef01		       01		      .byte.b	1
   4904  ef02		       02		      .byte.b	2
   4905  ef03
   4906  ef03
   4907  efc0					      ORG	$EFC0
   4908  efc0					      RORG	$FFC0
   4909  efc0
   4910  efc0				   EGoToDrawingBattleText
   4911  efc0		       8d f6 1f 	      sta	$1FF6	;Go to bank 0
   4912  efc3		       ea		      nop
   4913  efc4		       ea		      nop
   4914  efc5		       ea		      nop
   4915  efc6				   ECatchFromDrawingBox
   4916  efc6		       ea		      nop
   4917  efc7		       ea		      nop
   4918  efc8		       ea		      nop
   4919  efc9		       4c 17 f0 	      jmp	ERenderEffects
   4920  efcc
   4921  efd0					      ORG	$EFD0
   4922  efd0					      RORG	$FFD0
   4923  efd0
   4924  efd0				   ECatchFromMazeLogic
   4925  efd0		       ea		      nop
   4926  efd1		       ea		      nop
   4927  efd2		       ea		      nop
   4928  efd3		       20 22 f2 	      jsr	EUpdateEffects
   4929  efd6		       8d f7 1f 	      sta	$1FF7	;Go to bank 1
   4930  efd9		       ea		      nop
   4931  efda		       ea		      nop
   4932  efdb		       ea		      nop
   4933  efdc
   4934  effa					      ORG	$EFFA
   4935  effa					      RORG	$FFFA
   4936  effa
   4937  effa							;NMI, IRQ, and RESET information
   4938  effa		       00 f0		      .word.w	EReset
   4939  effc		       00 f0		      .word.w	EReset
   4940  effe		       00 f0		      .word.w	EReset
   4941  f000
   4942  f000							;BANK 3 - CONTAINS SOUND EFFECT ROUTINES AND DATA
   4943  f000
   4944  f000					      ORG	$F000
   4945  f000					      RORG	$F000
   4946  f000
   4947  f000				   SReset
   4948  f000		       8d f7 1f 	      sta	$1FF7	;Go to bank 1, the correct startup bank
   4949  f003
   4950  f003				   SUpdateSound
   4951  f003		       60		      rts
   4952  f004
   4953  f004				   SGenerateMazeData SUBROUTINE		;Will use the iterative algorithm I designed in order to generate a maze of size specified by #MAZE_WIDTH.
   4954  f004							;Make sure to clear maze data before use.
   4955  f004							;temp1 will act as X, temp2 as Y, temp3 as direction, temp4 as squaresRemaining, temp5 as the squaresRemaining generator
   4956  f004		       a9 10		      lda	#$10
   4957  f006		       85 ad		      sta	temp5
   4958  f008		       4a		      lsr
   4959  f009		       85 ab		      sta	temp4
   4960  f00b				   .SMazeGenerationLoop
   4961  f00b		       a9 01		      lda	#1
   4962  f00d		       85 ac		      sta	tempPointer4	;inlineExit
   4963  f00f		       85 ae		      sta	tempPointer5	;adjacentExit
   4964  f011
   4965  f011		       a6 a8		      ldx	temp1
   4966  f013		       a4 a9		      ldy	temp2
   4967  f015
   4968  f015		       a5 ab		      lda	temp4
   4969  f017		       c9 01		      cmp	#1
   4970  f019		       d0 1a		      bne	.SNotCorner
   4971  f01b		       a5 aa		      lda	temp3
   4972  f01d		       f0 10		      beq	.SEastCorner
   4973  f01f		       c9 02		      cmp	#2
   4974  f021		       f0 0b		      beq	.SWestCorner
   4975  f023		       c9 03		      cmp	#3
   4976  f025		       f0 01		      beq	.SNorthCorner
   4977  f027				   .SSouthCorner
   4978  f027		       ca		      dex
   4979  f028				   .SNorthCorner
   4980  f028		       20 e6 f0 	      jsr	SRemoveVEdge
   4981  f02b		       4c af f0 	      jmp	.SPrepareForNextIteration
   4982  f02e				   .SWestCorner
   4983  f02e		       88		      dey
   4984  f02f				   .SEastCorner
   4985  f02f		       20 ea f0 	      jsr	SRemoveHEdge
   4986  f032		       4c af f0 	      jmp	.SPrepareForNextIteration
   4987  f035
   4988  f035				   .SNotCorner
   4989  f035		       20 f9 f2 	      jsr	SRandom	;The new random number is in A after returning
   4990  f038		       29 01		      and	#$01
   4991  f03a		       d0 02		      bne	.SSkipInlineExit
   4992  f03c		       85 ac		      sta	tempPointer4	;A is 0
   4993  f03e				   .SSkipInlineExit
   4994  f03e		       20 f9 f2 	      jsr	SRandom
   4995  f041		       29 01		      and	#$01
   4996  f043		       d0 02		      bne	.SSkipAdjacentExit
   4997  f045		       85 ae		      sta	tempPointer5	;A is 0
   4998  f047				   .SSkipAdjacentExit
   4999  f047		       25 ac		      and	tempPointer4
   5000  f049		       f0 0f		      beq	.SAtLeast1Exit
   5001  f04b		       20 f9 f2 	      jsr	SRandom
   5002  f04e		       29 01		      and	#$01
   5003  f050		       f0 06		      beq	.SSaveInline
   5004  f052				   .SSaveAdjacent
   5005  f052		       a9 00		      lda	#0
   5006  f054		       85 ae		      sta	tempPointer5
   5007  f056		       f0 02		      beq	.SAtLeast1Exit
   5008  f058				   .SSaveInline
   5009  f058		       85 ac		      sta	tempPointer4
   5010  f05a				   .SAtLeast1Exit
   5011  f05a		       a5 ac		      lda	tempPointer4
   5012  f05c		       d0 26		      bne	.SNoInlineExit
   5013  f05e		       a5 aa		      lda	temp3
   5014  f060		       f0 0f		      beq	.SEastInline
   5015  f062		       c9 01		      cmp	#$1
   5016  f064		       f0 11		      beq	.SSouthInline
   5017  f066		       c9 02		      cmp	#$2
   5018  f068		       f0 13		      beq	.SWestInline
   5019  f06a				   .SNorthInline
   5020  f06a		       88		      dey
   5021  f06b		       20 ea f0 	      jsr	SRemoveHEdge
   5022  f06e		       4c 84 f0 	      jmp	.SNoInlineExit
   5023  f071				   .SEastInline
   5024  f071		       20 e6 f0 	      jsr	SRemoveVEdge
   5025  f074		       4c 84 f0 	      jmp	.SNoInlineExit
   5026  f077				   .SSouthInline
   5027  f077		       20 ea f0 	      jsr	SRemoveHEdge
   5028  f07a		       4c 84 f0 	      jmp	.SNoInlineExit
   5029  f07d				   .SWestInline
   5030  f07d		       ca		      dex
   5031  f07e		       20 e6 f0 	      jsr	SRemoveVEdge
   5032  f081		       4c 84 f0 	      jmp	.SNoInlineExit
   5033  f084				   .SNoInlineExit
   5034  f084		       a6 a8		      ldx	temp1
   5035  f086		       a4 a9		      ldy	temp2
   5036  f088
   5037  f088		       a5 ae		      lda	tempPointer5
   5038  f08a		       d0 23		      bne	.SNoAdjacentExit
   5039  f08c		       a5 aa		      lda	temp3
   5040  f08e		       f0 0e		      beq	.SEastAdjacent
   5041  f090		       c9 01		      cmp	#$1
   5042  f092		       f0 10		      beq	.SSouthAdjacent
   5043  f094		       c9 02		      cmp	#$2
   5044  f096		       f0 13		      beq	.SWestAdjacent
   5045  f098				   .SNorthAdjacent
   5046  f098		       20 e6 f0 	      jsr	SRemoveVEdge
   5047  f09b		       4c af f0 	      jmp	.SNoAdjacentExit
   5048  f09e				   .SEastAdjacent
   5049  f09e		       20 ea f0 	      jsr	SRemoveHEdge
   5050  f0a1		       4c af f0 	      jmp	.SNoAdjacentExit
   5051  f0a4				   .SSouthAdjacent
   5052  f0a4		       ca		      dex
   5053  f0a5		       20 e6 f0 	      jsr	SRemoveVEdge
   5054  f0a8		       4c af f0 	      jmp	.SNoAdjacentExit
   5055  f0ab				   .SWestAdjacent
   5056  f0ab		       88		      dey
   5057  f0ac		       20 ea f0 	      jsr	SRemoveHEdge
   5058  f0af				   .SNoAdjacentExit
   5059  f0af				   .SPrepareForNextIteration
   5060  f0af		       c6 ab		      dec	temp4
   5061  f0b1		       d0 11		      bne	.SSkipTurning
   5062  f0b3		       e6 aa		      inc	temp3
   5063  f0b5		       a5 aa		      lda	temp3
   5064  f0b7		       29 03		      and	#$03
   5065  f0b9		       85 aa		      sta	temp3	;Turn to the right
   5066  f0bb
   5067  f0bb		       c6 ad		      dec	temp5	;Get the number of steps needed before turning again
   5068  f0bd		       a5 ad		      lda	temp5
   5069  f0bf		       4a		      lsr
   5070  f0c0		       f0 23		      beq	.SMazeComplete
   5071  f0c2		       85 ab		      sta	temp4
   5072  f0c4				   .SSkipTurning
   5073  f0c4		       a6 a8		      ldx	temp1
   5074  f0c6		       a4 a9		      ldy	temp2
   5075  f0c8		       a5 aa		      lda	temp3
   5076  f0ca		       f0 0b		      beq	.SMoveEast
   5077  f0cc		       c9 01		      cmp	#$1
   5078  f0ce		       f0 0a		      beq	.SMoveSouth
   5079  f0d0		       c9 02		      cmp	#$2
   5080  f0d2		       f0 09		      beq	.SMoveWest
   5081  f0d4				   .SMoveNorth
   5082  f0d4		       88		      dey
   5083  f0d5		       10 07		      bpl	.SNextIteration
   5084  f0d7				   .SMoveEast
   5085  f0d7		       e8		      inx
   5086  f0d8		       10 04		      bpl	.SNextIteration
   5087  f0da				   .SMoveSouth
   5088  f0da		       c8		      iny
   5089  f0db		       10 01		      bpl	.SNextIteration
   5090  f0dd				   .SMoveWest
   5091  f0dd		       ca		      dex
   5092  f0de				   .SNextIteration
   5093  f0de		       86 a8		      stx	temp1
   5094  f0e0		       84 a9		      sty	temp2
   5095  f0e2		       4c 0b f0 	      jmp	.SMazeGenerationLoop
   5096  f0e5				   .SMazeComplete
   5097  f0e5		       60		      rts
   5098  f0e6
   5099  f0e6				   SRemoveVEdge SUBROUTINE		;Removes the specified vertical edge from the maze, using X and Y as x and y.
   5100  f0e6		       a9 c3		      lda	#vEdges
   5101  f0e8		       d0 02		      bne	.SRemoveEdge	;RAM is located between $80 and $FF, so this is always true, and saves a byte over jmp
   5102  f0ea				   SRemoveHEdge
   5103  f0ea		       a9 cb		      lda	#hEdges
   5104  f0ec				   .SRemoveEdge
   5105  f0ec		       85 b1		      sta	tempPointer1
   5106  f0ee		       a9 00		      lda	#0
   5107  f0f0		       85 b2		      sta	tempPointer1+1
   5108  f0f2		       b1 b1		      lda	(tempPointer1),y	;Gets the relevant row of vertical edges
   5109  f0f4		       85 af		      sta	temp6
   5110  f0f6		       a9 01		      lda	#1
   5111  f0f8				   .SShiftingLoop
   5112  f0f8		       e0 00		      cpx	#0
   5113  f0fa		       f0 04		      beq	.SAfterShifting
   5114  f0fc		       0a		      asl
   5115  f0fd		       ca		      dex
   5116  f0fe		       10 f8		      bpl	.SShiftingLoop	;Should always be true, just saves a byte over jmp
   5117  f100				   .SAfterShifting
   5118  f100							;A now contains a decoded y value
   5119  f100		       49 ff		      eor	#$FF
   5120  f102							;A now contains all 1s, except for a 0 in the correct spot for the edge to be removed
   5121  f102		       25 af		      and	temp6
   5122  f104		       91 b1		      sta	(tempPointer1),y
   5123  f106		       60		      rts
   5124  f107
   5125  f107				   SClearMazeData SUBROUTINE		;Sets all the vertical and horizontal edges of the maze to 1 (walls).
   5126  f107		       a0 0e		      ldy	#14
   5127  f109		       a9 c3		      lda	#vEdges
   5128  f10b		       85 b1		      sta	tempPointer1
   5129  f10d		       a9 00		      lda	#0
   5130  f10f		       85 b2		      sta	tempPointer1+1
   5131  f111		       a9 ff		      lda	#%11111111
   5132  f113				   .SClearMazeLoop
   5133  f113		       91 b1		      sta	(tempPointer1),y
   5134  f115		       88		      dey
   5135  f116		       10 fb		      bpl	.SClearMazeLoop
   5136  f118		       60		      rts
   5137  f119
   5138  f119				   SGetMazeRoomData SUBROUTINE		;Returns the four edges (0000NSEW) of the room specified by X and Y
   5139  f119		       86 ab		      stx	temp4
   5140  f11b		       84 ad		      sty	temp5
   5141  f11d		       a9 00		      lda	#0
   5142  f11f		       85 af		      sta	temp6	;temp6 will store the value to return
   5143  f121
   5144  f121							;Get north edge
   5145  f121		       88		      dey
   5146  f122		       20 5a f1 	      jsr	SGetHEdge
   5147  f125		       05 af		      ora	temp6
   5148  f127		       0a		      asl
   5149  f128		       85 af		      sta	temp6
   5150  f12a
   5151  f12a							;Get south edge
   5152  f12a		       a6 ab		      ldx	temp4
   5153  f12c		       a4 ad		      ldy	temp5
   5154  f12e		       20 5a f1 	      jsr	SGetHEdge
   5155  f131		       05 af		      ora	temp6
   5156  f133		       0a		      asl
   5157  f134		       85 af		      sta	temp6
   5158  f136
   5159  f136							;Get east edge
   5160  f136		       a6 ab		      ldx	temp4
   5161  f138							;Don't need to reload Y
   5162  f138		       20 4e f1 	      jsr	SGetVEdge
   5163  f13b		       05 af		      ora	temp6
   5164  f13d		       0a		      asl
   5165  f13e		       85 af		      sta	temp6
   5166  f140
   5167  f140							;Get west edge
   5168  f140		       a6 ab		      ldx	temp4
   5169  f142		       ca		      dex
   5170  f143		       20 4e f1 	      jsr	SGetVEdge
   5171  f146		       05 af		      ora	temp6
   5172  f148		       85 af		      sta	temp6
   5173  f14a		       60		      rts
   5174  f14b
   5175  f14b				   SGetEdge   SUBROUTINE		;Uses X and Y to return a vertical or horizontal edge in A. Call SGetVEdge or SGetHEdge instead!
   5176  f14b				   .SOutOfBounds
   5177  f14b		       a9 01		      lda	#1
   5178  f14d		       60		      rts
   5179  f14e				   SGetVEdge
   5180  f14e		       e0 00		      cpx	#0
   5181  f150		       30 f9		      bmi	.SOutOfBounds
   5182  f152		       e0 07		      cpx	#(MAZE_WIDTH-1)
   5183  f154		       b0 f5		      bcs	.SOutOfBounds
   5184  f156		       a9 c3		      lda	#vEdges
   5185  f158		       d0 0a		      bne	.SGetNormalEdge
   5186  f15a				   SGetHEdge
   5187  f15a		       c0 00		      cpy	#0
   5188  f15c		       30 ed		      bmi	.SOutOfBounds
   5189  f15e		       c0 07		      cpy	#(MAZE_WIDTH-1)
   5190  f160		       b0 e9		      bcs	.SOutOfBounds
   5191  f162		       a9 cb		      lda	#hEdges
   5192  f164				   .SGetNormalEdge
   5193  f164		       85 b1		      sta	tempPointer1
   5194  f166		       a9 00		      lda	#0
   5195  f168		       85 b2		      sta	tempPointer1+1
   5196  f16a		       b1 b1		      lda	(tempPointer1),y
   5197  f16c				   .SShiftingLoop
   5198  f16c		       ca		      dex
   5199  f16d		       30 04		      bmi	.SDoneShifting
   5200  f16f		       4a		      lsr
   5201  f170		       4c 6c f1 	      jmp	.SShiftingLoop
   5202  f173				   .SDoneShifting
   5203  f173		       29 01		      and	#$1
   5204  f175		       60		      rts
   5205  f176
   5206  f176				   SMazeLeftMask
   5207  f176		       08		      .byte.b	%00001000
   5208  f177				   SMazeForwardMask
   5209  f177		       02		      .byte.b	%00000010
   5210  f178				   SMazeRightMask
   5211  f178		       04		      .byte.b	%00000100
   5212  f179				   SMazeBackwardMask
   5213  f179		       01		      .byte.b	%00000001
   5214  f17a		       08		      .byte.b	%00001000
   5215  f17b		       02		      .byte.b	%00000010
   5216  f17c		       04		      .byte.b	%00000100
   5217  f17d
   5218  f17d				   SUpdateMazeRenderingPointers SUBROUTINE
   5219  f17d		       a6 a2		      ldx	playerX
   5220  f17f		       a4 a3		      ldy	playerY
   5221  f181		       a5 a4		      lda	playerFacing
   5222  f183		       f0 19		      beq	.SFacingEast
   5223  f185		       c9 01		      cmp	#1
   5224  f187		       f0 27		      beq	.SFacingSouth
   5225  f189		       c9 02		      cmp	#2
   5226  f18b		       f0 34		      beq	.SFacingWest
   5227  f18d				   .SFacingNorth
   5228  f18d		       88		      dey
   5229  f18e		       20 19 f1 	      jsr	SGetMazeRoomData
   5230  f191		       85 a8		      sta	temp1
   5231  f193		       a6 a2		      ldx	playerX
   5232  f195		       88		      dey
   5233  f196		       20 19 f1 	      jsr	SGetMazeRoomData
   5234  f199		       85 a9		      sta	temp2
   5235  f19b		       4c ce f1 	      jmp	.SUpdatePointers
   5236  f19e				   .SFacingEast
   5237  f19e		       e8		      inx
   5238  f19f		       20 19 f1 	      jsr	SGetMazeRoomData
   5239  f1a2		       85 a8		      sta	temp1
   5240  f1a4		       a6 a2		      ldx	playerX
   5241  f1a6		       e8		      inx
   5242  f1a7		       e8		      inx
   5243  f1a8		       20 19 f1 	      jsr	SGetMazeRoomData
   5244  f1ab		       85 a9		      sta	temp2
   5245  f1ad		       4c ce f1 	      jmp	.SUpdatePointers
   5246  f1b0				   .SFacingSouth
   5247  f1b0		       c8		      iny
   5248  f1b1		       20 19 f1 	      jsr	SGetMazeRoomData
   5249  f1b4		       85 a8		      sta	temp1
   5250  f1b6		       a6 a2		      ldx	playerX
   5251  f1b8		       c8		      iny
   5252  f1b9		       20 19 f1 	      jsr	SGetMazeRoomData
   5253  f1bc		       85 a9		      sta	temp2
   5254  f1be		       4c ce f1 	      jmp	.SUpdatePointers
   5255  f1c1				   .SFacingWest
   5256  f1c1		       ca		      dex
   5257  f1c2		       20 19 f1 	      jsr	SGetMazeRoomData
   5258  f1c5		       85 a8		      sta	temp1
   5259  f1c7		       a6 a2		      ldx	playerX
   5260  f1c9		       20 19 f1 	      jsr	SGetMazeRoomData
   5261  f1cc		       85 a9		      sta	temp2
   5262  f1ce				   .SUpdatePointers
   5263  f1ce		       a5 a8		      lda	temp1
   5264  f1d0		       a4 a4		      ldy	playerFacing
   5265  f1d2		       39 79 f1 	      and	SMazeBackwardMask,y
   5266  f1d5		       f0 17		      beq	.SAtLeast1Room
   5267  f1d7		       a9 27		      lda	#(RDeadEnd1 & $FF)
   5268  f1d9		       85 b3		      sta	tempPointer2
   5269  f1db		       85 ad		      sta	temp5
   5270  f1dd		       a9 4e		      lda	#(RDeadEnd2 & $FF)
   5271  f1df		       85 b5		      sta	tempPointer3
   5272  f1e1		       85 ab		      sta	temp4
   5273  f1e3		       a9 ff		      lda	#(RDeadEnd1 >> 8 & $FF)
   5274  f1e5		       85 b4		      sta	tempPointer2+1
   5275  f1e7		       85 b6		      sta	tempPointer3+1
   5276  f1e9		       85 ac		      sta	tempPointer4
   5277  f1eb		       85 ae		      sta	tempPointer5
   5278  f1ed		       60		      rts
   5279  f1ee				   .SAtLeast1Room
   5280  f1ee		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5281  f1f0		       85 b4		      sta	tempPointer2+1
   5282  f1f2		       a5 a8		      lda	temp1
   5283  f1f4		       39 76 f1 	      and	SMazeLeftMask,y
   5284  f1f7		       d0 07		      bne	.SNoNearLeftDoor
   5285  f1f9		       a9 00		      lda	#(RNearDoor & $FF)
   5286  f1fb		       85 b3		      sta	tempPointer2
   5287  f1fd		       4c 04 f2 	      jmp	.SCheckForNearRightDoor
   5288  f200				   .SNoNearLeftDoor
   5289  f200		       a9 27		      lda	#(RNoNearDoor & $FF)
   5290  f202		       85 b3		      sta	tempPointer2
   5291  f204				   .SCheckForNearRightDoor
   5292  f204		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5293  f206		       85 ae		      sta	tempPointer5
   5294  f208		       a5 a8		      lda	temp1
   5295  f20a		       39 78 f1 	      and	SMazeRightMask,y
   5296  f20d		       d0 07		      bne	.SNoNearRightDoor
   5297  f20f		       a9 00		      lda	#(RNearDoor & $FF)
   5298  f211		       85 ad		      sta	temp5
   5299  f213		       4c 1a f2 	      jmp	.SCheckIfAtLeast2Rooms
   5300  f216				   .SNoNearRightDoor
   5301  f216		       a9 27		      lda	#(RNoNearDoor & $FF)
   5302  f218		       85 ad		      sta	temp5
   5303  f21a				   .SCheckIfAtLeast2Rooms
   5304  f21a		       a5 a8		      lda	temp1
   5305  f21c		       39 77 f1 	      and	SMazeForwardMask,y
   5306  f21f		       f0 0d		      beq	.SAtLeast2Rooms
   5307  f221		       a9 75		      lda	#(ROnly1Room & $FF)
   5308  f223		       85 b5		      sta	tempPointer3
   5309  f225		       85 ab		      sta	temp4
   5310  f227		       a9 ff		      lda	#(ROnly1Room >> 8 & $FF)
   5311  f229		       85 b6		      sta	tempPointer3+1
   5312  f22b		       85 ac		      sta	tempPointer4
   5313  f22d		       60		      rts
   5314  f22e				   .SAtLeast2Rooms
   5315  f22e		       a5 a9		      lda	temp2
   5316  f230		       39 77 f1 	      and	SMazeForwardMask,y
   5317  f233		       d0 2b		      bne	.S2Rooms
   5318  f235				   .SMoreThan2Rooms
   5319  f235		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5320  f237		       85 b6		      sta	tempPointer3+1
   5321  f239		       a5 a9		      lda	temp2
   5322  f23b		       39 76 f1 	      and	SMazeLeftMask,y
   5323  f23e		       d0 07		      bne	.SNoFarLeftDoor1
   5324  f240		       a9 9c		      lda	#(RFarDoor & $FF)
   5325  f242		       85 b5		      sta	tempPointer3
   5326  f244		       4c 4b f2 	      jmp	.SCheckIfFarRightDoor1
   5327  f247				   .SNoFarLeftDoor1
   5328  f247		       a9 c3		      lda	#(RNoFarDoor & $FF)
   5329  f249		       85 b5		      sta	tempPointer3
   5330  f24b				   .SCheckIfFarRightDoor1
   5331  f24b		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5332  f24d		       85 ac		      sta	tempPointer4
   5333  f24f		       a5 a9		      lda	temp2
   5334  f251		       39 78 f1 	      and	SMazeRightMask,y
   5335  f254		       d0 05		      bne	.SNoFarRightDoor1
   5336  f256		       a9 9c		      lda	#(RFarDoor & $FF)
   5337  f258		       85 ab		      sta	temp4
   5338  f25a		       60		      rts
   5339  f25b				   .SNoFarRightDoor1
   5340  f25b		       a9 c3		      lda	#(RNoFarDoor & $FF)
   5341  f25d		       85 ab		      sta	temp4
   5342  f25f		       60		      rts
   5343  f260				   .S2Rooms
   5344  f260		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5345  f262		       85 b6		      sta	tempPointer3+1
   5346  f264		       a5 a9		      lda	temp2
   5347  f266		       39 76 f1 	      and	SMazeLeftMask,y
   5348  f269		       d0 07		      bne	.SNoFarLeftDoor2
   5349  f26b		       a9 4e		      lda	#(RFarDoorOnlyTwo & $FF)
   5350  f26d		       85 b5		      sta	tempPointer3
   5351  f26f		       4c 76 f2 	      jmp	.SCheckIfFarRightDoor2
   5352  f272				   .SNoFarLeftDoor2
   5353  f272		       a9 75		      lda	#(RNoFarDoorOnlyTwo & $FF)
   5354  f274		       85 b5		      sta	tempPointer3
   5355  f276				   .SCheckIfFarRightDoor2
   5356  f276		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5357  f278		       85 ac		      sta	tempPointer4
   5358  f27a		       a5 a9		      lda	temp2
   5359  f27c		       39 78 f1 	      and	SMazeRightMask,y
   5360  f27f		       d0 05		      bne	.SNoFarRightDoor2
   5361  f281		       a9 4e		      lda	#(RFarDoorOnlyTwo & $FF)
   5362  f283		       85 ab		      sta	temp4
   5363  f285		       60		      rts
   5364  f286				   .SNoFarRightDoor2
   5365  f286		       a9 75		      lda	#(RNoFarDoorOnlyTwo & $FF)
   5366  f288		       85 ab		      sta	temp4
   5367  f28a		       60		      rts
   5368  f28b
   5369  f28b				   STurnLeft
   5370  f28b		       03		      .byte.b	3
   5371  f28c		       00		      .byte.b	0
   5372  f28d		       01		      .byte.b	1
   5373  f28e		       02		      .byte.b	2
   5374  f28f				   STurnRight
   5375  f28f		       01		      .byte.b	1
   5376  f290		       02		      .byte.b	2
   5377  f291		       03		      .byte.b	3
   5378  f292		       00		      .byte.b	0
   5379  f293
   5380  f293				   SUpdatePlayerMovement SUBROUTINE
   5381  f293		       a5 b9		      lda	currentMenu
   5382  f295		       d0 61		      bne	.SReturnFromPlayerMovement
   5383  f297		       a5 a7		      lda	previousInput
   5384  f299		       29 f0		      and	#$F0
   5385  f29b		       85 a8		      sta	temp1
   5386  f29d		       ad 80 02 	      lda	SWCHA
   5387  f2a0		       29 f0		      and	#$F0
   5388  f2a2		       c5 a8		      cmp	temp1
   5389  f2a4		       f0 52		      beq	.SReturnFromPlayerMovement
   5390  f2a6		       ad 80 02 	      lda	SWCHA
   5391  f2a9		       10 06		      bpl	.SRightPressed
   5392  f2ab		       0a		      asl
   5393  f2ac		       10 0d		      bpl	.SLeftPressed
   5394  f2ae		       4c c2 f2 	      jmp	.SCheckForForwardMovement
   5395  f2b1				   .SRightPressed
   5396  f2b1		       a4 a4		      ldy	playerFacing
   5397  f2b3		       b9 8f f2 	      lda	STurnRight,y
   5398  f2b6		       85 a4		      sta	playerFacing
   5399  f2b8		       4c c2 f2 	      jmp	.SCheckForForwardMovement
   5400  f2bb				   .SLeftPressed
   5401  f2bb		       a4 a4		      ldy	playerFacing
   5402  f2bd		       b9 8b f2 	      lda	STurnLeft,y
   5403  f2c0		       85 a4		      sta	playerFacing
   5404  f2c2				   .SCheckForForwardMovement
   5405  f2c2		       ad 80 02 	      lda	SWCHA
   5406  f2c5		       29 10		      and	#$10
   5407  f2c7		       d0 2f		      bne	.SReturnFromPlayerMovement
   5408  f2c9
   5409  f2c9							;Code for checking if possible to move forward from current direction, and moving if so
   5410  f2c9		       a6 a2		      ldx	playerX
   5411  f2cb		       a4 a3		      ldy	playerY
   5412  f2cd		       20 19 f1 	      jsr	SGetMazeRoomData
   5413  f2d0		       a4 a4		      ldy	playerFacing
   5414  f2d2		       39 77 f1 	      and	SMazeForwardMask,y
   5415  f2d5		       d0 21		      bne	.SReturnFromPlayerMovement	;If equals 1, then there is a wall ahead in this direction
   5416  f2d7
   5417  f2d7							;Possible to move in this direction, so do so.
   5418  f2d7		       a4 a4		      ldy	playerFacing
   5419  f2d9		       f0 0c		      beq	.SEast
   5420  f2db		       88		      dey
   5421  f2dc		       f0 0f		      beq	.SSouth
   5422  f2de		       88		      dey
   5423  f2df		       f0 12		      beq	.SWest
   5424  f2e1
   5425  f2e1				   .SNorth
   5426  f2e1		       a4 a3		      ldy	playerY
   5427  f2e3		       88		      dey
   5428  f2e4		       84 a3		      sty	playerY
   5429  f2e6		       60		      rts
   5430  f2e7				   .SEast
   5431  f2e7		       a6 a2		      ldx	playerX
   5432  f2e9		       e8		      inx
   5433  f2ea		       86 a2		      stx	playerX
   5434  f2ec		       60		      rts
   5435  f2ed				   .SSouth
   5436  f2ed		       a4 a3		      ldy	playerY
   5437  f2ef		       c8		      iny
   5438  f2f0		       84 a3		      sty	playerY
   5439  f2f2		       60		      rts
   5440  f2f3				   .SWest
   5441  f2f3		       a6 a2		      ldx	playerX
   5442  f2f5		       ca		      dex
   5443  f2f6		       86 a2		      stx	playerX
   5444  f2f8				   .SReturnFromPlayerMovement
   5445  f2f8		       60		      rts
   5446  f2f9
   5447  f2f9				   SRandom    SUBROUTINE		;Ticks the random number generator when called
   5448  f2f9		       a5 b7		      lda	rand8
   5449  f2fb		       4a		      lsr
   5450  f2fc		       90 02		      bcc	.SNoEOR
   5451  f2fe		       49 b4		      eor	#$B4
   5452  f300				   .SNoEOR
   5453  f300		       85 b7		      sta	rand8
   5454  f302		       60		      rts
   5455  f303
   5456  f303				   SHighLabelBytes
   5457  f303		       f0		      .byte.b	(SGenerateMazeData >> 8 & $FF)
   5458  f304		       f1		      .byte.b	(SUpdateMazeRenderingPointers >> 8 & $FF)
   5459  f305		       f2		      .byte.b	(SUpdatePlayerMovement >> 8 & $FF)
   5460  f306		       f1		      .byte.b	(SClearMazeData >> 8 & $FF)
   5461  f307
   5462  f307				   SLowLabelBytes
   5463  f307		       04		      .byte.b	(SGenerateMazeData & $FF)
   5464  f308		       7d		      .byte.b	(SUpdateMazeRenderingPointers & $FF)
   5465  f309		       93		      .byte.b	(SUpdatePlayerMovement & $FF)
   5466  f30a		       07		      .byte.b	(SClearMazeData & $FF)
   5467  f30b
   5468  ffb0					      ORG	$FFB0	;Bankswitching nonsense
   5469  ffb0					      RORG	$FFB0
   5470  ffb0
   5471  ffb0				   SRunFunctionForLBank
   5472  ffb0		       ea		      nop		;1
   5473  ffb1		       ea		      nop		;sta $1FF9
   5474  ffb2		       ea		      nop		;3
   5475  ffb3		       b9 03 f3 	      lda	SHighLabelBytes,y	;6
   5476  ffb6		       85 b2		      sta	tempPointer1+1	;8
   5477  ffb8		       b9 07 f3 	      lda	SLowLabelBytes,y	;11
   5478  ffbb		       85 b1		      sta	tempPointer1	;13
   5479  ffbd		       a9 ff		      lda	#(SReturnLocation >> 8 & $FF)	;15
   5480  ffbf		       48		      pha		;16
   5481  ffc0		       a9 c3		      lda	#(SReturnLocation & $FF)	;18
   5482  ffc2		       48		      pha		;19
   5483  ffc3				   SReturnLocation
   5484  ffc3		       6c b1 00 	      jmp	(tempPointer1)	;22
   5485  ffc6		       85 f3		      sta	returnValue	;24
   5486  ffc8		       8d f7 1f 	      sta	$1FF7	;Return to L bank ;27
   5487  ffcb		       ea		      nop		;28
   5488  ffcc
   5489  fffa					      ORG	$FFFA
   5490  fffa					      RORG	$FFFA
   5491  fffa
   5492  fffa							;NMI, IRQ, and RESET information
   5493  fffa		       00 f0		      .word.w	SReset
   5494  fffc		       00 f0		      .word.w	SReset
   5495  fffe		       00 f0		      .word.w	SReset
   5496  10000
   5497  10000				    END
