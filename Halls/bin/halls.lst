------- FILE out.asm LEVEL 1 PASS 3
      1  10000					       processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a 
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE out.asm
      3  0000 ????
      4  0000 ????						; --- Constants ---
      5  0000 ????						;Kernel related
      6  0000 ????	       00 2c	   VBLANK_TIMER_DURATION =	44
      7  0000 ????	       00 24	   OVERSCAN_TIMER_DURATION =	36
      8  0000 ????
      9  0000 ????						;Input related
     10  0000 ????	       00 10	   UP_MASK    =	%00010000
     11  0000 ????	       00 20	   DOWN_MASK  =	%00100000
     12  0000 ????	       00 40	   LEFT_MASK  =	%01000000
     13  0000 ????	       00 80	   RIGHT_MASK =	%10000000
     14  0000 ????
     15  0000 ????						;Rendering related
     16  0000 ????	       00 08	   CHARACTER_HEIGHT =	8
     17  0000 ????	       00 26	   MAZE_HEIGHT =	38
     18  0000 ????	       00 02	   BATTLE_BOX_COLOR =	$02
     19  0000 ????	       00 06	   TEXT_COLOR =	$06
     20  0000 ????	       00 0e	   TEXT_HIGHLIGHTED_COLOR =	$0E
     21  0000 ????	       00 36	   TEXT_INVALID_COLOR =	$36
     22  0000 ????	       00 2a	   FRONTLINE_INDICATOR_COLOR =	$2A
     23  0000 ????	       00 8a	   BACKLINE_INDICATOR_COLOR =	$8A
     24  0000 ????
     25  0000 ????	       00 00	   EMPTY      =	0
     26  0000 ????	       00 01	   A	      =	1
     27  0000 ????	       00 02	   B	      =	2
     28  0000 ????	       00 03	   C	      =	3
     29  0000 ????	       00 04	   D	      =	4
     30  0000 ????	       00 05	   E	      =	5
     31  0000 ????	       00 06	   F	      =	6
     32  0000 ????	       00 07	   G	      =	7
     33  0000 ????	       00 08	   H	      =	8
     34  0000 ????	       00 09	   I	      =	9
     35  0000 ????	       00 0a	   J	      =	10
     36  0000 ????	       00 0b	   K	      =	11
     37  0000 ????	       00 0c	   L	      =	12
     38  0000 ????	       00 0d	   M	      =	13
     39  0000 ????	       00 0e	   N	      =	14
     40  0000 ????	       00 0f	   O	      =	15
     41  0000 ????	       00 10	   P	      =	16
     42  0000 ????	       00 11	   Q	      =	17
     43  0000 ????	       00 12	   R	      =	18
     44  0000 ????	       00 13	   S	      =	19
     45  0000 ????	       00 14	   T	      =	20
     46  0000 ????	       00 15	   U	      =	21
     47  0000 ????	       00 16	   V	      =	22
     48  0000 ????	       00 17	   W	      =	23
     49  0000 ????	       00 18	   X	      =	24
     50  0000 ????	       00 19	   Y	      =	25
     51  0000 ????	       00 1a	   Z	      =	26
     52  0000 ????	       00 1b	   NUMBER0    =	27
     53  0000 ????	       00 1c	   NUMBER1    =	28
     54  0000 ????	       00 1d	   NUMBER2    =	29
     55  0000 ????	       00 1e	   NUMBER3    =	30
     56  0000 ????	       00 1f	   NUMBER4    =	31
     57  0000 ????	       00 20	   NUMBER5    =	32
     58  0000 ????	       00 21	   NUMBER6    =	33
     59  0000 ????	       00 22	   NUMBER7    =	34
     60  0000 ????	       00 23	   NUMBER8    =	35
     61  0000 ????	       00 24	   NUMBER9    =	36
     62  0000 ????
     63  0000 ????						;Memory related --- This is actually a bad idea and should maybe be changed
     64  0000 ????	       00 fe	   MAZE_POINTER_PAGE_1 =	$FE
     65  0000 ????
     66  0000 ????						;Maze related
     67  0000 ????	       00 08	   NORTH      =	$08
     68  0000 ????	       00 04	   SOUTH      =	$04
     69  0000 ????	       00 02	   EAST       =	$02
     70  0000 ????	       00 01	   WEST       =	$01
     71  0000 ????	       00 08	   MAZE_WIDTH =	8
     72  0000 ????
     73  0000 ????						;Battle related
     74  0000 ????	       00 40	   GUARDED_MASK =	$40
     75  0000 ????	       00 20	   SHIELDED_MASK =	$20
     76  0000 ????	       00 18	   ASLEEP_MASK =	$18
     77  0000 ????	       00 04	   PARRYING_MASK =	$04
     78  0000 ????	       00 02	   SHARPENED_MASK =	$02
     79  0000 ????	       00 01	   BLIGHTED_MASK =	$01
     80  0000 ????
     81  0000 ????	       00 80	   LEGENDARY_RESIST_MASK =	$80
     82  0000 ????	       00 40	   PHYSICAL_RESIST_MASK =	$40
     83  0000 ????	       00 20	   FIRE_RESIST_MASK =	$20
     84  0000 ????	       00 10	   ICE_RESIST_MASK =	$10
     85  0000 ????	       00 08	   HOLY_RESIST_MASK =	$08
     86  0000 ????	       00 04	   ELECTRIC_RESIST_MASK =	$04
     87  0000 ????	       00 02	   POISON_RESIST_MASK =	$02
     88  0000 ????
     89 U00f4 ????				      SEG.U	Variables
     90 U0080					      ORG	$80
     91 U0080
     92 U0080		       00	   charIndexxxx ds	1
     93 U0081		       00	   char1      ds	1	; -MMM-CCC : M - Mood, C - Class
     94 U0082		       00	   char2      ds	1
     95 U0083		       00	   char3      ds	1
     96 U0084		       00	   char4      ds	1
     97 U0085		       00 00 00 00 name1      ds	4
     98 U0089		       00 00 00 00 name2      ds	4
     99 U008d		       00 00 00 00 name3      ds	4
    100 U0091		       00 00 00 00 name4      ds	4
    101 U0095		       00 00 00 00 name5      ds	4
    102 U0099		       00	   hp1	      ds	1
    103 U009a		       00	   hp2	      ds	1
    104 U009b		       00	   hp3	      ds	1
    105 U009c		       00	   hp4	      ds	1
    106 U009d		       00	   mp1	      ds	1
    107 U009e		       00	   mp2	      ds	1
    108 U009f		       00	   mp3	      ds	1
    109 U00a0		       00	   mp4	      ds	1
    110 U00a1		       00	   partyBattlePos ds	1	; ----4321 a 1 in that position indicates that that character is in the frontline ;Might be able to share
    111 U00a2		       00	   playerX    ds	1	;0000XXXX
    112 U00a3		       00	   playerY    ds	1	;0000YYYY
    113 U00a4		       00	   playerFacing ds	1	; 000000XX 00 is east, 01 is south, 10 is west, 11 is north
    114 U00a5		       00	   exitLocation ds	1
    115 U00a6		       00	   campfireLocation ds	1
    116 U00a7		       00	   previousInput ds	1
    117 U00a8		       00	   temp1      ds	1
    118 U00a9		       00	   temp2      ds	1
    119 U00aa		       00	   temp3      ds	1
    120 U00ab		       00	   temp4      ds	1
    121 U00ac		       00	   tempPointer4 ds	1
    122 U00ad		       00	   temp5      ds	1
    123 U00ae		       00	   tempPointer5 ds	1
    124 U00af		       00	   temp6      ds	1
    125 U00b0		       00	   tempPointer6 ds	1
    126 U00b1		       00 00	   tempPointer1 ds	2
    127 U00b3		       00 00	   tempPointer2 ds	2
    128 U00b5		       00 00	   tempPointer3 ds	2
    129 U00b7		       00	   rand8      ds	1
    130 U00b8		       00	   experienceToNextLevel ds	1
    131 U00b9		       00	   currentMenu ds	1
    132 U00ba
    133 U00ba		       00	   cursorIndexAndMessageY ds	1
    134 U00bb		       00	   startingCursorIndexAndTargetID ds	1
    135 U00bc		       00	   aoeTargetID ds	1
    136 U00bd		       00	   highlightedIndex ds	1
    137 U00be		       00	   menuSize   ds	1
    138 U00bf		       00	   inBattle   ds	1
    139 U00c0		       00	   currentBattler ds	1
    140 U00c1		       00	   currentBattlerAttack ds	1
    141 U00c2		       00	   currentBattlerSpeed ds	1
    142 U00c3
    143 U00c3		       00 00 00 00*vEdges     ds	8	;Vertical edges of the maze   0xxxxxxx
    144 U00cb		       00 00 00 00*hEdges     ds	7	;Horizontal edges of the maze xxxxxxxx
    145 U00d2
    146 U00d2		       00 00 00 00 battleActions ds	4
    147 U00d6		       00 00 00 00 enemyHP    ds	4
    148 U00da		       00 00 00 00 enemyID    ds	4
    149 U00de		       00 00 00 00*battlerStatus ds	8	;TGSSlPAB - T:Guard/shield timer, G:Guard flag, S:Shield flag, Sl:Sleep timer, P:Parrying, A:Sharpened, B:Blighted
    150 U00e6		       00	   enemyAction ds	1
    151 U00e7		       00	   hasAction  ds	1
    152 U00e8		       00	   currentMessage ds	1
    153 U00e9		       00 00 00    menuLines  ds	3
    154 U00ec		       00	   highlightedLine ds	1
    155 U00ed		       00	   currentSound ds	1
    156 U00ee		       00	   soundOffset ds	1
    157 U00ef		       00	   currentEffect ds	1
    158 U00f0		       00	   effectCounter ds	1
    159 U00f1		       00	   effectCountdown ds	1
    160 U00f2		       00	   mazeAndPartyLevel ds	1
    161 U00f3		       00	   returnValue ds	1
    162 U00f4
    163  10000 ????				       SEG	CODE
    164  10000 ????
    165  c000					      ORG	$C000
    166  c000					      RORG	$F000
    167  c000
    168  c000							;BANK 0 - CONTAINS LOGIC AND DATA PERTAINING TO RENDERING THE MAZE VIEW AND THE MAJORITY OF THE BATTLE SCENE
    169  c000
    170  c000							;Sets all registers and RAM to 0. Also ensures that the processor is not in decimal mode.
    171  c000				   RReset
    172  c000		       0c f7 1f 	      nop	$1FF7	;Switch to bank 1, which contains the startup information
    173  c003
    174  c003				   RMainPicture
    175  c003		       a2 80		      ldx	#$80
    176  c005		       86 01		      stx	VBLANK	;Disable blanking
    177  c007
    178  c007							;Draw picture to the screen
    179  c007		       a5 bf		      lda	inBattle
    180  c009		       f0 03		      beq	RRenderMazeView
    181  c00b		       4c 02 f1 	      jmp	RBattleRendering
    182  c00e
    183  c00e				   RRenderMazeView
    184  c00e				   RPlaceCompass
    185  c00e		       85 02		      sta	WSYNC
    186  c010		       a5 f2		      lda	mazeAndPartyLevel
    187  c012		       4a		      lsr
    188  c013		       4a		      lsr
    189  c014		       4a		      lsr
    190  c015		       4a		      lsr
    191  c016		       a8		      tay
    192  c017		       b9 6b fa 	      lda	RMazeColors,y
    193  c01a		       85 06		      sta	COLUP0
    194  c01c		       85 08		      sta	COLUPF
    195  c01e
    196  c01e							;Delay in order to put the compass in the middle of the screen
    197  c01e		       20 85 f2 	      jsr	RSpinWheels
    198  c021		       ea		      nop
    199  c022		       a9 c0		      lda	#$C0
    200  c024		       85 20		      sta	HMP0
    201  c026		       85 10		      sta	RESP0
    202  c028		       85 02		      sta	WSYNC
    203  c02a		       85 2a		      sta	HMOVE
    204  c02c		       a0 08		      ldy	#CHARACTER_HEIGHT
    205  c02e				   RDrawCompass
    206  c02e		       85 02		      sta	WSYNC
    207  c030		       88		      dey
    208  c031		       30 07		      bmi	RPrepareToDrawMaze
    209  c033		       b1 b1		      lda	(tempPointer1),y
    210  c035		       85 1b		      sta	GRP0
    211  c037		       4c 2e f0 	      jmp	RDrawCompass
    212  c03a				   RPrepareToDrawMaze
    213  c03a		       85 2b		      sta	HMCLR
    214  c03c		       c8		      iny
    215  c03d		       84 1b		      sty	GRP0
    216  c03f		       a0 26		      ldy	#MAZE_HEIGHT
    217  c041				   RDrawMaze
    218  c041		       85 02		      sta	WSYNC
    219  c043		       b9 00 ff 	      lda	ROutermost,y
    220  c046		       85 0d		      sta	PF0
    221  c048		       b1 b3		      lda	(tempPointer2),y
    222  c04a		       85 0e		      sta	PF1
    223  c04c		       b1 b5		      lda	(tempPointer3),y
    224  c04e		       85 0f		      sta	PF2
    225  c050		       b1 ab		      lda	(temp4),y
    226  c052		       aa		      tax
    227  c053		       b1 ad		      lda	(temp5),y
    228  c055
    229  c055		       ea		      nop
    230  c056		       ea		      nop
    231  c057		       ea		      nop
    232  c058		       ea		      nop
    233  c059		       86 0f		      stx	PF2
    234  c05b		       85 0e		      sta	PF1
    235  c05d
    236  c05d		       85 02		      sta	WSYNC
    237  c05f		       b9 00 ff 	      lda	ROutermost,y
    238  c062		       85 0d		      sta	PF0
    239  c064		       b1 b3		      lda	(tempPointer2),y
    240  c066		       85 0e		      sta	PF1
    241  c068		       b1 b5		      lda	(tempPointer3),y
    242  c06a		       85 0f		      sta	PF2
    243  c06c		       b1 ab		      lda	(temp4),y
    244  c06e		       aa		      tax
    245  c06f		       b1 ad		      lda	(temp5),y
    246  c071
    247  c071		       ea		      nop
    248  c072		       ea		      nop
    249  c073		       ea		      nop
    250  c074		       ea		      nop
    251  c075		       86 0f		      stx	PF2
    252  c077		       85 0e		      sta	PF1
    253  c079
    254  c079		       85 02		      sta	WSYNC
    255  c07b		       b9 00 ff 	      lda	ROutermost,y
    256  c07e		       85 0d		      sta	PF0
    257  c080		       b1 b3		      lda	(tempPointer2),y
    258  c082		       85 0e		      sta	PF1
    259  c084		       b1 b5		      lda	(tempPointer3),y
    260  c086		       85 0f		      sta	PF2
    261  c088		       b1 ab		      lda	(temp4),y
    262  c08a		       aa		      tax
    263  c08b		       b1 ad		      lda	(temp5),y
    264  c08d
    265  c08d		       ea		      nop
    266  c08e		       ea		      nop
    267  c08f		       ea		      nop
    268  c090		       ea		      nop
    269  c091		       86 0f		      stx	PF2
    270  c093		       85 0e		      sta	PF1
    271  c095
    272  c095		       88		      dey
    273  c096		       c0 30		      cpy	#MAZE_HEIGHT+10
    274  c098		       90 a7		      bcc	RDrawMaze
    275  c09a		       85 02		      sta	WSYNC
    276  c09c		       20 85 f2 	      jsr	RSpinWheels
    277  c09f		       20 85 f2 	      jsr	RSpinWheels
    278  c0a2		       20 85 f2 	      jsr	RSpinWheels
    279  c0a5		       85 14		      sta	RESBL
    280  c0a7		       a9 01		      lda	#1
    281  c0a9		       85 27		      sta	VDELBL
    282  c0ab		       85 02		      sta	WSYNC
    283  c0ad		       a0 00		      ldy	#0
    284  c0af		       84 0d		      sty	PF0
    285  c0b1		       84 0e		      sty	PF1
    286  c0b3		       84 0f		      sty	PF2
    287  c0b5		       8c 00 00 	      sty	charIndex
    288  c0b8
    289  c0b8				   RDrawPartyInfoMaze
    290  c0b8		       a2 03		      ldx	#$03	;Triplicate
    291  c0ba		       86 04		      stx	NUSIZ0	;Set both duplication registers to triplicate the sprites.
    292  c0bc		       86 05		      stx	NUSIZ1
    293  c0be		       86 25		      stx	VDELP0
    294  c0c0		       86 26		      stx	VDELP1
    295  c0c2
    296  c0c2		       a2 10		      ldx	#$10	;Moves one color clock to the left.
    297  c0c4		       86 21		      stx	HMP1
    298  c0c6
    299  c0c6							;Need some sort of delay here in order to more or less center this data.
    300  c0c6		       ea		      nop
    301  c0c7		       ea		      nop
    302  c0c8		       85 10		      sta	RESP0
    303  c0ca		       85 11		      sta	RESP1
    304  c0cc		       85 02		      sta	WSYNC
    305  c0ce		       85 2a		      sta	HMOVE
    306  c0d0
    307  c0d0		       20 3d f4 	      jsr	RDrawCharacterInfo
    308  c0d3		       ee 00 00 	      inc	charIndex
    309  c0d6		       85 02		      sta	WSYNC
    310  c0d8		       20 3d f4 	      jsr	RDrawCharacterInfo
    311  c0db		       ee 00 00 	      inc	charIndex
    312  c0de		       85 02		      sta	WSYNC
    313  c0e0		       20 3d f4 	      jsr	RDrawCharacterInfo
    314  c0e3		       ee 00 00 	      inc	charIndex
    315  c0e6		       85 02		      sta	WSYNC
    316  c0e8		       20 3d f4 	      jsr	RDrawCharacterInfo
    317  c0eb
    318  c0eb		       a2 00		      ldx	#0
    319  c0ed		       86 04		      stx	NUSIZ0
    320  c0ef		       86 05		      stx	NUSIZ1
    321  c0f1		       86 25		      stx	VDELP0
    322  c0f3		       86 26		      stx	VDELP1
    323  c0f5		       8e 00 00 	      stx	charIndex
    324  c0f8
    325  c0f8		       a2 06		      ldx	#6	;This number is extremely arbitrary-- Because I don't really understand exactly how long the rendering of party info takes.
    326  c0fa
    327  c0fa				   RFinishMazePicture
    328  c0fa		       85 02		      sta	WSYNC
    329  c0fc		       ca		      dex
    330  c0fd		       d0 fb		      bne	RFinishMazePicture
    331  c0ff		       4c 7e f2 	      jmp	RAfterRendering
    332  c102
    333  c102
    334  c102
    335  c102
    336  c102
    337  c102				   RBattleRendering
    338  c102		       a2 04		      ldx	#4
    339  c104				   RWaitToDrawBattleBox
    340  c104		       85 02		      sta	WSYNC
    341  c106		       ca		      dex
    342  c107		       d0 fb		      bne	RWaitToDrawBattleBox
    343  c109
    344  c109		       4c c6 ff 	      jmp	RGoToEnemyDrawingBank
    345  c10c
    346  c10c				   RPlaceBattleText
    347  c10c		       a9 ff		      lda	#$FF
    348  c10e		       85 0e		      sta	PF1
    349  c110		       85 0f		      sta	PF2
    350  c112
    351  c112		       85 02		      sta	WSYNC
    352  c114		       a2 03		      ldx	#$03	;Triplicate
    353  c116		       86 04		      stx	NUSIZ0	;Set both duplication registers to triplicate the sprites.
    354  c118		       86 05		      stx	NUSIZ1
    355  c11a		       86 25		      stx	VDELP0
    356  c11c		       86 26		      stx	VDELP1
    357  c11e		       a9 00		      lda	#0
    358  c120		       85 1b		      sta	GRP0
    359  c122		       85 1c		      sta	GRP1
    360  c124		       85 1b		      sta	GRP0
    361  c126		       85 1c		      sta	GRP1
    362  c128
    363  c128		       a2 10		      ldx	#$10	;Moves one color clock to the left.
    364  c12a		       86 21		      stx	HMP1
    365  c12c
    366  c12c		       ea		      nop
    367  c12d		       ea		      nop
    368  c12e
    369  c12e		       85 10		      sta	RESP0
    370  c130		       85 11		      sta	RESP1
    371  c132
    372  c132		       85 02		      sta	WSYNC
    373  c134		       85 02		      sta	WSYNC
    374  c136		       85 2a		      sta	HMOVE
    375  c138
    376  c138		       a9 00		      lda	#0
    377  c13a		       85 0e		      sta	PF1
    378  c13c		       85 0f		      sta	PF2
    379  c13e		       85 0d		      sta	PF0
    380  c140
    381  c140		       a5 b9		      lda	currentMenu
    382  c142		       85 02		      sta	WSYNC
    383  c144
    384  c144		       10 03		      bpl	RGoToRDrawBattleText
    385  c146		       4c 4f f1 	      jmp	RDrawBattleMenu
    386  c149
    387  c149				   RGoToRDrawBattleText
    388  c149		       4c 16 f2 	      jmp	RDrawBattleText
    389  c14c				   RGoToPostDrawingBattleText
    390  c14c		       4c 3d f2 	      jmp	RPostDrawingBattleText
    391  c14f
    392  c14f				   RDrawBattleMenu
    393  c14f		       a2 ff		      ldx	#$FF	;-1
    394  c151		       86 bc		      stx	aoeTargetID
    395  c153				   RDrawBattleMenuLoop
    396  c153		       e6 bc		      inc	aoeTargetID	;Just for temporary storage of which line # this is
    397  c155		       a6 bc		      ldx	aoeTargetID
    398  c157		       e0 03		      cpx	#3
    399  c159		       b0 f1		      bcs	RGoToPostDrawingBattleText
    400  c15b		       b5 e9		      lda	menuLines,x
    401  c15d		       c9 ff		      cmp	#$FF
    402  c15f		       d0 0a		      bne	RNoBlankLines
    403  c161
    404  c161							;Need to waste a lot of time here
    405  c161		       a0 0e		      ldy	#14
    406  c163				   RDoNothingLoop
    407  c163		       85 02		      sta	WSYNC
    408  c165		       88		      dey
    409  c166		       d0 fb		      bne	RDoNothingLoop
    410  c168		       4c 53 f1 	      jmp	RDrawBattleMenuLoop
    411  c16b				   RNoBlankLines
    412  c16b		       85 02		      sta	WSYNC
    413  c16d		       a6 bc		      ldx	aoeTargetID
    414  c16f		       c9 00		      cmp	#$0
    415  c171		       10 47		      bpl	RShowBattlerName
    416  c173		       29 c0		      and	#$C0
    417  c175		       c9 80		      cmp	#$80
    418  c177		       f0 21		      beq	RShowBattleOptions
    419  c179				   RShowSpellOptions
    420  c179		       b5 e9		      lda	menuLines,x
    421  c17b		       29 3f		      and	#$3F
    422  c17d		       a8		      tay
    423  c17e		       b9 27 fb 	      lda	RSpellTextLookupTable,y
    424  c181		       85 b1		      sta	tempPointer1
    425  c183		       a9 f9		      lda	#(RFireText >> 8 & $FF)
    426  c185		       85 b2		      sta	tempPointer1+1
    427  c187		       a9 06		      lda	#TEXT_COLOR
    428  c189		       e4 ec		      cpx	highlightedLine
    429  c18b		       d0 03		      bne	RDontHighlightSpell
    430  c18d		       b9 6f fa 	      lda	RSpellColors,y
    431  c190				   RDontHighlightSpell
    432  c190		       85 06		      sta	COLUP0
    433  c192		       85 07		      sta	COLUP1
    434  c194
    435  c194		       20 86 f2 	      jsr	RDrawBattleMenuLine
    436  c197		       4c 53 f1 	      jmp	RDrawBattleMenuLoop
    437  c19a				   RShowBattleOptions
    438  c19a		       b5 e9		      lda	menuLines,x
    439  c19c		       29 0f		      and	#$0F
    440  c19e		       a8		      tay
    441  c19f		       b9 88 fa 	      lda	RBattleOptionsLookupTable,y
    442  c1a2		       85 b1		      sta	tempPointer1
    443  c1a4		       a9 fb		      lda	#(RFightText >> 8 & $FF)
    444  c1a6		       85 b2		      sta	tempPointer1+1
    445  c1a8		       a9 06		      lda	#TEXT_COLOR
    446  c1aa		       e4 ec		      cpx	highlightedLine
    447  c1ac		       d0 02		      bne	RDontHighlightBattleOption
    448  c1ae		       a9 0e		      lda	#TEXT_HIGHLIGHTED_COLOR
    449  c1b0				   RDontHighlightBattleOption
    450  c1b0		       85 06		      sta	COLUP0
    451  c1b2		       85 07		      sta	COLUP1
    452  c1b4		       20 86 f2 	      jsr	RDrawBattleMenuLine
    453  c1b7		       4c 53 f1 	      jmp	RDrawBattleMenuLoop
    454  c1ba				   RShowBattlerName
    455  c1ba		       29 04		      and	#$04
    456  c1bc		       d0 38		      bne	RShowEnemyName
    457  c1be				   RShowAllyName
    458  c1be		       85 02		      sta	WSYNC
    459  c1c0		       b5 e9		      lda	menuLines,x
    460  c1c2		       a8		      tay
    461  c1c3		       b9 85 00 	      lda	name1,y
    462  c1c6		       85 a8		      sta	temp1
    463  c1c8		       b9 89 00 	      lda	name2,y
    464  c1cb		       85 a9		      sta	temp2
    465  c1cd		       b9 8d 00 	      lda	name3,y
    466  c1d0		       85 aa		      sta	temp3
    467  c1d2		       b9 91 00 	      lda	name4,y
    468  c1d5		       85 ab		      sta	temp4
    469  c1d7		       b9 95 00 	      lda	name5,y
    470  c1da		       85 ad		      sta	temp5
    471  c1dc		       a9 00		      lda	#EMPTY
    472  c1de		       85 af		      sta	temp6
    473  c1e0
    474  c1e0		       b9 81 00 	      lda	char1,y
    475  c1e3		       29 0f		      and	#$0f
    476  c1e5		       a8		      tay
    477  c1e6		       b9 5f fa 	      lda	RClassColors,y
    478  c1e9		       85 06		      sta	COLUP0
    479  c1eb		       85 07		      sta	COLUP1
    480  c1ed
    481  c1ed		       20 fb f5 	      jsr	RSetTextPointers
    482  c1f0		       20 57 f6 	      jsr	RDrawText
    483  c1f3		       4c 53 f1 	      jmp	RDrawBattleMenuLoop
    484  c1f6				   RShowEnemyName
    485  c1f6		       b5 e9		      lda	menuLines,x
    486  c1f8		       38		      sec
    487  c1f9		       e9 04		      sbc	#4
    488  c1fb		       a8		      tay
    489  c1fc		       b9 da 00 	      lda	enemyID,y
    490  c1ff		       a8		      tay
    491  c200		       b9 8e fa 	      lda	REnemyNameLookup,y
    492  c203		       85 b1		      sta	tempPointer1
    493  c205		       a9 f8		      lda	#(RZombieText >> 8 & $FF)
    494  c207		       85 b2		      sta	tempPointer1+1
    495  c209		       b9 91 fa 	      lda	REnemyColorLookup,y
    496  c20c		       85 06		      sta	COLUP0
    497  c20e		       85 07		      sta	COLUP1
    498  c210
    499  c210		       20 86 f2 	      jsr	RDrawBattleMenuLine
    500  c213		       4c 53 f1 	      jmp	RDrawBattleMenuLoop
    501  c216				   RDrawBattleText
    502  c216		       a9 00		      lda	#0
    503  c218		       85 02		      sta	WSYNC
    504  c21a		       20 0d f3 	      jsr	RSetBattleMessage
    505  c21d		       20 fb f5 	      jsr	RSetTextPointers
    506  c220		       20 57 f6 	      jsr	RDrawText
    507  c223
    508  c223		       a9 01		      lda	#1
    509  c225		       85 02		      sta	WSYNC
    510  c227		       20 0d f3 	      jsr	RSetBattleMessage
    511  c22a		       20 fb f5 	      jsr	RSetTextPointers
    512  c22d		       20 57 f6 	      jsr	RDrawText
    513  c230
    514  c230		       a9 02		      lda	#2
    515  c232		       85 02		      sta	WSYNC
    516  c234		       20 0d f3 	      jsr	RSetBattleMessage
    517  c237		       20 fb f5 	      jsr	RSetTextPointers
    518  c23a		       20 57 f6 	      jsr	RDrawText
    519  c23d
    520  c23d				   RPostDrawingBattleText
    521  c23d		       85 02		      sta	WSYNC
    522  c23f		       20 85 f2 	      jsr	RSpinWheels
    523  c242		       20 85 f2 	      jsr	RSpinWheels
    524  c245		       20 85 f2 	      jsr	RSpinWheels
    525  c248		       85 14		      sta	RESBL
    526  c24a		       a9 01		      lda	#1
    527  c24c		       85 27		      sta	VDELBL
    528  c24e
    529  c24e		       a2 01		      ldx	#1
    530  c250				   RWaitToDrawPlayerText
    531  c250		       85 02		      sta	WSYNC
    532  c252		       ca		      dex
    533  c253		       d0 fb		      bne	RWaitToDrawPlayerText
    534  c255
    535  c255				   RDrawPartyInfoBattle
    536  c255		       20 3d f4 	      jsr	RDrawCharacterInfo
    537  c258		       ee 00 00 	      inc	charIndex
    538  c25b		       20 3d f4 	      jsr	RDrawCharacterInfo
    539  c25e		       ee 00 00 	      inc	charIndex
    540  c261		       20 3d f4 	      jsr	RDrawCharacterInfo
    541  c264		       ee 00 00 	      inc	charIndex
    542  c267		       20 3d f4 	      jsr	RDrawCharacterInfo
    543  c26a		       a9 00		      lda	#0
    544  c26c		       85 04		      sta	NUSIZ0
    545  c26e		       85 05		      sta	NUSIZ1
    546  c270		       85 25		      sta	VDELP0
    547  c272		       85 26		      sta	VDELP1
    548  c274		       8d 00 00 	      sta	charIndex
    549  c277
    550  c277		       a2 02		      ldx	#2
    551  c279				   RFinishBattlePicture
    552  c279		       85 02		      sta	WSYNC
    553  c27b		       ca		      dex
    554  c27c		       d0 fb		      bne	RFinishBattlePicture
    555  c27e
    556  c27e				   RAfterRendering
    557  c27e		       a9 82		      lda	#$82
    558  c280		       85 01		      sta	VBLANK	;Enable blanking
    559  c282		       4c e6 ff 	      jmp	RGoToOverscan
    560  c285
    561  c285
    562  c285
    563  c285
    564  c285
    565  c285
    566  c285				   RSpinWheels SUBROUTINE
    567  c285		       60		      rts
    568  c286
    569  c286				   RDrawBattleMenuLine SUBROUTINE		;Draws one line of battle menu text, using A as the color of the text, and tempPointer1 as the location to pull text data from.
    570  c286		       85 06		      sta	COLUP0
    571  c288		       85 07		      sta	COLUP1
    572  c28a
    573  c28a		       a0 00		      ldy	#0
    574  c28c		       b1 b1		      lda	(tempPointer1),y
    575  c28e		       85 a8		      sta	temp1
    576  c290		       c8		      iny
    577  c291		       b1 b1		      lda	(tempPointer1),y
    578  c293		       85 a9		      sta	temp2
    579  c295		       c8		      iny
    580  c296		       b1 b1		      lda	(tempPointer1),y
    581  c298		       85 aa		      sta	temp3
    582  c29a		       c8		      iny
    583  c29b		       b1 b1		      lda	(tempPointer1),y
    584  c29d		       85 ab		      sta	temp4
    585  c29f		       c8		      iny
    586  c2a0		       b1 b1		      lda	(tempPointer1),y
    587  c2a2		       85 ad		      sta	temp5
    588  c2a4		       c8		      iny
    589  c2a5		       b1 b1		      lda	(tempPointer1),y
    590  c2a7		       85 af		      sta	temp6
    591  c2a9
    592  c2a9		       20 fb f5 	      jsr	RSetTextPointers
    593  c2ac		       20 57 f6 	      jsr	RDrawText
    594  c2af		       60		      rts
    595  c2b0
    596  c2b0				   RMessageConstructors
    597  c2b0				   RXStabsY
    598  c2b0		       00		      .byte.b	$0
    599  c2b1		       04		      .byte.b	$4
    600  c2b2		       01		      .byte.b	$1
    601  c2b3				   RXShootsY
    602  c2b3		       00		      .byte.b	$0
    603  c2b4		       05		      .byte.b	$5
    604  c2b5		       01		      .byte.b	$1
    605  c2b6				   RXSlamsY
    606  c2b6		       00		      .byte.b	$0
    607  c2b7		       06		      .byte.b	$6
    608  c2b8		       01		      .byte.b	$1
    609  c2b9				   RXBitesY
    610  c2b9		       00		      .byte.b	$0
    611  c2ba		       07		      .byte.b	$7
    612  c2bb		       01		      .byte.b	$1
    613  c2bc				   RXRushesY
    614  c2bc		       00		      .byte.b	$0
    615  c2bd		       08		      .byte.b	$8
    616  c2be		       01		      .byte.b	$1
    617  c2bf				   RXCastsY
    618  c2bf		       00		      .byte.b	$0
    619  c2c0		       09		      .byte.b	$9
    620  c2c1		       02		      .byte.b	$2
    621  c2c2				   RXHealsYHP
    622  c2c2		       01		      .byte.b	$1
    623  c2c3		       0a		      .byte.b	$A
    624  c2c4		       03		      .byte.b	$3
    625  c2c5				   RXLosesYHP
    626  c2c5		       01		      .byte.b	$1
    627  c2c6		       0b		      .byte.b	$B
    628  c2c7		       03		      .byte.b	$3
    629  c2c8				   RXMisses
    630  c2c8		       00		      .byte.b	$0
    631  c2c9		       0c		      .byte.b	$C
    632  c2ca		       ff		      .byte.b	$FF
    633  c2cb				   RXDown
    634  c2cb		       01		      .byte.b	$1
    635  c2cc		       12		      .byte.b	$12
    636  c2cd		       ff		      .byte.b	$FF
    637  c2ce				   RXLevelsUp
    638  c2ce		       00		      .byte.b	$0
    639  c2cf		       0d		      .byte.b	$D
    640  c2d0		       0e		      .byte.b	$E
    641  c2d1				   RXLearnsY
    642  c2d1		       00		      .byte.b	$0
    643  c2d2		       0f		      .byte.b	$F
    644  c2d3		       02		      .byte.b	$2
    645  c2d4				   RXMovesUp
    646  c2d4		       00		      .byte.b	$0
    647  c2d5		       10		      .byte.b	$10
    648  c2d6		       0e		      .byte.b	$E
    649  c2d7				   RXBacksAway
    650  c2d7		       00		      .byte.b	$0
    651  c2d8		       11		      .byte.b	$11
    652  c2d9		       13		      .byte.b	$13
    653  c2da				   RXWastesAway
    654  c2da		       01		      .byte.b	$1
    655  c2db		       14		      .byte.b	$14
    656  c2dc		       13		      .byte.b	$13
    657  c2dd				   RXWasCured
    658  c2dd		       01		      .byte.b	$1
    659  c2de		       15		      .byte.b	$15
    660  c2df		       16		      .byte.b	$16
    661  c2e0				   RXHasAShield
    662  c2e0		       01		      .byte.b	$1
    663  c2e1		       18		      .byte.b	$18
    664  c2e2		       19		      .byte.b	$19
    665  c2e3				   RPartyDown
    666  c2e3		       1a		      .byte.b	$1A
    667  c2e4		       12		      .byte.b	$12
    668  c2e5		       ff		      .byte.b	$FF
    669  c2e6				   RPartyFlees
    670  c2e6		       1a		      .byte.b	$1A
    671  c2e7		       1b		      .byte.b	$1B
    672  c2e8		       ff		      .byte.b	$FF
    673  c2e9				   RPartyWins
    674  c2e9		       1a		      .byte.b	$1A
    675  c2ea		       1c		      .byte.b	$1C
    676  c2eb		       ff		      .byte.b	$FF
    677  c2ec				   RXTriesToRun
    678  c2ec		       00		      .byte.b	$0
    679  c2ed		       1d		      .byte.b	$1D
    680  c2ee		       1e		      .byte.b	$1E
    681  c2ef				   RNoEffect
    682  c2ef		       1f		      .byte.b	$1F
    683  c2f0		       20		      .byte.b	$20
    684  c2f1		       ff		      .byte.b	$FF
    685  c2f2				   RXCannotEscape
    686  c2f2		       00		      .byte.b	$0
    687  c2f3		       21		      .byte.b	$21
    688  c2f4		       22		      .byte.b	$22
    689  c2f5				   RXExiled
    690  c2f5		       01		      .byte.b	$1
    691  c2f6		       2a		      .byte.b	$2A
    692  c2f7		       ff		      .byte.b	$FF
    693  c2f8				   RXWakesUp
    694  c2f8		       00		      .byte.b	$0
    695  c2f9		       17		      .byte.b	$17
    696  c2fa		       0e		      .byte.b	$E
    697  c2fb				   RXGuardsY
    698  c2fb		       00		      .byte.b	$0
    699  c2fc		       23		      .byte.b	$23
    700  c2fd		       01		      .byte.b	$1
    701  c2fe				   RXAttackUp
    702  c2fe		       01		      .byte.b	$1
    703  c2ff		       24		      .byte.b	$24
    704  c300		       0e		      .byte.b	$E
    705  c301				   RXFellAsleep
    706  c301		       01		      .byte.b	$1
    707  c302		       25		      .byte.b	$25
    708  c303		       26		      .byte.b	$26
    709  c304				   RXIsAsleep
    710  c304		       00		      .byte.b	$0
    711  c305		       27		      .byte.b	$27
    712  c306		       26		      .byte.b	$26
    713  c307				   RXEvades
    714  c307		       00		      .byte.b	$0
    715  c308		       28		      .byte.b	$28
    716  c309		       ff		      .byte.b	$FF
    717  c30a				   RXShieldFades
    718  c30a		       00		      .byte.b	$0
    719  c30b		       19		      .byte.b	$19
    720  c30c		       29		      .byte.b	$29
    721  c30d
    722  c30d				   RSetBattleMessage SUBROUTINE		;Uses the currentMessage to set the temp1-temp6 values correctly. Interprets A as the line of the message to set.
    723  c30d		       a0 0e		      ldy	#TEXT_HIGHLIGHTED_COLOR
    724  c30f		       84 06		      sty	COLUP0
    725  c311		       84 07		      sty	COLUP1
    726  c313		       18		      clc
    727  c314		       65 e8		      adc	currentMessage
    728  c316		       65 e8		      adc	currentMessage
    729  c318		       65 e8		      adc	currentMessage	;Calculate the correct offset
    730  c31a		       aa		      tax
    731  c31b		       bd b0 f2 	      lda	RMessageConstructors,x	;Find what needs to be shown on this exact line
    732  c31e		       30 10		      bmi	.RGoToAllEmpty
    733  c320		       aa		      tax
    734  c321		       f0 10		      beq	.RGoToSourceBattlerName
    735  c323		       ca		      dex
    736  c324		       f0 10		      beq	.RGoToTargetBattlerName
    737  c326		       ca		      dex
    738  c327		       f0 10		      beq	.RGoToSpellName
    739  c329		       ca		      dex
    740  c32a		       f0 10		      beq	.RGoToHPCount
    741  c32c		       ca		      dex
    742  c32d		       4c 3f f3 	      jmp	.RGeneralMessageStructure
    743  c330				   .RGoToAllEmpty
    744  c330		       4c 2a f4 	      jmp	.RAllEmpty
    745  c333				   .RGoToSourceBattlerName
    746  c333		       4c 51 f3 	      jmp	.RSourceBattlerName
    747  c336				   .RGoToTargetBattlerName
    748  c336		       4c 97 f3 	      jmp	.RTargetBattlerName
    749  c339				   .RGoToSpellName
    750  c339		       4c de f3 	      jmp	.RSpellName
    751  c33c				   .RGoToHPCount
    752  c33c		       4c f2 f3 	      jmp	.RHPCount
    753  c33f
    754  c33f				   .RGeneralMessageStructure
    755  c33f		       bd 00 fb 	      lda	RMessagesLowLookup,x
    756  c342		       85 b1		      sta	tempPointer1
    757  c344		       a9 f9		      lda	#(RStabsText >> 8 & $FF)
    758  c346		       e0 17		      cpx	#$17
    759  c348		       90 02		      bcc	.RNormalMessagePage
    760  c34a				   .ROtherMessagePage
    761  c34a		       a9 fa		      lda	#(RToRunText >> 8 & $FF)
    762  c34c				   .RNormalMessagePage
    763  c34c		       85 b2		      sta	tempPointer1+1
    764  c34e		       4c 0a f4 	      jmp	.RSetTempVariables
    765  c351				   .RSourceBattlerName
    766  c351		       a6 c0		      ldx	currentBattler
    767  c353		       e0 04		      cpx	#4
    768  c355		       b0 25		      bcs	.REnemySourceBattlerName
    769  c357				   .RAllySourceBattlerName
    770  c357		       b5 81		      lda	char1,x
    771  c359		       29 0f		      and	#$0F
    772  c35b		       a8		      tay
    773  c35c		       b9 5f fa 	      lda	RClassColors,y
    774  c35f		       85 06		      sta	COLUP0
    775  c361		       85 07		      sta	COLUP1
    776  c363		       b5 85		      lda	name1,x
    777  c365		       85 a8		      sta	temp1
    778  c367		       b5 89		      lda	name2,x
    779  c369		       85 a9		      sta	temp2
    780  c36b		       b5 8d		      lda	name3,x
    781  c36d		       85 aa		      sta	temp3
    782  c36f		       b5 91		      lda	name4,x
    783  c371		       85 ab		      sta	temp4
    784  c373		       b5 95		      lda	name5,x
    785  c375		       85 ad		      sta	temp5
    786  c377		       a9 00		      lda	#EMPTY
    787  c379		       85 af		      sta	temp6
    788  c37b		       60		      rts
    789  c37c				   .REnemySourceBattlerName
    790  c37c		       ca		      dex
    791  c37d		       ca		      dex
    792  c37e		       ca		      dex
    793  c37f		       ca		      dex
    794  c380		       b5 da		      lda	enemyID,x
    795  c382		       29 3f		      and	#$3F	;Get just the enemyID
    796  c384		       aa		      tax
    797  c385		       bd 91 fa 	      lda	REnemyColorLookup,x
    798  c388		       85 06		      sta	COLUP0
    799  c38a		       85 07		      sta	COLUP1
    800  c38c		       bd 8e fa 	      lda	REnemyNameLookup,x
    801  c38f		       85 b1		      sta	tempPointer1
    802  c391		       a9 f8		      lda	#(RZombieText >> 8 & $FF)
    803  c393		       85 b2		      sta	tempPointer1+1
    804  c395		       d0 73		      bne	.RSetTempVariables	;Should always be true, just saves a byte over jmp
    805  c397				   .RTargetBattlerName
    806  c397		       a6 bb		      ldx	startingCursorIndexAndTargetID
    807  c399		       e0 04		      cpx	#4
    808  c39b		       b0 25		      bcs	.REnemyIsTargeted
    809  c39d				   .RAllyIsTargeted
    810  c39d		       b5 81		      lda	char1,x
    811  c39f		       29 0f		      and	#$0F
    812  c3a1		       a8		      tay
    813  c3a2		       b9 5f fa 	      lda	RClassColors,y
    814  c3a5		       85 06		      sta	COLUP0
    815  c3a7		       85 07		      sta	COLUP1
    816  c3a9		       b5 85		      lda	name1,x
    817  c3ab		       85 a8		      sta	temp1
    818  c3ad		       b5 89		      lda	name2,x
    819  c3af		       85 a9		      sta	temp2
    820  c3b1		       b5 8d		      lda	name3,x
    821  c3b3		       85 aa		      sta	temp3
    822  c3b5		       b5 91		      lda	name4,x
    823  c3b7		       85 ab		      sta	temp4
    824  c3b9		       b5 95		      lda	name5,x
    825  c3bb		       85 ad		      sta	temp5
    826  c3bd		       a9 00		      lda	#EMPTY
    827  c3bf		       85 af		      sta	temp6
    828  c3c1		       60		      rts
    829  c3c2				   .REnemyIsTargeted
    830  c3c2		       ca		      dex
    831  c3c3		       ca		      dex
    832  c3c4		       ca		      dex
    833  c3c5		       ca		      dex
    834  c3c6		       b5 da		      lda	enemyID,x
    835  c3c8		       29 3f		      and	#$3F	;Get just the enemyID
    836  c3ca		       aa		      tax
    837  c3cb		       bd 91 fa 	      lda	REnemyColorLookup,x
    838  c3ce		       85 06		      sta	COLUP0
    839  c3d0		       85 07		      sta	COLUP1
    840  c3d2		       bd 8e fa 	      lda	REnemyNameLookup,x
    841  c3d5		       85 b1		      sta	tempPointer1
    842  c3d7		       a9 f8		      lda	#(RZombieText >> 8 & $FF)
    843  c3d9		       85 b2		      sta	tempPointer1+1
    844  c3db		       d0 2d		      bne	.RSetTempVariables	;Should always be true, just saves a byte over jmp
    845  c3dd		       60		      rts
    846  c3de				   .RSpellName
    847  c3de		       a6 ba		      ldx	cursorIndexAndMessageY
    848  c3e0		       bd 27 fb 	      lda	RSpellTextLookupTable,x
    849  c3e3		       85 b1		      sta	tempPointer1
    850  c3e5		       bd 6f fa 	      lda	RSpellColors,x
    851  c3e8		       85 06		      sta	COLUP0
    852  c3ea		       85 07		      sta	COLUP1
    853  c3ec		       a9 f9		      lda	#(RFireText >> 8 & $FF)
    854  c3ee		       85 b2		      sta	tempPointer1+1
    855  c3f0		       d0 18		      bne	.RSetTempVariables	;Should always be true, just saves a byte over jmp
    856  c3f2				   .RHPCount
    857  c3f2		       a5 ba		      lda	cursorIndexAndMessageY
    858  c3f4		       20 44 f6 	      jsr	RCalculateDigitIndices
    859  c3f7		       84 a8		      sty	temp1
    860  c3f9		       86 a9		      stx	temp2
    861  c3fb		       a9 00		      lda	#EMPTY
    862  c3fd		       85 aa		      sta	temp3
    863  c3ff		       85 af		      sta	temp6
    864  c401		       a9 08		      lda	#H
    865  c403		       85 ab		      sta	temp4
    866  c405		       a9 10		      lda	#P
    867  c407		       85 ad		      sta	temp5
    868  c409		       60		      rts
    869  c40a				   .RSetTempVariables
    870  c40a		       a0 00		      ldy	#0
    871  c40c		       b1 b1		      lda	(tempPointer1),y
    872  c40e		       85 a8		      sta	temp1
    873  c410		       c8		      iny
    874  c411		       b1 b1		      lda	(tempPointer1),y
    875  c413		       85 a9		      sta	temp2
    876  c415		       c8		      iny
    877  c416		       b1 b1		      lda	(tempPointer1),y
    878  c418		       85 aa		      sta	temp3
    879  c41a		       c8		      iny
    880  c41b		       b1 b1		      lda	(tempPointer1),y
    881  c41d		       85 ab		      sta	temp4
    882  c41f		       c8		      iny
    883  c420		       b1 b1		      lda	(tempPointer1),y
    884  c422		       85 ad		      sta	temp5
    885  c424		       c8		      iny
    886  c425		       b1 b1		      lda	(tempPointer1),y
    887  c427		       85 af		      sta	temp6
    888  c429		       60		      rts
    889  c42a				   .RAllEmpty
    890  c42a		       85 02		      sta	WSYNC
    891  c42c		       85 02		      sta	WSYNC
    892  c42e		       a9 00		      lda	#EMPTY
    893  c430		       85 a8		      sta	temp1
    894  c432		       85 a9		      sta	temp2
    895  c434		       85 aa		      sta	temp3
    896  c436		       85 ab		      sta	temp4
    897  c438		       85 ad		      sta	temp5
    898  c43a		       85 af		      sta	temp6
    899  c43c		       60		      rts
    900  c43d
    901  c43d				   RDrawCharacterInfo SUBROUTINE
    902  c43d		       ae 00 00 	      ldx	charIndex	;Determine which character's data is about to be drawn
    903  c440		       b5 81		      lda	char1,x
    904  c442		       29 0f		      and	#$0F	;Get the class of this character
    905  c444		       a8		      tay
    906  c445
    907  c445		       a5 a1		      lda	partyBattlePos
    908  c447		       3d 9a fc 	      and	RPartyPositionMasks,x
    909  c44a		       f0 05		      beq	.RBackline
    910  c44c				   .RFrontline
    911  c44c		       a9 2a		      lda	#FRONTLINE_INDICATOR_COLOR
    912  c44e		       4c 53 f4 	      jmp	.RStoreIndicatorColor
    913  c451				   .RBackline
    914  c451		       a9 8a		      lda	#BACKLINE_INDICATOR_COLOR
    915  c453				   .RStoreIndicatorColor
    916  c453		       85 08		      sta	COLUPF
    917  c455
    918  c455		       85 02		      sta	WSYNC
    919  c457		       a5 b9		      lda	currentMenu
    920  c459		       f0 18		      beq	.RNoHighlighting
    921  c45b		       e4 bd		      cpx	highlightedIndex
    922  c45d		       d0 14		      bne	.RNoHighlighting
    923  c45f		       a5 ef		      lda	currentEffect	;Should be highlighting, and this is the currently hovered character
    924  c461		       c9 01		      cmp	#$1
    925  c463		       d0 0e		      bne	.RNoHighlighting
    926  c465		       a5 f1		      lda	effectCountdown
    927  c467		       29 10		      and	#$10
    928  c469		       f0 08		      beq	.RNoHighlighting
    929  c46b		       a9 0e		      lda	#TEXT_HIGHLIGHTED_COLOR
    930  c46d		       85 06		      sta	COLUP0
    931  c46f		       85 07		      sta	COLUP1
    932  c471		       d0 07		      bne	.RPostClassColorSetting	;this should always branch, just saves one byte over jmp
    933  c473				   .RNoHighlighting
    934  c473		       b9 5f fa 	      lda	RClassColors,y	;Get the color that corresponds with this class, and set both players to use that color
    935  c476		       85 06		      sta	COLUP0
    936  c478		       85 07		      sta	COLUP1
    937  c47a				   .RPostClassColorSetting
    938  c47a
    939  c47a		       a5 bf		      lda	inBattle
    940  c47c		       f0 16		      beq	.RNotInBattle
    941  c47e		       d0 03		      bne	.RInBattle
    942  c480				   .RGoToShowingHPAndMP
    943  c480		       4c 19 f5 	      jmp	.RShowingHPAndMP
    944  c483
    945  c483				   .RInBattle
    946  c483		       a9 40		      lda	#LEFT_MASK	;Show HP and MP if the joystick is being held down, else show name and avatar
    947  c485		       2c 80 02 	      bit	SWCHA
    948  c488		       f0 f6		      beq	.RGoToShowingHPAndMP
    949  c48a		       a9 80		      lda	#RIGHT_MASK
    950  c48c		       2c 80 02 	      bit	SWCHA
    951  c48f		       d0 11		      bne	.RSetupMood
    952  c491		       4c 80 f5 	      jmp	.RShowingClassAndLevel
    953  c494				   .RNotInBattle
    954  c494		       a5 b9		      lda	currentMenu
    955  c496		       d0 0a		      bne	.RSetupMood
    956  c498		       a9 20		      lda	#DOWN_MASK
    957  c49a		       2c 80 02 	      bit	SWCHA
    958  c49d		       d0 03		      bne	.RSetupMood
    959  c49f		       4c 80 f5 	      jmp	.RShowingClassAndLevel	;Should this be class and level or hp and mp? --Currently going with class and level, because it runs fast enough.
    960  c4a2
    961  c4a2				   .RSetupMood
    962  c4a2							;Need to set the mood picture and name
    963  c4a2
    964  c4a2		       b5 85		      lda	name1,x
    965  c4a4		       85 a9		      sta	temp2
    966  c4a6		       b5 89		      lda	name2,x
    967  c4a8		       85 aa		      sta	temp3
    968  c4aa		       b5 8d		      lda	name3,x
    969  c4ac		       85 ab		      sta	temp4
    970  c4ae		       b5 91		      lda	name4,x
    971  c4b0		       85 ad		      sta	temp5
    972  c4b2		       b5 95		      lda	name5,x
    973  c4b4		       85 af		      sta	temp6
    974  c4b6		       20 fb f5 	      jsr	RSetTextPointers
    975  c4b9
    976  c4b9		       a5 b9		      lda	currentMenu
    977  c4bb		       d0 02		      bne	.RCurrentlyInMenu
    978  c4bd		       85 02		      sta	WSYNC
    979  c4bf				   .RCurrentlyInMenu
    980  c4bf
    981  c4bf		       ae 00 00 	      ldx	charIndex
    982  c4c2		       b5 81		      lda	char1,x
    983  c4c4		       4a		      lsr
    984  c4c5		       4a		      lsr
    985  c4c6		       4a		      lsr
    986  c4c7		       4a		      lsr
    987  c4c8		       29 0f		      and	#$0F
    988  c4ca		       a8		      tay
    989  c4cb				   .RSelectedMood
    990  c4cb		       b9 9e fc 	      lda	RMoodLookupTable,y
    991  c4ce		       85 b1		      sta	tempPointer1
    992  c4d0		       a9 fc		      lda	#(RAvatarHappy >> 8 & $FF)
    993  c4d2		       85 b2		      sta	tempPointer1+1
    994  c4d4
    995  c4d4		       a5 bf		      lda	inBattle
    996  c4d6		       f0 02		      beq	.RNoExtraLine
    997  c4d8		       85 02		      sta	WSYNC
    998  c4da				   .RNoExtraLine
    999  c4da
   1000  c4da		       a9 02		      lda	#2
   1001  c4dc		       85 1f		      sta	ENABL
   1002  c4de		       a0 07		      ldy	#CHARACTER_HEIGHT-1
   1003  c4e0		       c5 a8		      cmp	temp1	;Just used to delay 3 cycles
   1004  c4e2				   .RDrawAvatarAndName
   1005  c4e2		       84 a8		      sty	temp1	;Stores how many loops are left
   1006  c4e4		       b1 af		      lda	(temp6),y
   1007  c4e6		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1008  c4e8		       85 02		      sta	WSYNC
   1009  c4ea		       b1 b1		      lda	(tempPointer1),y
   1010  c4ec		       85 1b		      sta	GRP0
   1011  c4ee		       b1 b3		      lda	(tempPointer2),y
   1012  c4f0		       85 1c		      sta	GRP1
   1013  c4f2		       b1 b5		      lda	(tempPointer3),y
   1014  c4f4		       85 1b		      sta	GRP0
   1015  c4f6		       b1 ad		      lda	(temp5),y
   1016  c4f8		       aa		      tax
   1017  c4f9		       b1 ab		      lda	(temp4),y
   1018  c4fb		       a4 a9		      ldy	temp2
   1019  c4fd		       ea		      nop
   1020  c4fe		       85 1c		      sta	GRP1
   1021  c500		       86 1b		      stx	GRP0
   1022  c502		       84 1c		      sty	GRP1
   1023  c504		       85 1b		      sta	GRP0
   1024  c506
   1025  c506		       a4 a8		      ldy	temp1
   1026  c508		       88		      dey
   1027  c509		       10 d7		      bpl	.RDrawAvatarAndName
   1028  c50b
   1029  c50b		       c8		      iny
   1030  c50c		       84 1f		      sty	ENABL
   1031  c50e		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1032  c510		       84 1c		      sty	GRP1
   1033  c512		       84 1f		      sty	ENABL
   1034  c514		       84 1b		      sty	GRP0
   1035  c516		       84 1c		      sty	GRP1
   1036  c518		       60		      rts
   1037  c519
   1038  c519				   .RShowingHPAndMP
   1039  c519		       ae 00 00 	      ldx	charIndex
   1040  c51c		       b5 99		      lda	hp1,x
   1041  c51e		       a0 08		      ldy	#H
   1042  c520		       84 a8		      sty	temp1	;HP indicator
   1043  c522
   1044  c522		       20 44 f6 	      jsr	RCalculateDigitIndices
   1045  c525		       86 aa		      stx	temp3	;The low digit of the HP value
   1046  c527		       84 a9		      sty	temp2	;The high digit of the HP value
   1047  c529
   1048  c529		       ae 00 00 	      ldx	charIndex
   1049  c52c		       b5 9d		      lda	mp1,x
   1050  c52e		       a0 0d		      ldy	#M
   1051  c530		       84 ab		      sty	temp4	;MP indicator
   1052  c532
   1053  c532		       20 44 f6 	      jsr	RCalculateDigitIndices
   1054  c535		       86 af		      stx	temp6	;The low digit of the MP value
   1055  c537		       84 ad		      sty	temp5	;The high digit of the MP value
   1056  c539
   1057  c539		       20 fb f5 	      jsr	RSetTextPointers
   1058  c53c
   1059  c53c		       a5 bf		      lda	inBattle
   1060  c53e		       f0 02		      beq	.RSkipThisLine
   1061  c540		       85 02		      sta	WSYNC
   1062  c542				   .RSkipThisLine
   1063  c542		       a9 02		      lda	#2
   1064  c544		       85 1f		      sta	ENABL
   1065  c546
   1066  c546		       a0 08		      ldy	#CHARACTER_HEIGHT
   1067  c548		       88		      dey
   1068  c549				   .RDrawHPAndMP
   1069  c549		       84 a8		      sty	temp1	;Stores how many loops are left
   1070  c54b		       b1 af		      lda	(temp6),y
   1071  c54d		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1072  c54f		       85 02		      sta	WSYNC
   1073  c551		       b1 b1		      lda	(tempPointer1),y
   1074  c553		       85 1b		      sta	GRP0
   1075  c555		       b1 b3		      lda	(tempPointer2),y
   1076  c557		       85 1c		      sta	GRP1
   1077  c559		       b1 b5		      lda	(tempPointer3),y
   1078  c55b		       85 1b		      sta	GRP0
   1079  c55d		       b1 ad		      lda	(temp5),y
   1080  c55f		       aa		      tax
   1081  c560		       b1 ab		      lda	(temp4),y
   1082  c562		       a4 a9		      ldy	temp2
   1083  c564		       ea		      nop
   1084  c565		       85 1c		      sta	GRP1
   1085  c567		       86 1b		      stx	GRP0
   1086  c569		       84 1c		      sty	GRP1
   1087  c56b		       85 1b		      sta	GRP0
   1088  c56d		       a4 a8		      ldy	temp1
   1089  c56f		       88		      dey
   1090  c570		       10 d7		      bpl	.RDrawHPAndMP
   1091  c572
   1092  c572		       c8		      iny
   1093  c573		       84 1f		      sty	ENABL
   1094  c575		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1095  c577		       84 1c		      sty	GRP1
   1096  c579		       84 1f		      sty	ENABL
   1097  c57b		       84 1b		      sty	GRP0
   1098  c57d		       84 1c		      sty	GRP1
   1099  c57f
   1100  c57f		       60		      rts
   1101  c580
   1102  c580				   .RShowingClassAndLevel
   1103  c580		       ae 00 00 	      ldx	charIndex
   1104  c583		       b5 81		      lda	char1,x	;Format is -MMM-CCC
   1105  c585		       29 0f		      and	#$0F
   1106  c587		       aa		      tax
   1107  c588		       bd 82 fa 	      lda	RClassNameLookupTable,x
   1108  c58b		       85 b1		      sta	tempPointer1
   1109  c58d		       a9 fb		      lda	#$FB
   1110  c58f		       85 b2		      sta	tempPointer1+1
   1111  c591
   1112  c591		       a0 00		      ldy	#0
   1113  c593		       b1 b1		      lda	(tempPointer1),y
   1114  c595		       85 a8		      sta	temp1
   1115  c597		       c8		      iny
   1116  c598		       b1 b1		      lda	(tempPointer1),y
   1117  c59a		       85 a9		      sta	temp2
   1118  c59c		       c8		      iny
   1119  c59d		       b1 b1		      lda	(tempPointer1),y
   1120  c59f		       85 aa		      sta	temp3
   1121  c5a1		       c8		      iny
   1122  c5a2		       b1 b1		      lda	(tempPointer1),y
   1123  c5a4		       85 ab		      sta	temp4
   1124  c5a6		       c8		      iny
   1125  c5a7		       b1 b1		      lda	(tempPointer1),y
   1126  c5a9		       85 ad		      sta	temp5
   1127  c5ab		       c8		      iny
   1128  c5ac		       b1 b1		      lda	(tempPointer1),y
   1129  c5ae		       85 af		      sta	temp6
   1130  c5b0
   1131  c5b0		       20 fb f5 	      jsr	RSetTextPointers
   1132  c5b3
   1133  c5b3		       ea		      nop
   1134  c5b4		       ea		      nop
   1135  c5b5		       ea		      nop
   1136  c5b6		       ea		      nop
   1137  c5b7		       a5 bf		      lda	inBattle
   1138  c5b9		       f0 02		      beq	.RSkipExtraClassLevelLine
   1139  c5bb		       85 02		      sta	WSYNC
   1140  c5bd				   .RSkipExtraClassLevelLine
   1141  c5bd		       a9 02		      lda	#2
   1142  c5bf		       85 1f		      sta	ENABL
   1143  c5c1
   1144  c5c1		       a0 08		      ldy	#CHARACTER_HEIGHT
   1145  c5c3		       88		      dey
   1146  c5c4				   .RDrawClassAndLevel
   1147  c5c4		       84 a8		      sty	temp1	;Stores how many loops are left
   1148  c5c6		       b1 af		      lda	(temp6),y
   1149  c5c8		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1150  c5ca		       85 02		      sta	WSYNC
   1151  c5cc		       b1 b1		      lda	(tempPointer1),y
   1152  c5ce		       85 1b		      sta	GRP0
   1153  c5d0		       b1 b3		      lda	(tempPointer2),y
   1154  c5d2		       85 1c		      sta	GRP1
   1155  c5d4		       b1 b5		      lda	(tempPointer3),y
   1156  c5d6		       85 1b		      sta	GRP0
   1157  c5d8		       b1 ad		      lda	(temp5),y
   1158  c5da		       aa		      tax
   1159  c5db		       b1 ab		      lda	(temp4),y
   1160  c5dd		       a4 a9		      ldy	temp2
   1161  c5df		       ea		      nop
   1162  c5e0		       85 1c		      sta	GRP1
   1163  c5e2		       86 1b		      stx	GRP0
   1164  c5e4		       84 1c		      sty	GRP1
   1165  c5e6		       85 1b		      sta	GRP0
   1166  c5e8		       a4 a8		      ldy	temp1
   1167  c5ea		       88		      dey
   1168  c5eb		       10 d7		      bpl	.RDrawClassAndLevel
   1169  c5ed
   1170  c5ed		       c8		      iny
   1171  c5ee		       84 1f		      sty	ENABL
   1172  c5f0		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1173  c5f2		       84 1c		      sty	GRP1
   1174  c5f4		       84 1f		      sty	ENABL
   1175  c5f6		       84 1b		      sty	GRP0
   1176  c5f8		       84 1c		      sty	GRP1
   1177  c5fa		       60		      rts
   1178  c5fb
   1179  c5fb				   RSetTextPointers SUBROUTINE		;Will treat the values in temp1-6 as character indices and stores the pointers to the graphics data in tempPointer6-tempPointer1 
   1180  c5fb		       a6 a8		      ldx	temp1
   1181  c5fd		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1182  c600		       85 b1		      sta	tempPointer1
   1183  c602		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1184  c605		       85 b2		      sta	tempPointer1+1
   1185  c607		       a6 a9		      ldx	temp2
   1186  c609		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1187  c60c		       85 b3		      sta	tempPointer2
   1188  c60e		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1189  c611		       85 b4		      sta	tempPointer2+1
   1190  c613		       a6 aa		      ldx	temp3
   1191  c615		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1192  c618		       85 b5		      sta	tempPointer3
   1193  c61a		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1194  c61d		       85 b6		      sta	tempPointer3+1
   1195  c61f		       a6 ab		      ldx	temp4
   1196  c621		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1197  c624		       85 ab		      sta	temp4
   1198  c626		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1199  c629		       85 ac		      sta	tempPointer4
   1200  c62b		       a6 ad		      ldx	temp5
   1201  c62d		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1202  c630		       85 ad		      sta	temp5
   1203  c632		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1204  c635		       85 ae		      sta	tempPointer5
   1205  c637		       a6 af		      ldx	temp6
   1206  c639		       bd ac fb 	      lda	RCharacterLowLookupTable,x
   1207  c63c		       85 af		      sta	temp6
   1208  c63e		       bd d1 fb 	      lda	RCharacterHighLookupTable,x
   1209  c641		       85 b0		      sta	tempPointer6
   1210  c643		       60		      rts
   1211  c644
   1212  c644				   RCalculateDigitIndices SUBROUTINE		;Will interpret whatever is in A when called as a decimal value, then return the character lookup indices in X and Y.
   1213  c644		       a8		      tay
   1214  c645		       29 0f		      and	#$0F
   1215  c647		       18		      clc
   1216  c648		       69 1b		      adc	#27
   1217  c64a		       aa		      tax		;Character index corresponding to low digit of the specified decimal value is now in the x register.
   1218  c64b		       98		      tya
   1219  c64c		       4a		      lsr
   1220  c64d		       4a		      lsr
   1221  c64e		       4a		      lsr
   1222  c64f		       4a		      lsr
   1223  c650		       29 0f		      and	#$0F
   1224  c652		       18		      clc
   1225  c653		       69 1b		      adc	#27
   1226  c655		       a8		      tay		;Character index corresponding to high digit of the specified decimal value is now in the y register.
   1227  c656		       60		      rts
   1228  c657
   1229  c657
   1230  c657
   1231  c657				   RDrawText  SUBROUTINE		;Will update graphics registers accordingly as long as the sprites are positioned correctly and the pointers set.
   1232  c657		       85 02		      sta	WSYNC
   1233  c659		       a0 07		      ldy	#CHARACTER_HEIGHT-1
   1234  c65b		       c5 a8		      cmp	temp1	;Just used to delay 3 cycles
   1235  c65d				   .RTextLoop
   1236  c65d		       84 a8		      sty	temp1	;Stores how many loops are left
   1237  c65f		       b1 af		      lda	(temp6),y
   1238  c661		       85 a9		      sta	temp2	;Stores another digit that doesn't have a register to stay in
   1239  c663		       85 02		      sta	WSYNC
   1240  c665		       b1 b1		      lda	(tempPointer1),y
   1241  c667		       85 1b		      sta	GRP0
   1242  c669		       b1 b3		      lda	(tempPointer2),y
   1243  c66b		       85 1c		      sta	GRP1
   1244  c66d		       b1 b5		      lda	(tempPointer3),y
   1245  c66f		       85 1b		      sta	GRP0
   1246  c671		       b1 ad		      lda	(temp5),y
   1247  c673		       aa		      tax
   1248  c674		       b1 ab		      lda	(temp4),y
   1249  c676		       a4 a9		      ldy	temp2
   1250  c678		       ea		      nop
   1251  c679		       85 1c		      sta	GRP1
   1252  c67b		       86 1b		      stx	GRP0
   1253  c67d		       84 1c		      sty	GRP1
   1254  c67f		       85 1b		      sta	GRP0
   1255  c681		       a4 a8		      ldy	temp1
   1256  c683		       88		      dey
   1257  c684		       10 d7		      bpl	.RTextLoop
   1258  c686
   1259  c686		       c8		      iny
   1260  c687		       84 1b		      sty	GRP0	;Clear player graphics while HP, MP data is being prepared
   1261  c689		       84 1c		      sty	GRP1
   1262  c68b		       84 1b		      sty	GRP0
   1263  c68d		       84 1c		      sty	GRP1
   1264  c68f		       60		      rts
   1265  c690
   1266  c690				   RIndexToEnemyPosition SUBROUTINE		;Converts the position of a menu cursor into the correct location in the enemyID array of the target
   1267  c690		       a0 00		      ldy	#0
   1268  c692		       e8		      inx
   1269  c693				   .RIndexConversionLoop
   1270  c693		       b9 d6 00 	      lda	enemyHP,y
   1271  c696		       c9 00		      cmp	#0
   1272  c698		       f0 03		      beq	.RNoHit
   1273  c69a		       ca		      dex
   1274  c69b		       f0 04		      beq	.RDone
   1275  c69d				   .RNoHit
   1276  c69d		       c8		      iny
   1277  c69e		       4c 93 f6 	      jmp	.RIndexConversionLoop
   1278  c6a1				   .RDone
   1279  c6a1		       60		      rts		;Y is the correct offset into the enemyID array
   1280  c6a2
   1281  c810					      ORG	$C810	;Used to hold enemy names, nothing else can go in this section
   1282  c810					      RORG	$F810
   1283  c810
   1284  c810				   RZombieText
   1285  c810		       1a		      .byte.b	#Z
   1286  c811		       0f		      .byte.b	#O
   1287  c812		       0d		      .byte.b	#M
   1288  c813		       02		      .byte.b	#B
   1289  c814		       09		      .byte.b	#I
   1290  c815		       05		      .byte.b	#E
   1291  c816				   RGiantText
   1292  c816		       07		      .byte.b	#G
   1293  c817		       09		      .byte.b	#I
   1294  c818		       01		      .byte.b	#A
   1295  c819		       0e		      .byte.b	#N
   1296  c81a		       14		      .byte.b	#T
   1297  c81b		       00		      .byte.b	#EMPTY
   1298  c81c				   RDragonText
   1299  c81c		       04		      .byte.b	#D
   1300  c81d		       12		      .byte.b	#R
   1301  c81e		       01		      .byte.b	#A
   1302  c81f		       07		      .byte.b	#G
   1303  c820		       0f		      .byte.b	#O
   1304  c821		       0e		      .byte.b	#N
   1305  c822
   1306  c900					      ORG	$C900	;Used to hold text.
   1307  c900					      RORG	$F900
   1308  c900
   1309  c900				   RBackText
   1310  c900		       02		      .byte.b	#B
   1311  c901		       01		      .byte.b	#A
   1312  c902		       03		      .byte.b	#C
   1313  c903		       0b		      .byte.b	#K
   1314  c904		       00		      .byte.b	#EMPTY
   1315  c905		       00		      .byte.b	#EMPTY
   1316  c906				   RFireText
   1317  c906		       06		      .byte.b	#F
   1318  c907		       09		      .byte.b	#I
   1319  c908		       12		      .byte.b	#R
   1320  c909		       05		      .byte.b	#E
   1321  c90a		       00		      .byte.b	#EMPTY
   1322  c90b		       00		      .byte.b	#EMPTY
   1323  c90c				   RSleepText
   1324  c90c		       13		      .byte.b	#S
   1325  c90d		       0c		      .byte.b	#L
   1326  c90e		       05		      .byte.b	#E
   1327  c90f		       05		      .byte.b	#E
   1328  c910		       10		      .byte.b	#P
   1329  c911		       00		      .byte.b	#EMPTY
   1330  c912				   RBlizrdText
   1331  c912		       02		      .byte.b	#B
   1332  c913		       0c		      .byte.b	#L
   1333  c914		       09		      .byte.b	#I
   1334  c915		       1a		      .byte.b	#Z
   1335  c916		       12		      .byte.b	#R
   1336  c917		       04		      .byte.b	#D
   1337  c918				   RDrainText
   1338  c918		       04		      .byte.b	#D
   1339  c919		       12		      .byte.b	#R
   1340  c91a		       01		      .byte.b	#A
   1341  c91b		       09		      .byte.b	#I
   1342  c91c		       0e		      .byte.b	#N
   1343  c91d		       00		      .byte.b	#EMPTY
   1344  c91e				   RThundrText
   1345  c91e		       14		      .byte.b	#T
   1346  c91f		       08		      .byte.b	#H
   1347  c920		       15		      .byte.b	#U
   1348  c921		       0e		      .byte.b	#N
   1349  c922		       04		      .byte.b	#D
   1350  c923		       12		      .byte.b	#R
   1351  c924				   RShieldText
   1352  c924		       13		      .byte.b	#S
   1353  c925		       08		      .byte.b	#H
   1354  c926		       09		      .byte.b	#I
   1355  c927		       05		      .byte.b	#E
   1356  c928		       0c		      .byte.b	#L
   1357  c929		       04		      .byte.b	#D
   1358  c92a				   RMeteorText
   1359  c92a		       0d		      .byte.b	#M
   1360  c92b		       05		      .byte.b	#E
   1361  c92c		       14		      .byte.b	#T
   1362  c92d		       05		      .byte.b	#E
   1363  c92e		       0f		      .byte.b	#O
   1364  c92f		       12		      .byte.b	#R
   1365  c930				   RChaosText
   1366  c930		       03		      .byte.b	#C
   1367  c931		       08		      .byte.b	#H
   1368  c932		       01		      .byte.b	#A
   1369  c933		       0f		      .byte.b	#O
   1370  c934		       13		      .byte.b	#S
   1371  c935		       00		      .byte.b	#EMPTY
   1372  c936				   RHealText
   1373  c936		       08		      .byte.b	#H
   1374  c937		       05		      .byte.b	#E
   1375  c938		       01		      .byte.b	#A
   1376  c939		       0c		      .byte.b	#L
   1377  c93a		       00		      .byte.b	#EMPTY
   1378  c93b		       00		      .byte.b	#EMPTY
   1379  c93c				   RSmiteText
   1380  c93c		       13		      .byte.b	#S
   1381  c93d		       0d		      .byte.b	#M
   1382  c93e		       09		      .byte.b	#I
   1383  c93f		       14		      .byte.b	#T
   1384  c940		       05		      .byte.b	#E
   1385  c941		       00		      .byte.b	#EMPTY
   1386  c942				   RPoisonText
   1387  c942		       10		      .byte.b	#P
   1388  c943		       0f		      .byte.b	#O
   1389  c944		       09		      .byte.b	#I
   1390  c945		       13		      .byte.b	#S
   1391  c946		       0f		      .byte.b	#O
   1392  c947		       0e		      .byte.b	#N
   1393  c948				   RSharpText
   1394  c948		       13		      .byte.b	#S
   1395  c949		       08		      .byte.b	#H
   1396  c94a		       01		      .byte.b	#A
   1397  c94b		       12		      .byte.b	#R
   1398  c94c		       10		      .byte.b	#P
   1399  c94d		       00		      .byte.b	#EMPTY
   1400  c94e				   RBlightText
   1401  c94e		       02		      .byte.b	#B
   1402  c94f		       0c		      .byte.b	#L
   1403  c950		       09		      .byte.b	#I
   1404  c951		       07		      .byte.b	#G
   1405  c952		       08		      .byte.b	#H
   1406  c953		       14		      .byte.b	#T
   1407  c954				   RTriageText
   1408  c954		       14		      .byte.b	#T
   1409  c955		       12		      .byte.b	#R
   1410  c956		       09		      .byte.b	#I
   1411  c957		       01		      .byte.b	#A
   1412  c958		       07		      .byte.b	#G
   1413  c959		       05		      .byte.b	#E
   1414  c95a				   RWitherText
   1415  c95a		       17		      .byte.b	#W
   1416  c95b		       09		      .byte.b	#I
   1417  c95c		       14		      .byte.b	#T
   1418  c95d		       08		      .byte.b	#H
   1419  c95e		       05		      .byte.b	#E
   1420  c95f		       12		      .byte.b	#R
   1421  c960				   RBanishText
   1422  c960		       02		      .byte.b	#B
   1423  c961		       01		      .byte.b	#A
   1424  c962		       0e		      .byte.b	#N
   1425  c963		       09		      .byte.b	#I
   1426  c964		       13		      .byte.b	#S
   1427  c965		       08		      .byte.b	#H
   1428  c966				   RTranceText
   1429  c966		       14		      .byte.b	#T
   1430  c967		       12		      .byte.b	#R
   1431  c968		       01		      .byte.b	#A
   1432  c969		       0e		      .byte.b	#N
   1433  c96a		       03		      .byte.b	#C
   1434  c96b		       05		      .byte.b	#E
   1435  c96c				   RDonateText
   1436  c96c		       04		      .byte.b	#D
   1437  c96d		       0f		      .byte.b	#O
   1438  c96e		       0e		      .byte.b	#N
   1439  c96f		       01		      .byte.b	#A
   1440  c970		       14		      .byte.b	#T
   1441  c971		       05		      .byte.b	#E
   1442  c972
   1443  c972				   RStabsText
   1444  c972		       13		      .byte.b	#S
   1445  c973		       14		      .byte.b	#T
   1446  c974		       01		      .byte.b	#A
   1447  c975		       02		      .byte.b	#B
   1448  c976		       13		      .byte.b	#S
   1449  c977		       00		      .byte.b	#EMPTY
   1450  c978				   RShootsText
   1451  c978		       13		      .byte.b	#S
   1452  c979		       08		      .byte.b	#H
   1453  c97a		       0f		      .byte.b	#O
   1454  c97b		       0f		      .byte.b	#O
   1455  c97c		       14		      .byte.b	#T
   1456  c97d		       13		      .byte.b	#S
   1457  c97e				   RWastesText
   1458  c97e		       17		      .byte.b	#W
   1459  c97f		       01		      .byte.b	#A
   1460  c980		       13		      .byte.b	#S
   1461  c981		       14		      .byte.b	#T
   1462  c982		       05		      .byte.b	#E
   1463  c983				   RSlamsText
   1464  c983		       13		      .byte.b	#S	;Shared, saving 1 byte
   1465  c984		       0c		      .byte.b	#L
   1466  c985		       01		      .byte.b	#A
   1467  c986		       0d		      .byte.b	#M
   1468  c987		       13		      .byte.b	#S
   1469  c988		       00		      .byte.b	#EMPTY
   1470  c989				   RBitesText
   1471  c989		       02		      .byte.b	#B
   1472  c98a		       09		      .byte.b	#I
   1473  c98b		       14		      .byte.b	#T
   1474  c98c		       05		      .byte.b	#E
   1475  c98d		       13		      .byte.b	#S
   1476  c98e		       00		      .byte.b	#EMPTY
   1477  c98f				   RRushesText
   1478  c98f		       12		      .byte.b	#R
   1479  c990		       15		      .byte.b	#U
   1480  c991		       13		      .byte.b	#S
   1481  c992		       08		      .byte.b	#H
   1482  c993		       05		      .byte.b	#E
   1483  c994		       13		      .byte.b	#S
   1484  c995				   RCastsText
   1485  c995		       03		      .byte.b	#C
   1486  c996		       01		      .byte.b	#A
   1487  c997		       13		      .byte.b	#S
   1488  c998		       14		      .byte.b	#T
   1489  c999		       13		      .byte.b	#S
   1490  c99a		       00		      .byte.b	#EMPTY
   1491  c99b				   RHealsText
   1492  c99b		       08		      .byte.b	#H
   1493  c99c		       05		      .byte.b	#E
   1494  c99d		       01		      .byte.b	#A
   1495  c99e		       0c		      .byte.b	#L
   1496  c99f		       13		      .byte.b	#S
   1497  c9a0		       00		      .byte.b	#EMPTY
   1498  c9a1				   RLosesText
   1499  c9a1		       0c		      .byte.b	#L
   1500  c9a2		       0f		      .byte.b	#O
   1501  c9a3		       13		      .byte.b	#S
   1502  c9a4		       05		      .byte.b	#E
   1503  c9a5		       13		      .byte.b	#S
   1504  c9a6		       00		      .byte.b	#EMPTY
   1505  c9a7				   RMissesText
   1506  c9a7		       0d		      .byte.b	#M
   1507  c9a8		       09		      .byte.b	#I
   1508  c9a9		       13		      .byte.b	#S
   1509  c9aa		       13		      .byte.b	#S
   1510  c9ab		       05		      .byte.b	#E
   1511  c9ac		       13		      .byte.b	#S
   1512  c9ad				   RLevelsText
   1513  c9ad		       0c		      .byte.b	#L
   1514  c9ae		       05		      .byte.b	#E
   1515  c9af		       16		      .byte.b	#V
   1516  c9b0		       05		      .byte.b	#E
   1517  c9b1		       0c		      .byte.b	#L
   1518  c9b2		       13		      .byte.b	#S
   1519  c9b3				   RUpText
   1520  c9b3		       15		      .byte.b	#U
   1521  c9b4		       10		      .byte.b	#P
   1522  c9b5		       00		      .byte.b	#EMPTY
   1523  c9b6		       00		      .byte.b	#EMPTY
   1524  c9b7		       00		      .byte.b	#EMPTY
   1525  c9b8		       00		      .byte.b	#EMPTY
   1526  c9b9				   RMovesText
   1527  c9b9		       0d		      .byte.b	#M
   1528  c9ba		       0f		      .byte.b	#O
   1529  c9bb		       16		      .byte.b	#V
   1530  c9bc		       05		      .byte.b	#E
   1531  c9bd		       13		      .byte.b	#S
   1532  c9be		       00		      .byte.b	#EMPTY
   1533  c9bf				   RBacksText
   1534  c9bf		       02		      .byte.b	#B
   1535  c9c0		       01		      .byte.b	#A
   1536  c9c1		       03		      .byte.b	#C
   1537  c9c2		       0b		      .byte.b	#K
   1538  c9c3		       13		      .byte.b	#S
   1539  c9c4		       00		      .byte.b	#EMPTY
   1540  c9c5				   RLearnsText
   1541  c9c5		       0c		      .byte.b	#L
   1542  c9c6		       05		      .byte.b	#E
   1543  c9c7		       01		      .byte.b	#A
   1544  c9c8		       12		      .byte.b	#R
   1545  c9c9		       0e		      .byte.b	#N
   1546  c9ca				   RShieldMessageText
   1547  c9ca		       13		      .byte.b	#S
   1548  c9cb		       08		      .byte.b	#H
   1549  c9cc		       09		      .byte.b	#I
   1550  c9cd		       05		      .byte.b	#E
   1551  c9ce		       0c		      .byte.b	#L
   1552  c9cf		       04		      .byte.b	#D
   1553  c9d0				   RHasAText
   1554  c9d0		       08		      .byte.b	#H
   1555  c9d1		       01		      .byte.b	#A
   1556  c9d2		       13		      .byte.b	#S
   1557  c9d3		       00		      .byte.b	#EMPTY
   1558  c9d4		       01		      .byte.b	#A
   1559  c9d5		       00		      .byte.b	#EMPTY
   1560  c9d6				   RPartyText
   1561  c9d6		       10		      .byte.b	#P
   1562  c9d7		       01		      .byte.b	#A
   1563  c9d8		       12		      .byte.b	#R
   1564  c9d9		       14		      .byte.b	#T
   1565  c9da		       19		      .byte.b	#Y
   1566  c9db		       00		      .byte.b	#EMPTY
   1567  c9dc				   RDownText
   1568  c9dc		       04		      .byte.b	#D
   1569  c9dd		       0f		      .byte.b	#O
   1570  c9de		       17		      .byte.b	#W
   1571  c9df		       0e		      .byte.b	#N
   1572  c9e0		       00		      .byte.b	#EMPTY
   1573  c9e1		       00		      .byte.b	#EMPTY
   1574  c9e2				   RAwayText
   1575  c9e2		       01		      .byte.b	#A
   1576  c9e3		       17		      .byte.b	#W
   1577  c9e4		       01		      .byte.b	#A
   1578  c9e5		       19		      .byte.b	#Y
   1579  c9e6		       00		      .byte.b	#EMPTY
   1580  c9e7		       00		      .byte.b	#EMPTY
   1581  c9e8				   RWakesText
   1582  c9e8		       17		      .byte.b	#W
   1583  c9e9		       01		      .byte.b	#A
   1584  c9ea		       0b		      .byte.b	#K
   1585  c9eb		       05		      .byte.b	#E
   1586  c9ec		       13		      .byte.b	#S
   1587  c9ed		       00		      .byte.b	#EMPTY
   1588  c9ee				   RWasText
   1589  c9ee		       17		      .byte.b	#W
   1590  c9ef		       01		      .byte.b	#A
   1591  c9f0		       13		      .byte.b	#S
   1592  c9f1		       00		      .byte.b	#EMPTY
   1593  c9f2		       00		      .byte.b	#EMPTY
   1594  c9f3		       00		      .byte.b	#EMPTY
   1595  c9f4				   RCuredText
   1596  c9f4		       03		      .byte.b	#C
   1597  c9f5		       15		      .byte.b	#U
   1598  c9f6		       12		      .byte.b	#R
   1599  c9f7		       05		      .byte.b	#E
   1600  c9f8		       04		      .byte.b	#D
   1601  c9f9		       00		      .byte.b	#EMPTY
   1602  c9fa
   1603  ca00					      ORG	$CA00	;Used to hold more text data
   1604  ca00					      RORG	$FA00
   1605  ca00
   1606  ca00				   RFleesText
   1607  ca00		       06		      .byte.b	#F
   1608  ca01		       0c		      .byte.b	#L
   1609  ca02		       05		      .byte.b	#E
   1610  ca03		       05		      .byte.b	#E
   1611  ca04		       13		      .byte.b	#S
   1612  ca05		       00		      .byte.b	#EMPTY
   1613  ca06				   RWinsText
   1614  ca06		       17		      .byte.b	#W
   1615  ca07		       09		      .byte.b	#I
   1616  ca08		       0e		      .byte.b	#N
   1617  ca09		       13		      .byte.b	#S
   1618  ca0a		       00		      .byte.b	#EMPTY
   1619  ca0b		       00		      .byte.b	#EMPTY
   1620  ca0c				   RTriesText
   1621  ca0c		       14		      .byte.b	#T
   1622  ca0d		       12		      .byte.b	#R
   1623  ca0e		       09		      .byte.b	#I
   1624  ca0f		       05		      .byte.b	#E
   1625  ca10		       13		      .byte.b	#S
   1626  ca11		       00		      .byte.b	#EMPTY
   1627  ca12				   RToRunText
   1628  ca12		       14		      .byte.b	#T
   1629  ca13		       0f		      .byte.b	#O
   1630  ca14		       00		      .byte.b	#EMPTY
   1631  ca15		       12		      .byte.b	#R
   1632  ca16		       15		      .byte.b	#U
   1633  ca17		       0e		      .byte.b	#N
   1634  ca18				   RNoText
   1635  ca18		       0e		      .byte.b	#N
   1636  ca19		       0f		      .byte.b	#O
   1637  ca1a		       00		      .byte.b	#EMPTY
   1638  ca1b		       00		      .byte.b	#EMPTY
   1639  ca1c		       00		      .byte.b	#EMPTY
   1640  ca1d		       00		      .byte.b	#EMPTY
   1641  ca1e				   REffectText
   1642  ca1e		       05		      .byte.b	#E
   1643  ca1f		       06		      .byte.b	#F
   1644  ca20		       06		      .byte.b	#F
   1645  ca21		       05		      .byte.b	#E
   1646  ca22		       03		      .byte.b	#C
   1647  ca23		       14		      .byte.b	#T
   1648  ca24				   RCannotText
   1649  ca24		       03		      .byte.b	#C
   1650  ca25		       01		      .byte.b	#A
   1651  ca26		       0e		      .byte.b	#N
   1652  ca27		       0e		      .byte.b	#N
   1653  ca28		       0f		      .byte.b	#O
   1654  ca29		       14		      .byte.b	#T
   1655  ca2a				   REscapeText
   1656  ca2a		       05		      .byte.b	#E
   1657  ca2b		       13		      .byte.b	#S
   1658  ca2c		       03		      .byte.b	#C
   1659  ca2d		       01		      .byte.b	#A
   1660  ca2e		       10		      .byte.b	#P
   1661  ca2f				   RExiledText
   1662  ca2f		       05		      .byte.b	#E
   1663  ca30		       18		      .byte.b	#X
   1664  ca31		       09		      .byte.b	#I
   1665  ca32		       0c		      .byte.b	#L
   1666  ca33		       05		      .byte.b	#E
   1667  ca34		       04		      .byte.b	#D
   1668  ca35				   RFadesText
   1669  ca35		       06		      .byte.b	#F
   1670  ca36		       01		      .byte.b	#A
   1671  ca37		       04		      .byte.b	#D
   1672  ca38		       05		      .byte.b	#E
   1673  ca39		       13		      .byte.b	#S
   1674  ca3a		       00		      .byte.b	#EMPTY
   1675  ca3b				   REvadesText
   1676  ca3b		       05		      .byte.b	#E
   1677  ca3c		       16		      .byte.b	#V
   1678  ca3d		       01		      .byte.b	#A
   1679  ca3e		       04		      .byte.b	#D
   1680  ca3f		       05		      .byte.b	#E
   1681  ca40		       13		      .byte.b	#S
   1682  ca41				   RIsText
   1683  ca41		       09		      .byte.b	#I
   1684  ca42		       13		      .byte.b	#S
   1685  ca43		       00		      .byte.b	#EMPTY
   1686  ca44		       00		      .byte.b	#EMPTY
   1687  ca45		       00		      .byte.b	#EMPTY
   1688  ca46		       00		      .byte.b	#EMPTY
   1689  ca47				   RAttackText
   1690  ca47		       01		      .byte.b	#A
   1691  ca48		       14		      .byte.b	#T
   1692  ca49		       14		      .byte.b	#T
   1693  ca4a		       01		      .byte.b	#A
   1694  ca4b		       03		      .byte.b	#C
   1695  ca4c		       0b		      .byte.b	#K
   1696  ca4d				   RGuardsText
   1697  ca4d		       07		      .byte.b	#G
   1698  ca4e		       15		      .byte.b	#U
   1699  ca4f		       01		      .byte.b	#A
   1700  ca50		       12		      .byte.b	#R
   1701  ca51		       04		      .byte.b	#D
   1702  ca52		       13		      .byte.b	#S
   1703  ca53				   RAsleepText
   1704  ca53		       01		      .byte.b	#A
   1705  ca54		       13		      .byte.b	#S
   1706  ca55		       0c		      .byte.b	#L
   1707  ca56		       05		      .byte.b	#E
   1708  ca57		       05		      .byte.b	#E
   1709  ca58		       10		      .byte.b	#P
   1710  ca59				   RFellText
   1711  ca59		       06		      .byte.b	#F
   1712  ca5a		       05		      .byte.b	#E
   1713  ca5b		       0c		      .byte.b	#L
   1714  ca5c		       0c		      .byte.b	#L
   1715  ca5d		       00		      .byte.b	#EMPTY
   1716  ca5e		       00		      .byte.b	#EMPTY
   1717  ca5f
   1718  ca5f				   RClassColors
   1719  ca5f		       8a		      .byte.b	$8A	;Knight
   1720  ca60		       06		      .byte.b	$06	;Rogue
   1721  ca61		       ec		      .byte.b	$EC	;Cleric
   1722  ca62		       56		      .byte.b	$56	;Wizard
   1723  ca63		       c8		      .byte.b	$C8	;Ranger
   1724  ca64		       36		      .byte.b	$36	;Paladin
   1725  ca65
   1726  ca65				   RCasterType		;0 is no casting, 1 is full caster, FF is half-caster
   1727  ca65		       00		      .byte.b	$0	;Knight
   1728  ca66		       00		      .byte.b	$0	;Rogue
   1729  ca67		       01		      .byte.b	$1	;Cleric
   1730  ca68		       01		      .byte.b	$1	;Wizard
   1731  ca69		       ff		      .byte.b	$FF	;Ranger
   1732  ca6a		       ff		      .byte.b	$FF	;Paladin
   1733  ca6b
   1734  ca6b				   RMazeColors
   1735  ca6b		       2a		      .byte.b	$2A	;Orange
   1736  ca6c		       8a		      .byte.b	$8A	;Blue
   1737  ca6d		       6a		      .byte.b	$6A	;Purple
   1738  ca6e		       0a		      .byte.b	$0A	;Gray
   1739  ca6f
   1740  ca6f				   RSpellColors
   1741  ca6f		       0e		      .byte.b	TEXT_HIGHLIGHTED_COLOR	;BACK
   1742  ca70		       fa		      .byte.b	$FA	;FIRE
   1743  ca71		       b6		      .byte.b	$B6	;SLEEP
   1744  ca72		       9e		      .byte.b	$9E	;BLIZRD
   1745  ca73		       36		      .byte.b	$36	;DRAIN
   1746  ca74		       1e		      .byte.b	$1E	;THUNDR
   1747  ca75		       78		      .byte.b	$78	;SHIELD
   1748  ca76		       fc		      .byte.b	$FC	;METEOR
   1749  ca77		       5a		      .byte.b	$5A	;CHAOS
   1750  ca78		       c8		      .byte.b	$C8	;HEAL
   1751  ca79		       1c		      .byte.b	$1C	;SMITE
   1752  ca7a		       dc		      .byte.b	$DC	;POISON
   1753  ca7b		       a8		      .byte.b	$A8	;SHARP
   1754  ca7c		       ce		      .byte.b	$CE	;BLIGHT
   1755  ca7d		       9a		      .byte.b	$9A	;TRIAGE
   1756  ca7e		       bc		      .byte.b	$BC	;WITHER
   1757  ca7f		       48		      .byte.b	$48	;BANISH
   1758  ca80		       56		      .byte.b	$56	;TRANCE
   1759  ca81		       3a		      .byte.b	$3A	;DONATE
   1760  ca82
   1761  ca82				   RClassNameLookupTable
   1762  ca82		       3a		      .byte.b	(RKnightText & $FF)
   1763  ca83		       40		      .byte.b	(RRogueText & $FF)
   1764  ca84		       46		      .byte.b	(RClericText & $FF)
   1765  ca85		       4c		      .byte.b	(RWizardText & $FF)
   1766  ca86		       52		      .byte.b	(RRangerText & $FF)
   1767  ca87		       58		      .byte.b	(RPaladinText & $FF)
   1768  ca88
   1769  ca88				   RBattleOptionsLookupTable
   1770  ca88		       5e		      .byte.b	(RFightText & $FF)
   1771  ca89		       64		      .byte.b	(RCastText & $FF)
   1772  ca8a		       6a		      .byte.b	(RMoveText & $FF)
   1773  ca8b		       70		      .byte.b	(RRunText & $FF)
   1774  ca8c		       76		      .byte.b	(RGuardText & $FF)
   1775  ca8d		       7c		      .byte.b	(RParryText & $FF)
   1776  ca8e
   1777  ca8e				   REnemyNameLookup
   1778  ca8e		       10		      .byte.b	(RZombieText & $FF)
   1779  ca8f		       16		      .byte.b	(RGiantText & $FF)
   1780  ca90		       1c		      .byte.b	(RDragonText & $FF)
   1781  ca91
   1782  ca91				   REnemyColorLookup
   1783  ca91		       d6		      .byte.b	$D6	;Zombie
   1784  ca92		       ea		      .byte.b	$EA	;Giant
   1785  ca93		       c8		      .byte.b	$C8	;Dragon
   1786  ca94
   1787  cb00					      ORG	$CB00	;Used to hold miscellaneous data/lookup tables and text
   1788  cb00					      RORG	$FB00
   1789  cb00
   1790  cb00				   RMessagesLowLookup
   1791  cb00		       72		      .byte.b	(RStabsText & $FF)	;Rogue/Paladin
   1792  cb01		       78		      .byte.b	(RShootsText & $FF)	;Wizard/Ranger
   1793  cb02		       83		      .byte.b	(RSlamsText & $FF)	;Cleric
   1794  cb03		       89		      .byte.b	(RBitesText & $FF)
   1795  cb04		       8f		      .byte.b	(RRushesText & $FF)	;Knight 
   1796  cb05		       95		      .byte.b	(RCastsText & $FF)
   1797  cb06		       9b		      .byte.b	(RHealsText & $FF)
   1798  cb07		       a1		      .byte.b	(RLosesText & $FF)
   1799  cb08		       a7		      .byte.b	(RMissesText & $FF)
   1800  cb09		       ad		      .byte.b	(RLevelsText & $FF)
   1801  cb0a		       b3		      .byte.b	(RUpText & $FF)
   1802  cb0b		       c5		      .byte.b	(RLearnsText & $FF)
   1803  cb0c		       b9		      .byte.b	(RMovesText & $FF)
   1804  cb0d		       bf		      .byte.b	(RBacksText & $FF)
   1805  cb0e		       dc		      .byte.b	(RDownText & $FF)
   1806  cb0f		       e2		      .byte.b	(RAwayText & $FF)
   1807  cb10		       7e		      .byte.b	(RWastesText & $FF)
   1808  cb11		       ee		      .byte.b	(RWasText & $FF)
   1809  cb12		       f4		      .byte.b	(RCuredText & $FF)
   1810  cb13		       e8		      .byte.b	(RWakesText & $FF)
   1811  cb14		       d0		      .byte.b	(RHasAText & $FF)
   1812  cb15		       ca		      .byte.b	(RShieldMessageText & $FF)
   1813  cb16		       d6		      .byte.b	(RPartyText & $FF)
   1814  cb17		       00		      .byte.b	(RFleesText & $FF)
   1815  cb18		       06		      .byte.b	(RWinsText & $FF)
   1816  cb19		       0c		      .byte.b	(RTriesText & $FF)
   1817  cb1a		       12		      .byte.b	(RToRunText & $FF)
   1818  cb1b		       18		      .byte.b	(RNoText & $FF)
   1819  cb1c		       1e		      .byte.b	(REffectText & $FF)
   1820  cb1d		       24		      .byte.b	(RCannotText & $FF)
   1821  cb1e		       2a		      .byte.b	(REscapeText & $FF)
   1822  cb1f		       4d		      .byte.b	(RGuardsText & $FF)
   1823  cb20		       47		      .byte.b	(RAttackText & $FF)
   1824  cb21		       59		      .byte.b	(RFellText & $FF)
   1825  cb22		       53		      .byte.b	(RAsleepText & $FF)
   1826  cb23		       41		      .byte.b	(RIsText & $FF)
   1827  cb24		       3b		      .byte.b	(REvadesText & $FF)
   1828  cb25		       35		      .byte.b	(RFadesText & $FF)
   1829  cb26		       2f		      .byte.b	(RExiledText & $FF)
   1830  cb27
   1831  cb27				   RSpellTextLookupTable
   1832  cb27		       00		      .byte.b	(RBackText & $FF)
   1833  cb28		       06		      .byte.b	(RFireText & $FF)
   1834  cb29		       0c		      .byte.b	(RSleepText & $FF)
   1835  cb2a		       12		      .byte.b	(RBlizrdText & $FF)
   1836  cb2b		       18		      .byte.b	(RDrainText & $FF)
   1837  cb2c		       1e		      .byte.b	(RThundrText & $FF)
   1838  cb2d		       24		      .byte.b	(RShieldText & $FF)
   1839  cb2e		       2a		      .byte.b	(RMeteorText & $FF)
   1840  cb2f		       30		      .byte.b	(RChaosText & $FF)
   1841  cb30		       36		      .byte.b	(RHealText & $FF)
   1842  cb31		       3c		      .byte.b	(RSmiteText & $FF)
   1843  cb32		       42		      .byte.b	(RPoisonText & $FF)
   1844  cb33		       48		      .byte.b	(RSharpText & $FF)
   1845  cb34		       4e		      .byte.b	(RBlightText & $FF)
   1846  cb35		       54		      .byte.b	(RTriageText & $FF)
   1847  cb36		       5a		      .byte.b	(RWitherText & $FF)
   1848  cb37		       60		      .byte.b	(RBanishText & $FF)
   1849  cb38		       66		      .byte.b	(RTranceText & $FF)
   1850  cb39		       6c		      .byte.b	(RDonateText & $FF)
   1851  cb3a
   1852  cb3a				   RKnightText
   1853  cb3a		       0b		      .byte.b	#K
   1854  cb3b		       0e		      .byte.b	#N
   1855  cb3c		       09		      .byte.b	#I
   1856  cb3d		       07		      .byte.b	#G
   1857  cb3e		       08		      .byte.b	#H
   1858  cb3f		       14		      .byte.b	#T
   1859  cb40				   RRogueText
   1860  cb40		       12		      .byte.b	#R
   1861  cb41		       0f		      .byte.b	#O
   1862  cb42		       07		      .byte.b	#G
   1863  cb43		       15		      .byte.b	#U
   1864  cb44		       05		      .byte.b	#E
   1865  cb45		       00		      .byte.b	#EMPTY
   1866  cb46				   RClericText
   1867  cb46		       03		      .byte.b	#C
   1868  cb47		       0c		      .byte.b	#L
   1869  cb48		       05		      .byte.b	#E
   1870  cb49		       12		      .byte.b	#R
   1871  cb4a		       09		      .byte.b	#I
   1872  cb4b		       03		      .byte.b	#C
   1873  cb4c				   RWizardText
   1874  cb4c		       17		      .byte.b	#W
   1875  cb4d		       09		      .byte.b	#I
   1876  cb4e		       1a		      .byte.b	#Z
   1877  cb4f		       01		      .byte.b	#A
   1878  cb50		       12		      .byte.b	#R
   1879  cb51		       04		      .byte.b	#D
   1880  cb52				   RRangerText
   1881  cb52		       12		      .byte.b	#R
   1882  cb53		       01		      .byte.b	#A
   1883  cb54		       0e		      .byte.b	#N
   1884  cb55		       07		      .byte.b	#G
   1885  cb56		       05		      .byte.b	#E
   1886  cb57		       12		      .byte.b	#R
   1887  cb58				   RPaladinText
   1888  cb58		       10		      .byte.b	#P
   1889  cb59		       01		      .byte.b	#A
   1890  cb5a		       0c		      .byte.b	#L
   1891  cb5b		       01		      .byte.b	#A
   1892  cb5c		       04		      .byte.b	#D
   1893  cb5d		       0e		      .byte.b	#N
   1894  cb5e
   1895  cb5e				   RFightText
   1896  cb5e		       06		      .byte.b	#F
   1897  cb5f		       09		      .byte.b	#I
   1898  cb60		       07		      .byte.b	#G
   1899  cb61		       08		      .byte.b	#H
   1900  cb62		       14		      .byte.b	#T
   1901  cb63		       00		      .byte.b	#EMPTY
   1902  cb64				   RCastText
   1903  cb64		       03		      .byte.b	#C
   1904  cb65		       01		      .byte.b	#A
   1905  cb66		       13		      .byte.b	#S
   1906  cb67		       14		      .byte.b	#T
   1907  cb68		       00		      .byte.b	#EMPTY
   1908  cb69		       00		      .byte.b	#EMPTY
   1909  cb6a				   RMoveText
   1910  cb6a		       0d		      .byte.b	#M
   1911  cb6b		       0f		      .byte.b	#O
   1912  cb6c		       16		      .byte.b	#V
   1913  cb6d		       05		      .byte.b	#E
   1914  cb6e		       00		      .byte.b	#EMPTY
   1915  cb6f		       00		      .byte.b	#EMPTY
   1916  cb70				   RRunText
   1917  cb70		       12		      .byte.b	#R
   1918  cb71		       15		      .byte.b	#U
   1919  cb72		       0e		      .byte.b	#N
   1920  cb73		       00		      .byte.b	#EMPTY
   1921  cb74		       00		      .byte.b	#EMPTY
   1922  cb75		       00		      .byte.b	#EMPTY
   1923  cb76				   RGuardText
   1924  cb76		       07		      .byte.b	#G
   1925  cb77		       15		      .byte.b	#U
   1926  cb78		       01		      .byte.b	#A
   1927  cb79		       12		      .byte.b	#R
   1928  cb7a		       04		      .byte.b	#D
   1929  cb7b		       00		      .byte.b	#EMPTY
   1930  cb7c				   RParryText
   1931  cb7c		       10		      .byte.b	#P
   1932  cb7d		       01		      .byte.b	#A
   1933  cb7e		       12		      .byte.b	#R
   1934  cb7f		       12		      .byte.b	#R
   1935  cb80		       19		      .byte.b	#Y
   1936  cb81		       00		      .byte.b	#EMPTY
   1937  cb82
   1938  cb82				   RSpellListLookup
   1939  cb82		       00		      .byte.b	#0
   1940  cb83		       00		      .byte.b	#0
   1941  cb84		       91		      .byte.b	(RClericSpellList & $FF)
   1942  cb85		       88		      .byte.b	(RWizardSpellList & $FF)
   1943  cb86		       a3		      .byte.b	(RRangerSpellList & $FF)
   1944  cb87		       9a		      .byte.b	(RPaladinSpellList & $FF)
   1945  cb88
   1946  cb88				   RWizardSpellList
   1947  cb88		       00		      .byte.b	#$0	;BACK
   1948  cb89		       01		      .byte.b	#$1	;FIRE
   1949  cb8a		       03		      .byte.b	#$3	;BLIZRD
   1950  cb8b		       04		      .byte.b	#$4	;DRAIN
   1951  cb8c		       02		      .byte.b	#$2	;SLEEP
   1952  cb8d		       05		      .byte.b	#$5	;THUNDR
   1953  cb8e		       06		      .byte.b	#$6	;SHIELD
   1954  cb8f		       08		      .byte.b	#$8	;CHAOS
   1955  cb90		       07		      .byte.b	#$7	;METEOR
   1956  cb91				   RClericSpellList
   1957  cb91		       00		      .byte.b	#$0	;BACK
   1958  cb92		       09		      .byte.b	#$9	;HEAL
   1959  cb93		       0f		      .byte.b	#$F	;WITHER
   1960  cb94		       0c		      .byte.b	#$C	;SHARP
   1961  cb95		       0e		      .byte.b	#$E	;TRIAGE
   1962  cb96		       0d		      .byte.b	#$D	;BLIGHT
   1963  cb97		       11		      .byte.b	#$11	;TRANCE
   1964  cb98		       12		      .byte.b	#$12	;DONATE
   1965  cb99		       10		      .byte.b	#$10	;BANISH
   1966  cb9a				   RPaladinSpellList
   1967  cb9a		       00		      .byte.b	#$0	;BACK
   1968  cb9b		       ff		      .byte.b	#$FF
   1969  cb9c		       09		      .byte.b	#$9	;HEAL
   1970  cb9d		       ff		      .byte.b	#$FF
   1971  cb9e		       0a		      .byte.b	#$A	;SMITE
   1972  cb9f		       ff		      .byte.b	#$FF
   1973  cba0		       0c		      .byte.b	#$C	;SHARP
   1974  cba1		       ff		      .byte.b	#$FF
   1975  cba2		       06		      .byte.b	#$6	;SHIELD
   1976  cba3				   RRangerSpellList
   1977  cba3		       00		      .byte.b	#$0	;BACK
   1978  cba4		       ff		      .byte.b	#$FF
   1979  cba5		       0b		      .byte.b	#$B	;POISON
   1980  cba6		       ff		      .byte.b	#$FF
   1981  cba7		       09		      .byte.b	#$9	;HEAL
   1982  cba8		       ff		      .byte.b	#$FF
   1983  cba9		       02		      .byte.b	#$2	;SLEEP
   1984  cbaa		       ff		      .byte.b	#$FF
   1985  cbab		       0d		      .byte.b	#$D	;BLIGHT
   1986  cbac
   1987  cbac				   RCharacterLowLookupTable		;Contains the low bytes of the pointers to all the character graphics.
   1988  cbac		       00		      .byte.b	(RNoCharacter & $FF)
   1989  cbad		       08		      .byte.b	(RLetterA & $FF)
   1990  cbae		       10		      .byte.b	(RLetterB & $FF)
   1991  cbaf		       18		      .byte.b	(RLetterC & $FF)
   1992  cbb0		       20		      .byte.b	(RLetterD & $FF)
   1993  cbb1		       28		      .byte.b	(RLetterE & $FF)
   1994  cbb2		       30		      .byte.b	(RLetterF & $FF)
   1995  cbb3		       38		      .byte.b	(RLetterG & $FF)
   1996  cbb4		       40		      .byte.b	(RLetterH & $FF)
   1997  cbb5		       48		      .byte.b	(RLetterI & $FF)
   1998  cbb6		       50		      .byte.b	(RLetterJ & $FF)
   1999  cbb7		       58		      .byte.b	(RLetterK & $FF)
   2000  cbb8		       60		      .byte.b	(RLetterL & $FF)
   2001  cbb9		       68		      .byte.b	(RLetterM & $FF)
   2002  cbba		       70		      .byte.b	(RLetterN & $FF)
   2003  cbbb		       78		      .byte.b	(RLetterO & $FF)
   2004  cbbc		       80		      .byte.b	(RLetterP & $FF)
   2005  cbbd		       88		      .byte.b	(RLetterQ & $FF)
   2006  cbbe		       90		      .byte.b	(RLetterR & $FF)
   2007  cbbf		       98		      .byte.b	(RLetterS & $FF)
   2008  cbc0		       a0		      .byte.b	(RLetterT & $FF)
   2009  cbc1		       a8		      .byte.b	(RLetterU & $FF)
   2010  cbc2		       b0		      .byte.b	(RLetterV & $FF)
   2011  cbc3		       b8		      .byte.b	(RLetterW & $FF)
   2012  cbc4		       c0		      .byte.b	(RLetterX & $FF)
   2013  cbc5		       c8		      .byte.b	(RLetterY & $FF)
   2014  cbc6		       d0		      .byte.b	(RLetterZ & $FF)
   2015  cbc7
   2016  cbc7		       40		      .byte.b	(RNumber0 & $FF)
   2017  cbc8		       48		      .byte.b	(RNumber1 & $FF)
   2018  cbc9		       50		      .byte.b	(RNumber2 & $FF)
   2019  cbca		       58		      .byte.b	(RNumber3 & $FF)
   2020  cbcb		       60		      .byte.b	(RNumber4 & $FF)
   2021  cbcc		       68		      .byte.b	(RNumber5 & $FF)
   2022  cbcd		       70		      .byte.b	(RNumber6 & $FF)
   2023  cbce		       78		      .byte.b	(RNumber7 & $FF)
   2024  cbcf		       80		      .byte.b	(RNumber8 & $FF)
   2025  cbd0		       88		      .byte.b	(RNumber9 & $FF)
   2026  cbd1
   2027  cbd1				   RCharacterHighLookupTable		;Contains the high bytes of the pointers to all the character graphics.
   2028  cbd1		       fd		      .byte.b	(RNoCharacter >> 8 & $FF)
   2029  cbd2		       fd		      .byte.b	(RLetterA >> 8 & $FF)
   2030  cbd3		       fd		      .byte.b	(RLetterB >> 8 & $FF)
   2031  cbd4		       fd		      .byte.b	(RLetterC >> 8 & $FF)
   2032  cbd5		       fd		      .byte.b	(RLetterD >> 8 & $FF)
   2033  cbd6		       fd		      .byte.b	(RLetterE >> 8 & $FF)
   2034  cbd7		       fd		      .byte.b	(RLetterF >> 8 & $FF)
   2035  cbd8		       fd		      .byte.b	(RLetterG >> 8 & $FF)
   2036  cbd9		       fd		      .byte.b	(RLetterH >> 8 & $FF)
   2037  cbda		       fd		      .byte.b	(RLetterI >> 8 & $FF)
   2038  cbdb		       fd		      .byte.b	(RLetterJ >> 8 & $FF)
   2039  cbdc		       fd		      .byte.b	(RLetterK >> 8 & $FF)
   2040  cbdd		       fd		      .byte.b	(RLetterL >> 8 & $FF)
   2041  cbde		       fd		      .byte.b	(RLetterM >> 8 & $FF)
   2042  cbdf		       fd		      .byte.b	(RLetterN >> 8 & $FF)
   2043  cbe0		       fd		      .byte.b	(RLetterO >> 8 & $FF)
   2044  cbe1		       fd		      .byte.b	(RLetterP >> 8 & $FF)
   2045  cbe2		       fd		      .byte.b	(RLetterQ >> 8 & $FF)
   2046  cbe3		       fd		      .byte.b	(RLetterR >> 8 & $FF)
   2047  cbe4		       fd		      .byte.b	(RLetterS >> 8 & $FF)
   2048  cbe5		       fd		      .byte.b	(RLetterT >> 8 & $FF)
   2049  cbe6		       fd		      .byte.b	(RLetterU >> 8 & $FF)
   2050  cbe7		       fd		      .byte.b	(RLetterV >> 8 & $FF)
   2051  cbe8		       fd		      .byte.b	(RLetterW >> 8 & $FF)
   2052  cbe9		       fd		      .byte.b	(RLetterX >> 8 & $FF)
   2053  cbea		       fd		      .byte.b	(RLetterY >> 8 & $FF)
   2054  cbeb		       fd		      .byte.b	(RLetterZ >> 8 & $FF)
   2055  cbec
   2056  cbec		       fc		      .byte.b	(RNumber0 >> 8 & $FF)
   2057  cbed		       fc		      .byte.b	(RNumber1 >> 8 & $FF)
   2058  cbee		       fc		      .byte.b	(RNumber2 >> 8 & $FF)
   2059  cbef		       fc		      .byte.b	(RNumber3 >> 8 & $FF)
   2060  cbf0		       fc		      .byte.b	(RNumber4 >> 8 & $FF)
   2061  cbf1		       fc		      .byte.b	(RNumber5 >> 8 & $FF)
   2062  cbf2		       fc		      .byte.b	(RNumber6 >> 8 & $FF)
   2063  cbf3		       fc		      .byte.b	(RNumber7 >> 8 & $FF)
   2064  cbf4		       fc		      .byte.b	(RNumber8 >> 8 & $FF)
   2065  cbf5		       fc		      .byte.b	(RNumber9 >> 8 & $FF)
   2066  cbf6
   2067  cc00					      ORG	$CC00	;Used to hold more graphics data
   2068  cc00					      RORG	$FC00
   2069  cc00
   2070  cc00				   RAvatarDead
   2071  cc00		       ff		      .byte.b	#%11111111
   2072  cc01		       81		      .byte.b	#%10000001
   2073  cc02		       81		      .byte.b	#%10000001
   2074  cc03		       81		      .byte.b	#%10000001
   2075  cc04		       81		      .byte.b	#%10000001
   2076  cc05		       81		      .byte.b	#%10000001
   2077  cc06		       81		      .byte.b	#%10000001
   2078  cc07		       ff		      .byte.b	#%11111111
   2079  cc08				   RAvatarSad
   2080  cc08		       ff		      .byte.b	#%11111111
   2081  cc09		       81		      .byte.b	#%10000001
   2082  cc0a		       a5		      .byte.b	#%10100101
   2083  cc0b		       99		      .byte.b	#%10011001
   2084  cc0c		       81		      .byte.b	#%10000001
   2085  cc0d		       a5		      .byte.b	#%10100101
   2086  cc0e		       81		      .byte.b	#%10000001
   2087  cc0f		       ff		      .byte.b	#%11111111
   2088  cc10				   RAvatarNeutral
   2089  cc10		       ff		      .byte.b	#%11111111
   2090  cc11		       81		      .byte.b	#%10000001
   2091  cc12		       bd		      .byte.b	#%10111101
   2092  cc13		       81		      .byte.b	#%10000001
   2093  cc14		       81		      .byte.b	#%10000001
   2094  cc15		       a5		      .byte.b	#%10100101
   2095  cc16		       81		      .byte.b	#%10000001
   2096  cc17		       ff		      .byte.b	#%11111111
   2097  cc18				   RAvatarHappy
   2098  cc18		       ff		      .byte.b	#%11111111
   2099  cc19		       81		      .byte.b	#%10000001
   2100  cc1a		       99		      .byte.b	#%10011001
   2101  cc1b		       a5		      .byte.b	#%10100101
   2102  cc1c		       81		      .byte.b	#%10000001
   2103  cc1d		       a5		      .byte.b	#%10100101
   2104  cc1e		       81		      .byte.b	#%10000001
   2105  cc1f		       ff		      .byte.b	#%11111111
   2106  cc20				   RAvatarExcited
   2107  cc20		       ff		      .byte.b	#%11111111
   2108  cc21		       81		      .byte.b	#%10000001
   2109  cc22		       99		      .byte.b	#%10011001
   2110  cc23		       bd		      .byte.b	#%10111101
   2111  cc24		       81		      .byte.b	#%10000001
   2112  cc25		       a5		      .byte.b	#%10100101
   2113  cc26		       81		      .byte.b	#%10000001
   2114  cc27		       ff		      .byte.b	#%11111111
   2115  cc28				   RAvatarPain
   2116  cc28		       ff		      .byte.b	#%11111111
   2117  cc29		       99		      .byte.b	#%10011001
   2118  cc2a		       bd		      .byte.b	#%10111101
   2119  cc2b		       99		      .byte.b	#%10011001
   2120  cc2c		       c3		      .byte.b	#%11000011
   2121  cc2d		       a5		      .byte.b	#%10100101
   2122  cc2e		       81		      .byte.b	#%10000001
   2123  cc2f		       ff		      .byte.b	#%11111111
   2124  cc30				   RAvatarParalyzed
   2125  cc30		       ff		      .byte.b	#%11111111
   2126  cc31		       81		      .byte.b	#%10000001
   2127  cc32		       ab		      .byte.b	#%10101011
   2128  cc33		       d5		      .byte.b	#%11010101
   2129  cc34		       81		      .byte.b	#%10000001
   2130  cc35		       a5		      .byte.b	#%10100101
   2131  cc36		       81		      .byte.b	#%10000001
   2132  cc37		       ff		      .byte.b	#%11111111
   2133  cc38				   RAvatarSick
   2134  cc38		       ff		      .byte.b	#%11111111
   2135  cc39		       81		      .byte.b	#%10000001
   2136  cc3a		       a5		      .byte.b	#%10100101
   2137  cc3b		       99		      .byte.b	#%10011001
   2138  cc3c		       c3		      .byte.b	#%11000011
   2139  cc3d		       a5		      .byte.b	#%10100101
   2140  cc3e		       81		      .byte.b	#%10000001
   2141  cc3f		       ff		      .byte.b	#%11111111
   2142  cc40
   2143  cc40				   RNumber0
   2144  cc40		       7e		      .byte.b	#%01111110
   2145  cc41		       66		      .byte.b	#%01100110
   2146  cc42		       66		      .byte.b	#%01100110
   2147  cc43		       66		      .byte.b	#%01100110
   2148  cc44		       66		      .byte.b	#%01100110
   2149  cc45		       66		      .byte.b	#%01100110
   2150  cc46		       66		      .byte.b	#%01100110
   2151  cc47		       7e		      .byte.b	#%01111110
   2152  cc48				   RNumber1
   2153  cc48		       18		      .byte.b	#%00011000
   2154  cc49		       18		      .byte.b	#%00011000
   2155  cc4a		       18		      .byte.b	#%00011000
   2156  cc4b		       18		      .byte.b	#%00011000
   2157  cc4c		       18		      .byte.b	#%00011000
   2158  cc4d		       18		      .byte.b	#%00011000
   2159  cc4e		       38		      .byte.b	#%00111000
   2160  cc4f		       18		      .byte.b	#%00011000
   2161  cc50				   RNumber2
   2162  cc50		       7e		      .byte.b	#%01111110
   2163  cc51		       60		      .byte.b	#%01100000
   2164  cc52		       60		      .byte.b	#%01100000
   2165  cc53		       60		      .byte.b	#%01100000
   2166  cc54		       7e		      .byte.b	#%01111110
   2167  cc55		       06		      .byte.b	#%00000110
   2168  cc56		       06		      .byte.b	#%00000110
   2169  cc57		       7e		      .byte.b	#%01111110
   2170  cc58				   RNumber3
   2171  cc58		       7e		      .byte.b	#%01111110
   2172  cc59		       06		      .byte.b	#%00000110
   2173  cc5a		       06		      .byte.b	#%00000110
   2174  cc5b		       06		      .byte.b	#%00000110
   2175  cc5c		       1e		      .byte.b	#%00011110
   2176  cc5d		       06		      .byte.b	#%00000110
   2177  cc5e		       06		      .byte.b	#%00000110
   2178  cc5f		       7e		      .byte.b	#%01111110
   2179  cc60				   RNumber4
   2180  cc60		       06		      .byte.b	#%00000110
   2181  cc61		       06		      .byte.b	#%00000110
   2182  cc62		       06		      .byte.b	#%00000110
   2183  cc63		       7e		      .byte.b	#%01111110
   2184  cc64		       66		      .byte.b	#%01100110
   2185  cc65		       66		      .byte.b	#%01100110
   2186  cc66		       66		      .byte.b	#%01100110
   2187  cc67		       66		      .byte.b	#%01100110
   2188  cc68				   RNumber5
   2189  cc68		       7e		      .byte.b	#%01111110
   2190  cc69		       06		      .byte.b	#%00000110
   2191  cc6a		       06		      .byte.b	#%00000110
   2192  cc6b		       06		      .byte.b	#%00000110
   2193  cc6c		       7e		      .byte.b	#%01111110
   2194  cc6d		       60		      .byte.b	#%01100000
   2195  cc6e		       60		      .byte.b	#%01100000
   2196  cc6f		       7e		      .byte.b	#%01111110
   2197  cc70				   RNumber6
   2198  cc70		       7e		      .byte.b	#%01111110
   2199  cc71		       66		      .byte.b	#%01100110
   2200  cc72		       66		      .byte.b	#%01100110
   2201  cc73		       66		      .byte.b	#%01100110
   2202  cc74		       7e		      .byte.b	#%01111110
   2203  cc75		       60		      .byte.b	#%01100000
   2204  cc76		       60		      .byte.b	#%01100000
   2205  cc77		       7e		      .byte.b	#%01111110
   2206  cc78				   RNumber7
   2207  cc78		       06		      .byte.b	#%00000110
   2208  cc79		       06		      .byte.b	#%00000110
   2209  cc7a		       06		      .byte.b	#%00000110
   2210  cc7b		       06		      .byte.b	#%00000110
   2211  cc7c		       06		      .byte.b	#%00000110
   2212  cc7d		       06		      .byte.b	#%00000110
   2213  cc7e		       06		      .byte.b	#%00000110
   2214  cc7f		       7e		      .byte.b	#%01111110
   2215  cc80				   RNumber8
   2216  cc80		       7e		      .byte.b	#%01111110
   2217  cc81		       66		      .byte.b	#%01100110
   2218  cc82		       66		      .byte.b	#%01100110
   2219  cc83		       66		      .byte.b	#%01100110
   2220  cc84		       7e		      .byte.b	#%01111110
   2221  cc85		       66		      .byte.b	#%01100110
   2222  cc86		       66		      .byte.b	#%01100110
   2223  cc87		       7e		      .byte.b	#%01111110
   2224  cc88				   RNumber9
   2225  cc88		       06		      .byte.b	#%00000110
   2226  cc89		       06		      .byte.b	#%00000110
   2227  cc8a		       06		      .byte.b	#%00000110
   2228  cc8b		       7e		      .byte.b	#%01111110
   2229  cc8c		       66		      .byte.b	#%01100110
   2230  cc8d		       66		      .byte.b	#%01100110
   2231  cc8e		       66		      .byte.b	#%01100110
   2232  cc8f		       7e		      .byte.b	#%01111110
   2233  cc90
   2234  cc90				   RNumberLookup
   2235  cc90		       1b		      .byte.b	27
   2236  cc91		       1c		      .byte.b	28
   2237  cc92		       1d		      .byte.b	29
   2238  cc93		       1e		      .byte.b	30
   2239  cc94		       1f		      .byte.b	31
   2240  cc95		       20		      .byte.b	32
   2241  cc96		       21		      .byte.b	33
   2242  cc97		       22		      .byte.b	34
   2243  cc98		       23		      .byte.b	35
   2244  cc99		       24		      .byte.b	36
   2245  cc9a
   2246  cc9a				   RPartyPositionMasks
   2247  cc9a		       01		      .byte.b	$01
   2248  cc9b		       02		      .byte.b	$02
   2249  cc9c		       04		      .byte.b	$04
   2250  cc9d		       08		      .byte.b	$08
   2251  cc9e
   2252  cc9e				   RMoodLookupTable
   2253  cc9e		       00		      .byte.b	(RAvatarDead & $FF)
   2254  cc9f		       08		      .byte.b	(RAvatarSad & $FF)
   2255  cca0		       10		      .byte.b	(RAvatarNeutral & $FF)
   2256  cca1		       18		      .byte.b	(RAvatarHappy & $FF)
   2257  cca2		       20		      .byte.b	(RAvatarExcited & $FF)
   2258  cca3		       28		      .byte.b	(RAvatarPain & $FF)
   2259  cca4		       30		      .byte.b	(RAvatarParalyzed & $FF)
   2260  cca5		       38		      .byte.b	(RAvatarSick & $FF)
   2261  cca6
   2262  cd00					      ORG	$CD00	;Used for holding the letters of the alphabet
   2263  cd00					      RORG	$FD00
   2264  cd00
   2265  cd00				   RNoCharacter
   2266  cd00		       00		      .byte.b	#%00000000
   2267  cd01		       00		      .byte.b	#%00000000
   2268  cd02		       00		      .byte.b	#%00000000
   2269  cd03		       00		      .byte.b	#%00000000
   2270  cd04		       00		      .byte.b	#%00000000
   2271  cd05		       00		      .byte.b	#%00000000
   2272  cd06		       00		      .byte.b	#%00000000
   2273  cd07		       00		      .byte.b	#%00000000
   2274  cd08				   RLetterA
   2275  cd08		       62		      .byte.b	#%01100010
   2276  cd09		       62		      .byte.b	#%01100010
   2277  cd0a		       62		      .byte.b	#%01100010
   2278  cd0b		       62		      .byte.b	#%01100010
   2279  cd0c		       7e		      .byte.b	#%01111110
   2280  cd0d		       62		      .byte.b	#%01100010
   2281  cd0e		       62		      .byte.b	#%01100010
   2282  cd0f		       7e		      .byte.b	#%01111110
   2283  cd10				   RLetterB
   2284  cd10		       7e		      .byte.b	#%01111110
   2285  cd11		       62		      .byte.b	#%01100010
   2286  cd12		       62		      .byte.b	#%01100010
   2287  cd13		       62		      .byte.b	#%01100010
   2288  cd14		       7c		      .byte.b	#%01111100
   2289  cd15		       62		      .byte.b	#%01100010
   2290  cd16		       62		      .byte.b	#%01100010
   2291  cd17		       7e		      .byte.b	#%01111110
   2292  cd18				   RLetterC
   2293  cd18		       7e		      .byte.b	#%01111110
   2294  cd19		       60		      .byte.b	#%01100000
   2295  cd1a		       60		      .byte.b	#%01100000
   2296  cd1b		       60		      .byte.b	#%01100000
   2297  cd1c		       60		      .byte.b	#%01100000
   2298  cd1d		       60		      .byte.b	#%01100000
   2299  cd1e		       60		      .byte.b	#%01100000
   2300  cd1f		       7e		      .byte.b	#%01111110
   2301  cd20				   RLetterD
   2302  cd20		       7e		      .byte.b	#%01111110
   2303  cd21		       66		      .byte.b	#%01100110
   2304  cd22		       62		      .byte.b	#%01100010
   2305  cd23		       62		      .byte.b	#%01100010
   2306  cd24		       62		      .byte.b	#%01100010
   2307  cd25		       62		      .byte.b	#%01100010
   2308  cd26		       66		      .byte.b	#%01100110
   2309  cd27		       7e		      .byte.b	#%01111110
   2310  cd28				   RLetterE
   2311  cd28		       7e		      .byte.b	#%01111110
   2312  cd29		       60		      .byte.b	#%01100000
   2313  cd2a		       60		      .byte.b	#%01100000
   2314  cd2b		       60		      .byte.b	#%01100000
   2315  cd2c		       78		      .byte.b	#%01111000
   2316  cd2d		       60		      .byte.b	#%01100000
   2317  cd2e		       60		      .byte.b	#%01100000
   2318  cd2f		       7e		      .byte.b	#%01111110
   2319  cd30				   RLetterF
   2320  cd30		       60		      .byte.b	#%01100000
   2321  cd31		       60		      .byte.b	#%01100000
   2322  cd32		       60		      .byte.b	#%01100000
   2323  cd33		       60		      .byte.b	#%01100000
   2324  cd34		       78		      .byte.b	#%01111000
   2325  cd35		       60		      .byte.b	#%01100000
   2326  cd36		       60		      .byte.b	#%01100000
   2327  cd37		       7e		      .byte.b	#%01111110
   2328  cd38				   RLetterG
   2329  cd38		       7e		      .byte.b	#%01111110
   2330  cd39		       62		      .byte.b	#%01100010
   2331  cd3a		       62		      .byte.b	#%01100010
   2332  cd3b		       62		      .byte.b	#%01100010
   2333  cd3c		       66		      .byte.b	#%01100110
   2334  cd3d		       60		      .byte.b	#%01100000
   2335  cd3e		       60		      .byte.b	#%01100000
   2336  cd3f		       7e		      .byte.b	#%01111110
   2337  cd40				   RLetterH
   2338  cd40		       62		      .byte.b	#%01100010
   2339  cd41		       62		      .byte.b	#%01100010
   2340  cd42		       62		      .byte.b	#%01100010
   2341  cd43		       62		      .byte.b	#%01100010
   2342  cd44		       7e		      .byte.b	#%01111110
   2343  cd45		       62		      .byte.b	#%01100010
   2344  cd46		       62		      .byte.b	#%01100010
   2345  cd47		       62		      .byte.b	#%01100010
   2346  cd48				   RLetterI
   2347  cd48		       7e		      .byte.b	#%01111110
   2348  cd49		       18		      .byte.b	#%00011000
   2349  cd4a		       18		      .byte.b	#%00011000
   2350  cd4b		       18		      .byte.b	#%00011000
   2351  cd4c		       18		      .byte.b	#%00011000
   2352  cd4d		       18		      .byte.b	#%00011000
   2353  cd4e		       18		      .byte.b	#%00011000
   2354  cd4f		       7e		      .byte.b	#%01111110
   2355  cd50				   RLetterJ
   2356  cd50		       78		      .byte.b	#%01111000
   2357  cd51		       78		      .byte.b	#%01111000
   2358  cd52		       18		      .byte.b	#%00011000
   2359  cd53		       18		      .byte.b	#%00011000
   2360  cd54		       18		      .byte.b	#%00011000
   2361  cd55		       18		      .byte.b	#%00011000
   2362  cd56		       18		      .byte.b	#%00011000
   2363  cd57		       7e		      .byte.b	#%01111110
   2364  cd58				   RLetterK
   2365  cd58		       62		      .byte.b	#%01100010
   2366  cd59		       64		      .byte.b	#%01100100
   2367  cd5a		       68		      .byte.b	#%01101000
   2368  cd5b		       70		      .byte.b	#%01110000
   2369  cd5c		       70		      .byte.b	#%01110000
   2370  cd5d		       68		      .byte.b	#%01101000
   2371  cd5e		       64		      .byte.b	#%01100100
   2372  cd5f		       62		      .byte.b	#%01100010
   2373  cd60				   RLetterL
   2374  cd60		       7e		      .byte.b	#%01111110
   2375  cd61		       60		      .byte.b	#%01100000
   2376  cd62		       60		      .byte.b	#%01100000
   2377  cd63		       60		      .byte.b	#%01100000
   2378  cd64		       60		      .byte.b	#%01100000
   2379  cd65		       60		      .byte.b	#%01100000
   2380  cd66		       60		      .byte.b	#%01100000
   2381  cd67		       60		      .byte.b	#%01100000
   2382  cd68				   RLetterM
   2383  cd68		       62		      .byte.b	#%01100010
   2384  cd69		       62		      .byte.b	#%01100010
   2385  cd6a		       62		      .byte.b	#%01100010
   2386  cd6b		       62		      .byte.b	#%01100010
   2387  cd6c		       62		      .byte.b	#%01100010
   2388  cd6d		       6a		      .byte.b	#%01101010
   2389  cd6e		       76		      .byte.b	#%01110110
   2390  cd6f		       62		      .byte.b	#%01100010
   2391  cd70				   RLetterN
   2392  cd70		       62		      .byte.b	#%01100010
   2393  cd71		       62		      .byte.b	#%01100010
   2394  cd72		       62		      .byte.b	#%01100010
   2395  cd73		       66		      .byte.b	#%01100110
   2396  cd74		       6a		      .byte.b	#%01101010
   2397  cd75		       72		      .byte.b	#%01110010
   2398  cd76		       62		      .byte.b	#%01100010
   2399  cd77		       62		      .byte.b	#%01100010
   2400  cd78				   RLetterO
   2401  cd78		       3c		      .byte.b	#%00111100
   2402  cd79		       76		      .byte.b	#%01110110
   2403  cd7a		       62		      .byte.b	#%01100010
   2404  cd7b		       62		      .byte.b	#%01100010
   2405  cd7c		       62		      .byte.b	#%01100010
   2406  cd7d		       62		      .byte.b	#%01100010
   2407  cd7e		       76		      .byte.b	#%01110110
   2408  cd7f		       3c		      .byte.b	#%00111100
   2409  cd80				   RLetterP
   2410  cd80		       60		      .byte.b	#%01100000
   2411  cd81		       60		      .byte.b	#%01100000
   2412  cd82		       60		      .byte.b	#%01100000
   2413  cd83		       7e		      .byte.b	#%01111110
   2414  cd84		       62		      .byte.b	#%01100010
   2415  cd85		       62		      .byte.b	#%01100010
   2416  cd86		       62		      .byte.b	#%01100010
   2417  cd87		       7e		      .byte.b	#%01111110
   2418  cd88				   RLetterQ
   2419  cd88		       3a		      .byte.b	#%00111010
   2420  cd89		       74		      .byte.b	#%01110100
   2421  cd8a		       6a		      .byte.b	#%01101010
   2422  cd8b		       62		      .byte.b	#%01100010
   2423  cd8c		       62		      .byte.b	#%01100010
   2424  cd8d		       62		      .byte.b	#%01100010
   2425  cd8e		       76		      .byte.b	#%01110110
   2426  cd8f		       3c		      .byte.b	#%00111100
   2427  cd90				   RLetterR
   2428  cd90		       62		      .byte.b	#%01100010
   2429  cd91		       62		      .byte.b	#%01100010
   2430  cd92		       64		      .byte.b	#%01100100
   2431  cd93		       64		      .byte.b	#%01100100
   2432  cd94		       7c		      .byte.b	#%01111100
   2433  cd95		       62		      .byte.b	#%01100010
   2434  cd96		       62		      .byte.b	#%01100010
   2435  cd97		       7c		      .byte.b	#%01111100
   2436  cd98				   RLetterS
   2437  cd98		       7e		      .byte.b	#%01111110
   2438  cd99		       62		      .byte.b	#%01100010
   2439  cd9a		       62		      .byte.b	#%01100010
   2440  cd9b		       02		      .byte.b	#%00000010
   2441  cd9c		       7e		      .byte.b	#%01111110
   2442  cd9d		       40		      .byte.b	#%01000000
   2443  cd9e		       46		      .byte.b	#%01000110
   2444  cd9f		       7e		      .byte.b	#%01111110
   2445  cda0				   RLetterT
   2446  cda0		       18		      .byte.b	#%00011000
   2447  cda1		       18		      .byte.b	#%00011000
   2448  cda2		       18		      .byte.b	#%00011000
   2449  cda3		       18		      .byte.b	#%00011000
   2450  cda4		       18		      .byte.b	#%00011000
   2451  cda5		       18		      .byte.b	#%00011000
   2452  cda6		       18		      .byte.b	#%00011000
   2453  cda7		       7e		      .byte.b	#%01111110
   2454  cda8				   RLetterU
   2455  cda8		       7e		      .byte.b	#%01111110
   2456  cda9		       76		      .byte.b	#%01110110
   2457  cdaa		       62		      .byte.b	#%01100010
   2458  cdab		       62		      .byte.b	#%01100010
   2459  cdac		       62		      .byte.b	#%01100010
   2460  cdad		       62		      .byte.b	#%01100010
   2461  cdae		       62		      .byte.b	#%01100010
   2462  cdaf		       62		      .byte.b	#%01100010
   2463  cdb0				   RLetterV
   2464  cdb0		       18		      .byte.b	#%00011000
   2465  cdb1		       3c		      .byte.b	#%00111100
   2466  cdb2		       24		      .byte.b	#%00100100
   2467  cdb3		       24		      .byte.b	#%00100100
   2468  cdb4		       24		      .byte.b	#%00100100
   2469  cdb5		       42		      .byte.b	#%01000010
   2470  cdb6		       42		      .byte.b	#%01000010
   2471  cdb7		       42		      .byte.b	#%01000010
   2472  cdb8				   RLetterW
   2473  cdb8		       62		      .byte.b	#%01100010
   2474  cdb9		       76		      .byte.b	#%01110110
   2475  cdba		       6a		      .byte.b	#%01101010
   2476  cdbb		       62		      .byte.b	#%01100010
   2477  cdbc		       62		      .byte.b	#%01100010
   2478  cdbd		       62		      .byte.b	#%01100010
   2479  cdbe		       62		      .byte.b	#%01100010
   2480  cdbf		       62		      .byte.b	#%01100010
   2481  cdc0				   RLetterX
   2482  cdc0		       42		      .byte.b	#%01000010
   2483  cdc1		       66		      .byte.b	#%01100110
   2484  cdc2		       3c		      .byte.b	#%00111100
   2485  cdc3		       18		      .byte.b	#%00011000
   2486  cdc4		       18		      .byte.b	#%00011000
   2487  cdc5		       3c		      .byte.b	#%00111100
   2488  cdc6		       66		      .byte.b	#%01100110
   2489  cdc7		       42		      .byte.b	#%01000010
   2490  cdc8				   RLetterY
   2491  cdc8		       18		      .byte.b	#%00011000
   2492  cdc9		       18		      .byte.b	#%00011000
   2493  cdca		       18		      .byte.b	#%00011000
   2494  cdcb		       18		      .byte.b	#%00011000
   2495  cdcc		       24		      .byte.b	#%00100100
   2496  cdcd		       24		      .byte.b	#%00100100
   2497  cdce		       42		      .byte.b	#%01000010
   2498  cdcf		       42		      .byte.b	#%01000010
   2499  cdd0				   RLetterZ
   2500  cdd0		       7e		      .byte.b	#%01111110
   2501  cdd1		       40		      .byte.b	#%01000000
   2502  cdd2		       20		      .byte.b	#%00100000
   2503  cdd3		       10		      .byte.b	#%00010000
   2504  cdd4		       08		      .byte.b	#%00001000
   2505  cdd5		       04		      .byte.b	#%00000100
   2506  cdd6		       02		      .byte.b	#%00000010
   2507  cdd7		       7e		      .byte.b	#%01111110
   2508  cdd8
   2509  ce00					      ORG	$CE00	;Used to hold maze rendering data
   2510  ce00					      RORG	$FE00
   2511  ce00
   2512  ce00				   RNearDoor		;Used for PF1
   2513  ce00		       00		      .byte.b	#%00000000
   2514  ce01		       00		      .byte.b	#%00000000
   2515  ce02		       00		      .byte.b	#%00000000
   2516  ce03		       00		      .byte.b	#%00000000
   2517  ce04		       80		      .byte.b	#%10000000
   2518  ce05		       80		      .byte.b	#%10000000
   2519  ce06		       80		      .byte.b	#%10000000
   2520  ce07		       80		      .byte.b	#%10000000
   2521  ce08		       80		      .byte.b	#%10000000
   2522  ce09		       80		      .byte.b	#%10000000
   2523  ce0a		       82		      .byte.b	#%10000010
   2524  ce0b		       83		      .byte.b	#%10000011
   2525  ce0c		       83		      .byte.b	#%10000011
   2526  ce0d		       83		      .byte.b	#%10000011
   2527  ce0e		       83		      .byte.b	#%10000011
   2528  ce0f		       83		      .byte.b	#%10000011
   2529  ce10		       83		      .byte.b	#%10000011
   2530  ce11		       83		      .byte.b	#%10000011
   2531  ce12		       83		      .byte.b	#%10000011
   2532  ce13		       83		      .byte.b	#%10000011
   2533  ce14		       83		      .byte.b	#%10000011
   2534  ce15		       83		      .byte.b	#%10000011
   2535  ce16		       83		      .byte.b	#%10000011
   2536  ce17		       83		      .byte.b	#%10000011
   2537  ce18		       83		      .byte.b	#%10000011
   2538  ce19		       83		      .byte.b	#%10000011
   2539  ce1a		       83		      .byte.b	#%10000011
   2540  ce1b		       83		      .byte.b	#%10000011
   2541  ce1c		       82		      .byte.b	#%10000010
   2542  ce1d		       80		      .byte.b	#%10000000
   2543  ce1e		       80		      .byte.b	#%10000000
   2544  ce1f		       80		      .byte.b	#%10000000
   2545  ce20		       80		      .byte.b	#%10000000
   2546  ce21		       80		      .byte.b	#%10000000
   2547  ce22		       80		      .byte.b	#%10000000
   2548  ce23		       00		      .byte.b	#%00000000
   2549  ce24		       00		      .byte.b	#%00000000
   2550  ce25		       00		      .byte.b	#%00000000
   2551  ce26		       00		      .byte.b	#%00000000
   2552  ce27
   2553  ce27				   RNoNearDoor		;Used for PF1
   2554  ce27		       00		      .byte.b	#%00000000
   2555  ce28		       00		      .byte.b	#%00000000
   2556  ce29		       00		      .byte.b	#%00000000
   2557  ce2a		       00		      .byte.b	#%00000000
   2558  ce2b		       80		      .byte.b	#%10000000
   2559  ce2c		       c0		      .byte.b	#%11000000
   2560  ce2d		       e0		      .byte.b	#%11100000
   2561  ce2e		       f0		      .byte.b	#%11110000
   2562  ce2f		       f8		      .byte.b	#%11111000
   2563  ce30		       fc		      .byte.b	#%11111100
   2564  ce31		       fe		      .byte.b	#%11111110
   2565  ce32		       ff		      .byte.b	#%11111111
   2566  ce33		       ff		      .byte.b	#%11111111
   2567  ce34		       ff		      .byte.b	#%11111111
   2568  ce35		       ff		      .byte.b	#%11111111
   2569  ce36		       ff		      .byte.b	#%11111111
   2570  ce37		       ff		      .byte.b	#%11111111
   2571  ce38		       ff		      .byte.b	#%11111111
   2572  ce39		       ff		      .byte.b	#%11111111
   2573  ce3a		       ff		      .byte.b	#%11111111
   2574  ce3b		       ff		      .byte.b	#%11111111
   2575  ce3c		       ff		      .byte.b	#%11111111
   2576  ce3d		       ff		      .byte.b	#%11111111
   2577  ce3e		       ff		      .byte.b	#%11111111
   2578  ce3f		       ff		      .byte.b	#%11111111
   2579  ce40		       ff		      .byte.b	#%11111111
   2580  ce41		       ff		      .byte.b	#%11111111
   2581  ce42		       ff		      .byte.b	#%11111111
   2582  ce43		       fe		      .byte.b	#%11111110
   2583  ce44		       fc		      .byte.b	#%11111100
   2584  ce45		       f8		      .byte.b	#%11111000
   2585  ce46		       f0		      .byte.b	#%11110000
   2586  ce47		       e0		      .byte.b	#%11100000
   2587  ce48		       c0		      .byte.b	#%11000000
   2588  ce49		       80		      .byte.b	#%10000000
   2589  ce4a		       00		      .byte.b	#%00000000
   2590  ce4b		       00		      .byte.b	#%00000000
   2591  ce4c		       00		      .byte.b	#%00000000
   2592  ce4d		       00		      .byte.b	#%00000000
   2593  ce4e
   2594  ce4e				   RFarDoorOnlyTwo		;Used for PF2
   2595  ce4e		       00		      .byte.b	#%00000000
   2596  ce4f		       00		      .byte.b	#%00000000
   2597  ce50		       00		      .byte.b	#%00000000
   2598  ce51		       00		      .byte.b	#%00000000
   2599  ce52		       00		      .byte.b	#%00000000
   2600  ce53		       00		      .byte.b	#%00000000
   2601  ce54		       00		      .byte.b	#%00000000
   2602  ce55		       00		      .byte.b	#%00000000
   2603  ce56		       00		      .byte.b	#%00000000
   2604  ce57		       00		      .byte.b	#%00000000
   2605  ce58		       00		      .byte.b	#%00000000
   2606  ce59		       00		      .byte.b	#%00000000
   2607  ce5a		       01		      .byte.b	#%00000001
   2608  ce5b		       03		      .byte.b	#%00000011
   2609  ce5c		       03		      .byte.b	#%00000011
   2610  ce5d		       03		      .byte.b	#%00000011
   2611  ce5e		       13		      .byte.b	#%00010011
   2612  ce5f		       f3		      .byte.b	#%11110011
   2613  ce60		       f3		      .byte.b	#%11110011
   2614  ce61		       f3		      .byte.b	#%11110011
   2615  ce62		       f3		      .byte.b	#%11110011
   2616  ce63		       f3		      .byte.b	#%11110011
   2617  ce64		       13		      .byte.b	#%00010011
   2618  ce65		       03		      .byte.b	#%00000011
   2619  ce66		       03		      .byte.b	#%00000011
   2620  ce67		       03		      .byte.b	#%00000011
   2621  ce68		       01		      .byte.b	#%00000001
   2622  ce69		       00		      .byte.b	#%00000000
   2623  ce6a		       00		      .byte.b	#%00000000
   2624  ce6b		       00		      .byte.b	#%00000000
   2625  ce6c		       00		      .byte.b	#%00000000
   2626  ce6d		       00		      .byte.b	#%00000000
   2627  ce6e		       00		      .byte.b	#%00000000
   2628  ce6f		       00		      .byte.b	#%00000000
   2629  ce70		       00		      .byte.b	#%00000000
   2630  ce71		       00		      .byte.b	#%00000000
   2631  ce72		       00		      .byte.b	#%00000000
   2632  ce73		       00		      .byte.b	#%00000000
   2633  ce74		       00		      .byte.b	#%00000000
   2634  ce75
   2635  ce75				   RNoFarDoorOnlyTwo		;Used for PF2
   2636  ce75		       00		      .byte.b	#%00000000
   2637  ce76		       00		      .byte.b	#%00000000
   2638  ce77		       00		      .byte.b	#%00000000
   2639  ce78		       00		      .byte.b	#%00000000
   2640  ce79		       00		      .byte.b	#%00000000
   2641  ce7a		       00		      .byte.b	#%00000000
   2642  ce7b		       00		      .byte.b	#%00000000
   2643  ce7c		       00		      .byte.b	#%00000000
   2644  ce7d		       00		      .byte.b	#%00000000
   2645  ce7e		       00		      .byte.b	#%00000000
   2646  ce7f		       00		      .byte.b	#%00000000
   2647  ce80		       00		      .byte.b	#%00000000
   2648  ce81		       01		      .byte.b	#%00000001
   2649  ce82		       03		      .byte.b	#%00000011
   2650  ce83		       07		      .byte.b	#%00000111
   2651  ce84		       0f		      .byte.b	#%00001111
   2652  ce85		       1f		      .byte.b	#%00011111
   2653  ce86		       ff		      .byte.b	#%11111111
   2654  ce87		       ff		      .byte.b	#%11111111
   2655  ce88		       ff		      .byte.b	#%11111111
   2656  ce89		       ff		      .byte.b	#%11111111
   2657  ce8a		       ff		      .byte.b	#%11111111
   2658  ce8b		       1f		      .byte.b	#%00011111
   2659  ce8c		       0f		      .byte.b	#%00001111
   2660  ce8d		       07		      .byte.b	#%00000111
   2661  ce8e		       03		      .byte.b	#%00000011
   2662  ce8f		       01		      .byte.b	#%00000001
   2663  ce90		       00		      .byte.b	#%00000000
   2664  ce91		       00		      .byte.b	#%00000000
   2665  ce92		       00		      .byte.b	#%00000000
   2666  ce93		       00		      .byte.b	#%00000000
   2667  ce94		       00		      .byte.b	#%00000000
   2668  ce95		       00		      .byte.b	#%00000000
   2669  ce96		       00		      .byte.b	#%00000000
   2670  ce97		       00		      .byte.b	#%00000000
   2671  ce98		       00		      .byte.b	#%00000000
   2672  ce99		       00		      .byte.b	#%00000000
   2673  ce9a		       00		      .byte.b	#%00000000
   2674  ce9b		       00		      .byte.b	#%00000000
   2675  ce9c
   2676  ce9c				   RFarDoor		;Used for PF2
   2677  ce9c		       00		      .byte.b	#%00000000
   2678  ce9d		       00		      .byte.b	#%00000000
   2679  ce9e		       00		      .byte.b	#%00000000
   2680  ce9f		       00		      .byte.b	#%00000000
   2681  cea0		       00		      .byte.b	#%00000000
   2682  cea1		       00		      .byte.b	#%00000000
   2683  cea2		       00		      .byte.b	#%00000000
   2684  cea3		       00		      .byte.b	#%00000000
   2685  cea4		       00		      .byte.b	#%00000000
   2686  cea5		       00		      .byte.b	#%00000000
   2687  cea6		       00		      .byte.b	#%00000000
   2688  cea7		       00		      .byte.b	#%00000000
   2689  cea8		       01		      .byte.b	#%00000001
   2690  cea9		       03		      .byte.b	#%00000011
   2691  ceaa		       03		      .byte.b	#%00000011
   2692  ceab		       03		      .byte.b	#%00000011
   2693  ceac		       13		      .byte.b	#%00010011
   2694  cead		       33		      .byte.b	#%00110011
   2695  ceae		       73		      .byte.b	#%01110011
   2696  ceaf		       73		      .byte.b	#%01110011
   2697  ceb0		       73		      .byte.b	#%01110011
   2698  ceb1		       33		      .byte.b	#%00110011
   2699  ceb2		       13		      .byte.b	#%00010011
   2700  ceb3		       03		      .byte.b	#%00000011
   2701  ceb4		       03		      .byte.b	#%00000011
   2702  ceb5		       03		      .byte.b	#%00000011
   2703  ceb6		       01		      .byte.b	#%00000001
   2704  ceb7		       00		      .byte.b	#%00000000
   2705  ceb8		       00		      .byte.b	#%00000000
   2706  ceb9		       00		      .byte.b	#%00000000
   2707  ceba		       00		      .byte.b	#%00000000
   2708  cebb		       00		      .byte.b	#%00000000
   2709  cebc		       00		      .byte.b	#%00000000
   2710  cebd		       00		      .byte.b	#%00000000
   2711  cebe		       00		      .byte.b	#%00000000
   2712  cebf		       00		      .byte.b	#%00000000
   2713  cec0		       00		      .byte.b	#%00000000
   2714  cec1		       00		      .byte.b	#%00000000
   2715  cec2		       00		      .byte.b	#%00000000
   2716  cec3
   2717  cec3				   RNoFarDoor		;Used for PF2
   2718  cec3		       00		      .byte.b	#%00000000
   2719  cec4		       00		      .byte.b	#%00000000
   2720  cec5		       00		      .byte.b	#%00000000
   2721  cec6		       00		      .byte.b	#%00000000
   2722  cec7		       00		      .byte.b	#%00000000
   2723  cec8		       00		      .byte.b	#%00000000
   2724  cec9		       00		      .byte.b	#%00000000
   2725  ceca		       00		      .byte.b	#%00000000
   2726  cecb		       00		      .byte.b	#%00000000
   2727  cecc		       00		      .byte.b	#%00000000
   2728  cecd		       00		      .byte.b	#%00000000
   2729  cece		       00		      .byte.b	#%00000000
   2730  cecf		       01		      .byte.b	#%00000001
   2731  ced0		       03		      .byte.b	#%00000011
   2732  ced1		       07		      .byte.b	#%00000111
   2733  ced2		       0f		      .byte.b	#%00001111
   2734  ced3		       1f		      .byte.b	#%00011111
   2735  ced4		       3f		      .byte.b	#%00111111
   2736  ced5		       7f		      .byte.b	#%01111111
   2737  ced6		       7f		      .byte.b	#%01111111
   2738  ced7		       7f		      .byte.b	#%01111111
   2739  ced8		       3f		      .byte.b	#%00111111
   2740  ced9		       1f		      .byte.b	#%00011111
   2741  ceda		       0f		      .byte.b	#%00001111
   2742  cedb		       07		      .byte.b	#%00000111
   2743  cedc		       03		      .byte.b	#%00000011
   2744  cedd		       01		      .byte.b	#%00000001
   2745  cede		       00		      .byte.b	#%00000000
   2746  cedf		       00		      .byte.b	#%00000000
   2747  cee0		       00		      .byte.b	#%00000000
   2748  cee1		       00		      .byte.b	#%00000000
   2749  cee2		       00		      .byte.b	#%00000000
   2750  cee3		       00		      .byte.b	#%00000000
   2751  cee4		       00		      .byte.b	#%00000000
   2752  cee5		       00		      .byte.b	#%00000000
   2753  cee6		       00		      .byte.b	#%00000000
   2754  cee7		       00		      .byte.b	#%00000000
   2755  cee8		       00		      .byte.b	#%00000000
   2756  cee9		       00		      .byte.b	#%00000000
   2757  ceea
   2758  cf00					      ORG	$CF00	;Used to hold additional maze rendering data
   2759  cf00					      RORG	$FF00
   2760  cf00
   2761  cf00				   ROutermost		;Used for PF0
   2762  cf00		       10		      .byte.b	#%00010000
   2763  cf01		       30		      .byte.b	#%00110000
   2764  cf02		       70		      .byte.b	#%01110000
   2765  cf03		       f0		      .byte.b	#%11110000
   2766  cf04		       f0		      .byte.b	#%11110000
   2767  cf05		       f0		      .byte.b	#%11110000
   2768  cf06		       f0		      .byte.b	#%11110000
   2769  cf07		       f0		      .byte.b	#%11110000
   2770  cf08		       f0		      .byte.b	#%11110000
   2771  cf09		       f0		      .byte.b	#%11110000
   2772  cf0a		       f0		      .byte.b	#%11110000
   2773  cf0b		       f0		      .byte.b	#%11110000
   2774  cf0c		       f0		      .byte.b	#%11110000
   2775  cf0d		       f0		      .byte.b	#%11110000
   2776  cf0e		       f0		      .byte.b	#%11110000
   2777  cf0f		       f0		      .byte.b	#%11110000
   2778  cf10		       f0		      .byte.b	#%11110000
   2779  cf11		       f0		      .byte.b	#%11110000
   2780  cf12		       f0		      .byte.b	#%11110000
   2781  cf13		       f0		      .byte.b	#%11110000
   2782  cf14		       f0		      .byte.b	#%11110000
   2783  cf15		       f0		      .byte.b	#%11110000
   2784  cf16		       f0		      .byte.b	#%11110000
   2785  cf17		       f0		      .byte.b	#%11110000
   2786  cf18		       f0		      .byte.b	#%11110000
   2787  cf19		       f0		      .byte.b	#%11110000
   2788  cf1a		       f0		      .byte.b	#%11110000
   2789  cf1b		       f0		      .byte.b	#%11110000
   2790  cf1c		       f0		      .byte.b	#%11110000
   2791  cf1d		       f0		      .byte.b	#%11110000
   2792  cf1e		       f0		      .byte.b	#%11110000
   2793  cf1f		       f0		      .byte.b	#%11110000
   2794  cf20		       f0		      .byte.b	#%11110000
   2795  cf21		       f0		      .byte.b	#%11110000
   2796  cf22		       f0		      .byte.b	#%11110000
   2797  cf23		       f0		      .byte.b	#%11110000
   2798  cf24		       70		      .byte.b	#%01110000
   2799  cf25		       30		      .byte.b	#%00110000
   2800  cf26		       10		      .byte.b	#%00010000
   2801  cf27
   2802  cf27				   RDeadEnd1		;Used for PF1
   2803  cf27		       00		      .byte.b	#%00000000
   2804  cf28		       00		      .byte.b	#%00000000
   2805  cf29		       00		      .byte.b	#%00000000
   2806  cf2a		       ff		      .byte.b	#%11111111
   2807  cf2b		       ff		      .byte.b	#%11111111
   2808  cf2c		       ff		      .byte.b	#%11111111
   2809  cf2d		       ff		      .byte.b	#%11111111
   2810  cf2e		       ff		      .byte.b	#%11111111
   2811  cf2f		       ff		      .byte.b	#%11111111
   2812  cf30		       ff		      .byte.b	#%11111111
   2813  cf31		       ff		      .byte.b	#%11111111
   2814  cf32		       ff		      .byte.b	#%11111111
   2815  cf33		       ff		      .byte.b	#%11111111
   2816  cf34		       ff		      .byte.b	#%11111111
   2817  cf35		       ff		      .byte.b	#%11111111
   2818  cf36		       ff		      .byte.b	#%11111111
   2819  cf37		       ff		      .byte.b	#%11111111
   2820  cf38		       ff		      .byte.b	#%11111111
   2821  cf39		       ff		      .byte.b	#%11111111
   2822  cf3a		       ff		      .byte.b	#%11111111
   2823  cf3b		       ff		      .byte.b	#%11111111
   2824  cf3c		       ff		      .byte.b	#%11111111
   2825  cf3d		       ff		      .byte.b	#%11111111
   2826  cf3e		       ff		      .byte.b	#%11111111
   2827  cf3f		       ff		      .byte.b	#%11111111
   2828  cf40		       ff		      .byte.b	#%11111111
   2829  cf41		       ff		      .byte.b	#%11111111
   2830  cf42		       ff		      .byte.b	#%11111111
   2831  cf43		       ff		      .byte.b	#%11111111
   2832  cf44		       ff		      .byte.b	#%11111111
   2833  cf45		       ff		      .byte.b	#%11111111
   2834  cf46		       ff		      .byte.b	#%11111111
   2835  cf47		       ff		      .byte.b	#%11111111
   2836  cf48		       ff		      .byte.b	#%11111111
   2837  cf49		       ff		      .byte.b	#%11111111
   2838  cf4a		       ff		      .byte.b	#%11111111
   2839  cf4b		       00		      .byte.b	#%00000000
   2840  cf4c		       00		      .byte.b	#%00000000
   2841  cf4d		       00		      .byte.b	#%00000000
   2842  cf4e
   2843  cf4e				   RDeadEnd2		;Used for PF2
   2844  cf4e		       00		      .byte.b	#%00000000
   2845  cf4f		       00		      .byte.b	#%00000000
   2846  cf50		       00		      .byte.b	#%00000000
   2847  cf51		       ff		      .byte.b	#%11111111
   2848  cf52		       ff		      .byte.b	#%11111111
   2849  cf53		       ff		      .byte.b	#%11111111
   2850  cf54		       ff		      .byte.b	#%11111111
   2851  cf55		       ff		      .byte.b	#%11111111
   2852  cf56		       ff		      .byte.b	#%11111111
   2853  cf57		       ff		      .byte.b	#%11111111
   2854  cf58		       ff		      .byte.b	#%11111111
   2855  cf59		       ff		      .byte.b	#%11111111
   2856  cf5a		       ff		      .byte.b	#%11111111
   2857  cf5b		       ff		      .byte.b	#%11111111
   2858  cf5c		       ff		      .byte.b	#%11111111
   2859  cf5d		       ff		      .byte.b	#%11111111
   2860  cf5e		       ff		      .byte.b	#%11111111
   2861  cf5f		       ff		      .byte.b	#%11111111
   2862  cf60		       ff		      .byte.b	#%11111111
   2863  cf61		       ff		      .byte.b	#%11111111
   2864  cf62		       ff		      .byte.b	#%11111111
   2865  cf63		       ff		      .byte.b	#%11111111
   2866  cf64		       ff		      .byte.b	#%11111111
   2867  cf65		       ff		      .byte.b	#%11111111
   2868  cf66		       ff		      .byte.b	#%11111111
   2869  cf67		       ff		      .byte.b	#%11111111
   2870  cf68		       ff		      .byte.b	#%11111111
   2871  cf69		       ff		      .byte.b	#%11111111
   2872  cf6a		       ff		      .byte.b	#%11111111
   2873  cf6b		       ff		      .byte.b	#%11111111
   2874  cf6c		       ff		      .byte.b	#%11111111
   2875  cf6d		       ff		      .byte.b	#%11111111
   2876  cf6e		       ff		      .byte.b	#%11111111
   2877  cf6f		       ff		      .byte.b	#%11111111
   2878  cf70		       ff		      .byte.b	#%11111111
   2879  cf71		       ff		      .byte.b	#%11111111
   2880  cf72		       00		      .byte.b	#%00000000
   2881  cf73		       00		      .byte.b	#%00000000
   2882  cf74		       00		      .byte.b	#%00000000
   2883  cf75
   2884  cf75				   ROnly1Room		;Used for PF2
   2885  cf75		       00		      .byte.b	#%00000000
   2886  cf76		       00		      .byte.b	#%00000000
   2887  cf77		       00		      .byte.b	#%00000000
   2888  cf78		       00		      .byte.b	#%00000000
   2889  cf79		       00		      .byte.b	#%00000000
   2890  cf7a		       00		      .byte.b	#%00000000
   2891  cf7b		       00		      .byte.b	#%00000000
   2892  cf7c		       00		      .byte.b	#%00000000
   2893  cf7d		       00		      .byte.b	#%00000000
   2894  cf7e		       00		      .byte.b	#%00000000
   2895  cf7f		       00		      .byte.b	#%00000000
   2896  cf80		       00		      .byte.b	#%00000000
   2897  cf81		       ff		      .byte.b	#%11111111
   2898  cf82		       ff		      .byte.b	#%11111111
   2899  cf83		       ff		      .byte.b	#%11111111
   2900  cf84		       ff		      .byte.b	#%11111111
   2901  cf85		       ff		      .byte.b	#%11111111
   2902  cf86		       ff		      .byte.b	#%11111111
   2903  cf87		       ff		      .byte.b	#%11111111
   2904  cf88		       ff		      .byte.b	#%11111111
   2905  cf89		       ff		      .byte.b	#%11111111
   2906  cf8a		       ff		      .byte.b	#%11111111
   2907  cf8b		       ff		      .byte.b	#%11111111
   2908  cf8c		       ff		      .byte.b	#%11111111
   2909  cf8d		       ff		      .byte.b	#%11111111
   2910  cf8e		       ff		      .byte.b	#%11111111
   2911  cf8f		       ff		      .byte.b	#%11111111
   2912  cf90		       00		      .byte.b	#%00000000
   2913  cf91		       00		      .byte.b	#%00000000
   2914  cf92		       00		      .byte.b	#%00000000
   2915  cf93		       00		      .byte.b	#%00000000
   2916  cf94		       00		      .byte.b	#%00000000
   2917  cf95		       00		      .byte.b	#%00000000
   2918  cf96		       00		      .byte.b	#%00000000
   2919  cf97		       00		      .byte.b	#%00000000
   2920  cf98		       00		      .byte.b	#%00000000
   2921  cf99		       00		      .byte.b	#%00000000
   2922  cf9a		       00		      .byte.b	#%00000000
   2923  cf9b		       00		      .byte.b	#%00000000
   2924  cf9c
   2925  cfc0					      ORG	$CFC0
   2926  cfc0					      RORG	$FFC0
   2927  cfc0
   2928  cfc0				   RCatchFromEnemyDrawing
   2929  cfc0		       ea		      nop
   2930  cfc1		       ea		      nop
   2931  cfc2		       ea		      nop
   2932  cfc3		       4c 0c f1 	      jmp	RPlaceBattleText
   2933  cfc6				   RGoToEnemyDrawingBank
   2934  cfc6		       8d f8 1f 	      sta	$1FF8	;Go to bank 2
   2935  cfc9		       ea		      nop
   2936  cfca		       ea		      nop
   2937  cfcb		       ea		      nop
   2938  cfcc
   2939  cfe0					      ORG	$CFE0
   2940  cfe0					      RORG	$FFE0
   2941  cfe0
   2942  cfe0				   RCatchFromVBlank
   2943  cfe0		       ea		      nop
   2944  cfe1		       ea		      nop
   2945  cfe2		       ea		      nop
   2946  cfe3		       4c 03 f0 	      jmp	RMainPicture
   2947  cfe6				   RGoToOverscan
   2948  cfe6		       8d f7 1f 	      sta	$1FF7	;Go to bank 1
   2949  cfe9		       ea		      nop
   2950  cfea		       ea		      nop
   2951  cfeb		       ea		      nop
   2952  cfec
   2953  cffa					      ORG	$CFFA
   2954  cffa					      RORG	$FFFA
   2955  cffa
   2956  cffa							;NMI, IRQ, and RESET information
   2957  cffa		       00 f0		      .word.w	RReset
   2958  cffc		       00 f0		      .word.w	RReset
   2959  cffe		       00 f0		      .word.w	RReset
   2960  d000
   2961  d000
   2962  d000					      ORG	$D000
   2963  d000					      RORG	$F000
   2964  d000
   2965  d000							;BANK 1 - CONTAINS THE MAJORITY OF THE MAZE/BATTLE SYSTEM LOGIC
   2966  d000
   2967  d000				   LReset
   2968  d000		       0c f7 1f 	      nop	$1FF7	;Make sure to stay in bank 1
   2969  d003		       a2 00		      ldx	#0
   2970  d005		       8a		      txa
   2971  d006		       a8		      tay
   2972  d007				   LClear
   2973  d007		       ca		      dex
   2974  d008		       9a		      txs
   2975  d009		       48		      pha
   2976  d00a		       d0 fb		      bne	LClear
   2977  d00c		       d8		      cld
   2978  d00d
   2979  d00d		       a9 15		      lda	#21
   2980  d00f		       85 0a		      sta	CTRLPF	;Sets the playfield to reflect, and makes the ball 4 clocks wide
   2981  d011
   2982  d011		       a9 00		      lda	#0
   2983  d013		       8d 81 02 	      sta	SWACNT
   2984  d016		       85 a2		      sta	playerX
   2985  d018		       85 a3		      sta	playerY
   2986  d01a		       85 a4		      sta	playerFacing
   2987  d01c
   2988  d01c		       ad 84 02 	      lda	INTIM	;Seed the random number generator
   2989  d01f		       d0 02		      bne	LSkipSeeding
   2990  d021		       a9 6b		      lda	#$6B	;Extremely random random number generator here
   2991  d023				   LSkipSeeding
   2992  d023		       85 b7		      sta	rand8
   2993  d025
   2994  d025		       a9 09		      lda	#$09	;Maze level 0, party level 9
   2995  d027		       85 f2		      sta	mazeAndPartyLevel
   2996  d029
   2997  d029		       a0 03		      ldy	#3	; Subroutine ID for SClearMazeData
   2998  d02b		       20 b0 ff 	      jsr	LRunFunctionInSBank
   2999  d02e
   3000  d02e		       a0 00		      ldy	#0	; Subroutine ID for SGenerateMazeData
   3001  d030		       20 b0 ff 	      jsr	LRunFunctionInSBank
   3002  d033
   3003  d033							;Temp testing code that will be removed much, much later
   3004  d033		       a9 33		      lda	#$33
   3005  d035		       85 81		      sta	char1
   3006  d037		       a9 06		      lda	#F
   3007  d039		       85 85		      sta	name1
   3008  d03b		       a9 12		      lda	#R
   3009  d03d		       85 89		      sta	name2
   3010  d03f		       a9 05		      lda	#E
   3011  d041		       85 8d		      sta	name3
   3012  d043		       a9 04		      lda	#D
   3013  d045		       85 91		      sta	name4
   3014  d047		       a9 00		      lda	#EMPTY
   3015  d049		       85 95		      sta	name5
   3016  d04b		       a9 58		      lda	#$58
   3017  d04d		       85 99		      sta	hp1
   3018  d04f		       a9 23		      lda	#$23
   3019  d051		       85 9d		      sta	mp1
   3020  d053
   3021  d053		       a9 35		      lda	#$35
   3022  d055		       85 82		      sta	char2
   3023  d057		       a9 04		      lda	#D
   3024  d059		       85 86		      sta	name1+1
   3025  d05b		       a9 01		      lda	#A
   3026  d05d		       85 8a		      sta	name2+1
   3027  d05f		       a9 16		      lda	#V
   3028  d061		       85 8e		      sta	name3+1
   3029  d063		       a9 05		      lda	#E
   3030  d065		       85 92		      sta	name4+1
   3031  d067		       a9 00		      lda	#EMPTY
   3032  d069		       85 96		      sta	name5+1
   3033  d06b		       a9 17		      lda	#$17
   3034  d06d		       85 9a		      sta	hp2
   3035  d06f		       a9 17		      lda	#$17
   3036  d071		       85 9e		      sta	mp2
   3037  d073
   3038  d073		       a9 32		      lda	#$32
   3039  d075		       85 83		      sta	char3
   3040  d077		       a9 14		      lda	#T
   3041  d079		       85 87		      sta	name1+2
   3042  d07b		       a9 09		      lda	#I
   3043  d07d		       85 8b		      sta	name2+2
   3044  d07f		       a9 0d		      lda	#M
   3045  d081		       85 8f		      sta	name3+2
   3046  d083		       a9 00		      lda	#EMPTY
   3047  d085		       85 93		      sta	name4+2
   3048  d087		       85 97		      sta	name5+2
   3049  d089		       a9 45		      lda	#$45
   3050  d08b		       85 9b		      sta	hp3
   3051  d08d		       a9 00		      lda	#$00
   3052  d08f		       85 9f		      sta	mp3
   3053  d091
   3054  d091		       a9 34		      lda	#$34
   3055  d093		       85 84		      sta	char4
   3056  d095		       a9 0a		      lda	#J
   3057  d097		       85 88		      sta	name1+3
   3058  d099		       a9 0f		      lda	#O
   3059  d09b		       85 8c		      sta	name2+3
   3060  d09d		       a9 08		      lda	#H
   3061  d09f		       85 90		      sta	name3+3
   3062  d0a1		       a9 0e		      lda	#N
   3063  d0a3		       85 94		      sta	name4+3
   3064  d0a5		       a9 00		      lda	#EMPTY
   3065  d0a7		       85 98		      sta	name5+3
   3066  d0a9		       a9 10		      lda	#$10
   3067  d0ab		       85 9c		      sta	hp4
   3068  d0ad		       a9 00		      lda	#$00
   3069  d0af		       85 a0		      sta	mp4
   3070  d0b1
   3071  d0b1		       20 71 f4 	      jsr	LUpdateAvatars
   3072  d0b4
   3073  d0b4		       a9 80		      lda	#$80
   3074  d0b6		       85 bf		      sta	inBattle
   3075  d0b8		       a9 ff		      lda	#$FF
   3076  d0ba		       85 e7		      sta	hasAction
   3077  d0bc							;lda #$80
   3078  d0bc							;sta currentMenu
   3079  d0bc							;lda #$03
   3080  d0bc							;sta menuSize
   3081  d0bc		       a9 01		      lda	#1
   3082  d0be		       85 d6		      sta	enemyHP
   3083  d0c0		       85 d7		      sta	enemyHP+1
   3084  d0c2		       85 d8		      sta	enemyHP+2
   3085  d0c4		       85 d9		      sta	enemyHP+3
   3086  d0c6
   3087  d0c6				   LStartOfFrame
   3088  d0c6		       a9 82		      lda	#$82
   3089  d0c8		       85 01		      sta	VBLANK	;Enable blanking
   3090  d0ca		       85 00		      sta	VSYNC	;Enable syncing signal
   3091  d0cc		       85 02		      sta	WSYNC	;Requisite 3 scanlines of VSYNC
   3092  d0ce		       85 02		      sta	WSYNC
   3093  d0d0		       85 02		      sta	WSYNC
   3094  d0d2		       a9 00		      lda	#0
   3095  d0d4		       85 00		      sta	VSYNC	;Stop broadcasting VSYNC signal
   3096  d0d6
   3097  d0d6
   3098  d0d6		       20 09 f4 	      jsr	LRandom	;Tick the random number generator
   3099  d0d9
   3100  d0d9		       a9 01		      lda	#1
   3101  d0db		       2c 82 02 	      bit	SWCHB
   3102  d0de		       f0 16		      beq	LGoToReset	;Reset the game if the console reset switch is pressed
   3103  d0e0
   3104  d0e0		       a9 2c		      lda	#VBLANK_TIMER_DURATION
   3105  d0e2		       8d 96 02 	      sta	TIM64T	;Set timer to complete at the end of VBLANK.
   3106  d0e5
   3107  d0e5		       a5 bf		      lda	inBattle
   3108  d0e7		       d0 34		      bne	LWaitForVblankTimer	;Skip this logic if we are not in maze mode...
   3109  d0e9
   3110  d0e9		       a0 02		      ldy	#2	; Subroutine ID for SUpdatePlayerMovement
   3111  d0eb		       20 b0 ff 	      jsr	LRunFunctionInSBank
   3112  d0ee
   3113  d0ee		       a0 01		      ldy	#1	; Subroutine ID for SUpdateMazeRenderingPointers
   3114  d0f0		       20 b0 ff 	      jsr	LRunFunctionInSBank
   3115  d0f3
   3116  d0f3		       4c f9 f0 	      jmp	LUpdateCompassPointer
   3117  d0f6
   3118  d0f6
   3119  d0f6				   LGoToReset
   3120  d0f6		       4c 00 f0 	      jmp	LReset
   3121  d0f9
   3122  d0f9				   LUpdateCompassPointer
   3123  d0f9		       a4 a4		      ldy	playerFacing
   3124  d0fb		       f0 15		      beq	LCompassEast
   3125  d0fd		       88		      dey
   3126  d0fe		       f0 08		      beq	LCompassSouth
   3127  d100		       88		      dey
   3128  d101		       f0 0a		      beq	LCompassWest
   3129  d103				   LCompassNorth
   3130  d103		       a9 70		      lda	#(RLetterN & $FF)
   3131  d105		       4c 14 f1 	      jmp	LStoreCompassPointer
   3132  d108				   LCompassSouth
   3133  d108		       a9 98		      lda	#(RLetterS & $FF)
   3134  d10a		       4c 14 f1 	      jmp	LStoreCompassPointer
   3135  d10d				   LCompassWest
   3136  d10d		       a9 b8		      lda	#(RLetterW & $FF)
   3137  d10f		       4c 14 f1 	      jmp	LStoreCompassPointer
   3138  d112				   LCompassEast
   3139  d112		       a9 28		      lda	#(RLetterE & $FF)
   3140  d114
   3141  d114				   LStoreCompassPointer
   3142  d114		       85 b1		      sta	tempPointer1
   3143  d116
   3144  d116		       a9 fd		      lda	#(RLetterN >> 8 & $FF)
   3145  d118		       85 b2		      sta	tempPointer1+1
   3146  d11a
   3147  d11a		       4c d0 ff 	      jmp	LGoToUpdateEffects
   3148  d11d
   3149  d11d				   LAfterEffectUpdate
   3150  d11d				   LWaitForVblankTimer
   3151  d11d		       ad 84 02 	      lda	INTIM
   3152  d120		       d0 fb		      bne	LWaitForVblankTimer	;Is VBLANK over yet?
   3153  d122		       85 02		      sta	WSYNC
   3154  d124
   3155  d124		       4c e0 ff 	      jmp	LGoToMainPicture
   3156  d127
   3157  d127				   LOverscan
   3158  d127		       a9 24		      lda	#OVERSCAN_TIMER_DURATION
   3159  d129		       8d 96 02 	      sta	TIM64T
   3160  d12c
   3161  d12c		       a5 bf		      lda	inBattle
   3162  d12e		       f0 62		      beq	LMazeLogic	;Skip the following logic if we are in maze mode...
   3163  d130
   3164  d130				   LBattleLogic
   3165  d130		       ad 80 02 	      lda	SWCHA
   3166  d133		       29 f0		      and	#$F0
   3167  d135		       85 a8		      sta	temp1
   3168  d137		       a5 0c		      lda	INPT4
   3169  d139		       29 80		      and	#$80
   3170  d13b		       4a		      lsr
   3171  d13c		       4a		      lsr
   3172  d13d		       4a		      lsr
   3173  d13e		       4a		      lsr
   3174  d13f		       05 a8		      ora	temp1
   3175  d141		       85 a8		      sta	temp1
   3176  d143		       a5 b9		      lda	currentMenu
   3177  d145		       10 28		      bpl	LNotInMenu
   3178  d147				   LInMenu
   3179  d147		       a5 a8		      lda	temp1
   3180  d149		       45 a7		      eor	previousInput
   3181  d14b		       29 f0		      and	#$F0
   3182  d14d		       f0 03		      beq	LNoMenuMovement
   3183  d14f				   LMenuMovement
   3184  d14f		       20 4e f4 	      jsr	LUpdateMenuCursorPos
   3185  d152				   LNoMenuMovement
   3186  d152		       a5 a8		      lda	temp1
   3187  d154		       45 a7		      eor	previousInput
   3188  d156		       29 08		      and	#$08
   3189  d158		       f0 12		      beq	LNoMenuAdvancement
   3190  d15a				   LMenuAdvancement
   3191  d15a		       20 13 f4 	      jsr	LUpdateMenuAdvancement
   3192  d15d		       a5 bf		      lda	inBattle
   3193  d15f		       c9 81		      cmp	#$81
   3194  d161		       d0 2c		      bne	LSkipBattleLogic
   3195  d163		       20 1e f2 	      jsr	LDetermineNextBattler	;If battle options menu was just exited, force a new battler to be chosen
   3196  d166		       20 71 f4 	      jsr	LUpdateAvatars
   3197  d169		       20 3f f3 	      jsr	LDoBattle
   3198  d16c				   LNoMenuAdvancement
   3199  d16c		       4c 8f f1 	      jmp	LSkipBattleLogic
   3200  d16f				   LNotInMenu
   3201  d16f		       a5 a8		      lda	temp1
   3202  d171		       45 a7		      eor	previousInput
   3203  d173		       29 08		      and	#$08
   3204  d175		       f0 18		      beq	LSkipBattleLogic	;Button is not pressed, so don't advance battle logic
   3205  d177		       a5 bf		      lda	inBattle
   3206  d179		       c9 81		      cmp	#$81
   3207  d17b		       f0 09		      beq	LNeedANewBattler
   3208  d17d		       20 71 f4 	      jsr	LUpdateAvatars
   3209  d180		       20 3f f3 	      jsr	LDoBattle
   3210  d183		       4c 8f f1 	      jmp	LSkipBattleLogic
   3211  d186				   LNeedANewBattler
   3212  d186		       20 1e f2 	      jsr	LDetermineNextBattler
   3213  d189							;lda inBattle
   3214  d189		       20 71 f4 	      jsr	LUpdateAvatars
   3215  d18c		       20 3f f3 	      jsr	LDoBattle
   3216  d18f				   LSkipBattleLogic
   3217  d18f		       4c f9 f1 	      jmp	LDoneWithSeparateLogic
   3218  d192
   3219  d192				   LMazeLogic
   3220  d192							;Need to check for the maze exit and campfire location
   3221  d192							;Need to determine if a random encounter occurs
   3222  d192
   3223  d192		       a5 0c		      lda	INPT4
   3224  d194		       30 30		      bmi	LButtonNotPressed
   3225  d196		       29 80		      and	#$80
   3226  d198		       4a		      lsr
   3227  d199		       4a		      lsr
   3228  d19a		       4a		      lsr
   3229  d19b		       4a		      lsr
   3230  d19c		       85 a8		      sta	temp1
   3231  d19e		       a5 a7		      lda	previousInput
   3232  d1a0		       29 08		      and	#$08
   3233  d1a2		       45 a8		      eor	temp1
   3234  d1a4		       f0 20		      beq	LButtonNotPressed
   3235  d1a6		       a5 b9		      lda	currentMenu
   3236  d1a8		       d0 12		      bne	LExitPosSwapMenu
   3237  d1aa				   LEnterPosSwapMenu
   3238  d1aa		       a9 82		      lda	#$82
   3239  d1ac		       85 b9		      sta	currentMenu
   3240  d1ae		       a9 01		      lda	#1
   3241  d1b0		       85 ef		      sta	currentEffect
   3242  d1b2		       85 f0		      sta	effectCounter
   3243  d1b4		       85 f1		      sta	effectCountdown
   3244  d1b6		       a9 03		      lda	#$03
   3245  d1b8		       85 be		      sta	menuSize
   3246  d1ba		       d0 0a		      bne	LButtonNotPressed	;Should always be true, just saves one byte over jmp
   3247  d1bc				   LExitPosSwapMenu
   3248  d1bc		       a9 00		      lda	#$00
   3249  d1be		       85 ef		      sta	currentEffect
   3250  d1c0		       85 f0		      sta	effectCounter
   3251  d1c2		       85 b9		      sta	currentMenu
   3252  d1c4		       85 be		      sta	menuSize
   3253  d1c6				   LButtonNotPressed
   3254  d1c6		       a5 b9		      lda	currentMenu
   3255  d1c8		       f0 2f		      beq	LNoPartyPosSwapLogic
   3256  d1ca		       a5 a7		      lda	previousInput
   3257  d1cc		       ad 80 02 	      lda	SWCHA
   3258  d1cf		       29 f0		      and	#$F0
   3259  d1d1		       85 a8		      sta	temp1
   3260  d1d3		       a5 a7		      lda	previousInput
   3261  d1d5		       29 f0		      and	#$F0
   3262  d1d7		       c5 a8		      cmp	temp1
   3263  d1d9		       f0 1e		      beq	LNoPartyPosSwapLogic
   3264  d1db		       20 4e f4 	      jsr	LUpdateMenuCursorPos
   3265  d1de		       a5 ba		      lda	cursorIndexAndMessageY
   3266  d1e0		       85 bd		      sta	highlightedIndex
   3267  d1e2		       a9 40		      lda	#LEFT_MASK
   3268  d1e4		       2c 80 02 	      bit	SWCHA
   3269  d1e7		       d0 10		      bne	LNoPartyPosSwapLogic
   3270  d1e9							;Left is held down, so swap this person
   3271  d1e9		       a9 01		      lda	#1
   3272  d1eb		       a4 bd		      ldy	highlightedIndex
   3273  d1ed		       c8		      iny
   3274  d1ee				   LPartyPosMaskLoop
   3275  d1ee		       88		      dey
   3276  d1ef		       f0 04		      beq	LAfterPartyPosMaskLoop
   3277  d1f1		       0a		      asl
   3278  d1f2		       4c ee f1 	      jmp	LPartyPosMaskLoop
   3279  d1f5				   LAfterPartyPosMaskLoop
   3280  d1f5		       45 a1		      eor	partyBattlePos
   3281  d1f7		       85 a1		      sta	partyBattlePos
   3282  d1f9				   LNoPartyPosSwapLogic
   3283  d1f9
   3284  d1f9
   3285  d1f9				   LDoneWithSeparateLogic
   3286  d1f9
   3287  d1f9							;Update the previousInput variable, since both maze and battle logic use this.
   3288  d1f9		       ad 80 02 	      lda	SWCHA
   3289  d1fc		       29 f0		      and	#$F0
   3290  d1fe		       85 a8		      sta	temp1
   3291  d200		       a5 0c		      lda	INPT4
   3292  d202		       29 80		      and	#$80
   3293  d204		       4a		      lsr
   3294  d205		       4a		      lsr
   3295  d206		       4a		      lsr
   3296  d207		       4a		      lsr
   3297  d208		       05 a8		      ora	temp1
   3298  d20a		       85 a7		      sta	previousInput
   3299  d20c
   3300  d20c				   LWaitForOverscanTimer
   3301  d20c		       ad 84 02 	      lda	INTIM
   3302  d20f		       d0 fb		      bne	LWaitForOverscanTimer
   3303  d211
   3304  d211		       85 02		      sta	WSYNC
   3305  d213		       4c c6 f0 	      jmp	LStartOfFrame
   3306  d216
   3307  d216				   LHasActionMasks
   3308  d216		       80		      .byte.b	#$80
   3309  d217		       40		      .byte.b	#$40
   3310  d218		       20		      .byte.b	#$20
   3311  d219		       10		      .byte.b	#$10
   3312  d21a		       08		      .byte.b	#$08
   3313  d21b		       04		      .byte.b	#$04
   3314  d21c		       02		      .byte.b	#$02
   3315  d21d		       01		      .byte.b	#$01
   3316  d21e
   3317  d21e				   LDetermineNextBattler SUBROUTINE		;Performs the logic required to determine the next battler to take their action
   3318  d21e		       a5 0c		      lda	INPT4
   3319  d220		       10 01		      bpl	.LButtonPressed
   3320  d222		       60		      rts
   3321  d223				   .LButtonPressed
   3322  d223							;Need to check if either side has lost
   3323  d223		       a5 99		      lda	hp1
   3324  d225		       05 9a		      ora	hp2
   3325  d227		       05 9b		      ora	hp3
   3326  d229		       05 9c		      ora	hp4
   3327  d22b		       f0 12		      beq	.LPartyDead
   3328  d22d		       a5 d6		      lda	enemyHP
   3329  d22f		       05 d7		      ora	enemyHP+1
   3330  d231		       05 d8		      ora	enemyHP+2
   3331  d233		       05 d9		      ora	enemyHP+3
   3332  d235		       f0 0d		      beq	.LEnemiesDefeated
   3333  d237		       a5 e7		      lda	hasAction
   3334  d239		       d0 60		      bne	.LContinue
   3335  d23b							;If here, that means that all actions have been taken, so need to take new actions
   3336  d23b		       4c 49 f2 	      jmp	.LDoneDelaying	;Rename this label if this code works
   3337  d23e		       60		      rts
   3338  d23f				   .LPartyDead
   3339  d23f		       a9 91		      lda	#$91
   3340  d241		       85 bf		      sta	inBattle
   3341  d243		       60		      rts
   3342  d244				   .LEnemiesDefeated
   3343  d244		       a9 90		      lda	#$90
   3344  d246		       85 bf		      sta	inBattle
   3345  d248		       60		      rts
   3346  d249				   .LDoneDelaying
   3347  d249		       a2 00		      ldx	#0
   3348  d24b		       86 e7		      stx	hasAction
   3349  d24d				   .LDetermineIfBattlerIsAlive
   3350  d24d		       e0 04		      cpx	#4
   3351  d24f		       b0 06		      bcs	.LCheckEnemies
   3352  d251		       b5 99		      lda	hp1,x
   3353  d253		       f0 16		      beq	.LBattlerIsUnconscious
   3354  d255		       d0 0e		      bne	.L1
   3355  d257				   .LCheckEnemies
   3356  d257		       86 a8		      stx	temp1
   3357  d259		       ca		      dex
   3358  d25a		       ca		      dex
   3359  d25b		       ca		      dex
   3360  d25c		       ca		      dex
   3361  d25d		       b5 d6		      lda	enemyHP,x
   3362  d25f		       a6 a8		      ldx	temp1
   3363  d261		       c9 00		      cmp	#0
   3364  d263		       f0 06		      beq	.LBattlerIsUnconscious
   3365  d265				   .L1
   3366  d265		       a9 01		      lda	#1
   3367  d267		       85 a8		      sta	temp1
   3368  d269		       d0 04		      bne	.LAfterChecking
   3369  d26b				   .LBattlerIsUnconscious
   3370  d26b		       a9 00		      lda	#0
   3371  d26d		       85 a8		      sta	temp1
   3372  d26f				   .LAfterChecking
   3373  d26f		       a5 e7		      lda	hasAction
   3374  d271		       0a		      asl
   3375  d272		       05 a8		      ora	temp1
   3376  d274		       85 e7		      sta	hasAction
   3377  d276		       e8		      inx
   3378  d277		       e0 08		      cpx	#8
   3379  d279		       90 d2		      bcc	.LDetermineIfBattlerIsAlive
   3380  d27b
   3381  d27b		       a9 80		      lda	#$80	;At least one battler on each side is still alive, so continue the battle
   3382  d27d		       85 bf		      sta	inBattle
   3383  d27f		       85 b9		      sta	currentMenu
   3384  d281		       a9 00		      lda	#0
   3385  d283		       85 ba		      sta	cursorIndexAndMessageY
   3386  d285		       85 d2		      sta	battleActions
   3387  d287		       85 d3		      sta	battleActions+1
   3388  d289		       85 d4		      sta	battleActions+2
   3389  d28b		       85 d5		      sta	battleActions+3
   3390  d28d		       85 e6		      sta	enemyAction
   3391  d28f		       a9 03		      lda	#3
   3392  d291		       85 be		      sta	menuSize
   3393  d293		       20 13 f3 	      jsr	LFindFirstLivingAlly
   3394  d296		       86 c0		      stx	currentBattler
   3395  d298		       86 bd		      stx	highlightedIndex
   3396  d29a		       60		      rts
   3397  d29b				   .LContinue
   3398  d29b		       a9 00		      lda	#0
   3399  d29d		       85 ad		      sta	temp5	;Will be used to hold the currentBattler value of the battler with the current max speed
   3400  d29f		       85 af		      sta	temp6	;Will be used to hold the current max speed
   3401  d2a1		       a2 07		      ldx	#7
   3402  d2a3		       a5 bf		      lda	inBattle
   3403  d2a5		       c9 81		      cmp	#$81
   3404  d2a7		       f0 01		      beq	.LFindMaxSpeed
   3405  d2a9		       60		      rts		;inBattle is not 81, so do not update the current battler
   3406  d2aa				   .LFindMaxSpeed
   3407  d2aa		       a5 e7		      lda	hasAction
   3408  d2ac		       3d 16 f2 	      and	LHasActionMasks,x	;Go check the next person if this battler has already acted this turn
   3409  d2af		       f0 4b		      beq	.LNextIteration
   3410  d2b1		       e0 04		      cpx	#4
   3411  d2b3		       b0 21		      bcs	.LCheckEnemySpeed
   3412  d2b5				   .LCheckAllySpeed
   3413  d2b5		       b5 81		      lda	char1,x
   3414  d2b7		       29 0f		      and	#$0F	;Get the class of this character
   3415  d2b9		       a8		      tay
   3416  d2ba		       b9 0c fe 	      lda	LClassSpeedLookup,y	;Get the pointer to the table for this class's speed data
   3417  d2bd		       85 b1		      sta	tempPointer1
   3418  d2bf		       a9 fd		      lda	#(LStat1PerLevel >> 8 & $FF)
   3419  d2c1		       85 b2		      sta	tempPointer1+1
   3420  d2c3		       a5 f2		      lda	mazeAndPartyLevel
   3421  d2c5		       29 0f		      and	#$0F	;Get the level of the party
   3422  d2c7		       a8		      tay
   3423  d2c8		       88		      dey
   3424  d2c9		       b1 b1		      lda	(tempPointer1),y	;Get the speed for this character's class and level
   3425  d2cb		       c5 af		      cmp	temp6
   3426  d2cd		       90 2d		      bcc	.LNextIteration
   3427  d2cf		       86 ad		      stx	temp5
   3428  d2d1		       85 af		      sta	temp6
   3429  d2d3		       4c fc f2 	      jmp	.LNextIteration
   3430  d2d6				   .LCheckEnemySpeed
   3431  d2d6		       ca		      dex
   3432  d2d7		       ca		      dex
   3433  d2d8		       ca		      dex
   3434  d2d9		       ca		      dex
   3435  d2da		       b5 d6		      lda	enemyHP,x
   3436  d2dc		       e8		      inx
   3437  d2dd		       e8		      inx
   3438  d2de		       e8		      inx
   3439  d2df		       e8		      inx
   3440  d2e0		       c9 00		      cmp	#0
   3441  d2e2		       f0 18		      beq	.LNextIteration
   3442  d2e4		       ca		      dex
   3443  d2e5		       ca		      dex
   3444  d2e6		       ca		      dex
   3445  d2e7		       ca		      dex
   3446  d2e8		       b5 da		      lda	enemyID,x	;Horrifically inefficient
   3447  d2ea		       e8		      inx
   3448  d2eb		       e8		      inx
   3449  d2ec		       e8		      inx
   3450  d2ed		       e8		      inx
   3451  d2ee		       29 3f		      and	#$3F
   3452  d2f0		       a8		      tay
   3453  d2f1		       b9 43 fc 	      lda	LEnemySpeed,y
   3454  d2f4		       c5 af		      cmp	temp6
   3455  d2f6		       90 04		      bcc	.LNextIteration	;This enemy's speed is not high enough to be the new max
   3456  d2f8		       86 ad		      stx	temp5	;The currentBattler value
   3457  d2fa		       85 af		      sta	temp6	;The new speed value to compare against
   3458  d2fc				   .LNextIteration
   3459  d2fc		       ca		      dex
   3460  d2fd		       10 ab		      bpl	.LFindMaxSpeed
   3461  d2ff		       a6 ad		      ldx	temp5
   3462  d301		       86 c0		      stx	currentBattler	;The next action to be taken is the one now in currentBattler
   3463  d303		       bd 16 f2 	      lda	LHasActionMasks,x
   3464  d306		       45 e7		      eor	hasAction
   3465  d308		       85 e7		      sta	hasAction	;Mark that this battler has already taken their action
   3466  d30a		       e0 04		      cpx	#4
   3467  d30c		       b0 01		      bcs	.LDetermineEnemyAI
   3468  d30e		       60		      rts
   3469  d30f				   .LDetermineEnemyAI
   3470  d30f		       20 1d f3 	      jsr	LSetEnemyAction
   3471  d312		       60		      rts
   3472  d313
   3473  d313				   LFindFirstLivingAlly SUBROUTINE		;Returns the id of first party member with positive HP in X.
   3474  d313		       a2 00		      ldx	#0
   3475  d315				   .LLoop
   3476  d315		       b5 99		      lda	hp1,x
   3477  d317		       d0 03		      bne	.LEnd
   3478  d319		       e8		      inx
   3479  d31a		       d0 f9		      bne	.LLoop
   3480  d31c				   .LEnd
   3481  d31c		       60		      rts
   3482  d31d
   3483  d31d				   LSetEnemyAction SUBROUTINE		;Choose what action this enemy will perform and set enemyAction accordingly.
   3484  d31d							;Will have to be way more complicated in the future, but this works for the moment. RIP Whomever is in front of the party
   3485  d31d		       a9 00		      lda	#$00
   3486  d31f		       85 e6		      sta	enemyAction
   3487  d321		       60		      rts
   3488  d322
   3489  d322				   LKillTarget SUBROUTINE		;Performs the correct housekeeping after a target has suffered lethal damage.
   3490  d322		       a6 bb		      ldx	startingCursorIndexAndTargetID
   3491  d324		       bd 16 f2 	      lda	LHasActionMasks,x
   3492  d327		       49 ff		      eor	#$FF
   3493  d329		       25 e7		      and	hasAction
   3494  d32b		       85 e7		      sta	hasAction	;Make sure this battler loses their action on death
   3495  d32d		       e0 04		      cpx	#4
   3496  d32f		       b0 05		      bcs	.LEnemyDied
   3497  d331				   .LFriendlyDied
   3498  d331		       a9 00		      lda	#0
   3499  d333		       95 99		      sta	hp1,x
   3500  d335		       60		      rts
   3501  d336				   .LEnemyDied
   3502  d336		       ca		      dex
   3503  d337		       ca		      dex
   3504  d338		       ca		      dex
   3505  d339		       ca		      dex
   3506  d33a		       a9 00		      lda	#0
   3507  d33c		       95 d6		      sta	enemyHP,x
   3508  d33e		       60		      rts
   3509  d33f
   3510  d33f				   LDoBattle  SUBROUTINE		;Perform the correct battle logic and update the messages accordingly. This one's a doozy.
   3511  d33f		       60		      rts
   3512  d340
   3513  d340				   LCheckBattlerDied SUBROUTINE		;Applies the binary damage in A to the battler ID of startingCursorIndexAndTargetID, and checks for death
   3514  d340		       85 b1		      sta	tempPointer1
   3515  d342		       a4 bb		      ldy	startingCursorIndexAndTargetID
   3516  d344		       c0 04		      cpy	#4
   3517  d346		       b0 1f		      bcs	.LEnemy
   3518  d348				   .LAlly
   3519  d348		       20 c2 f3 	      jsr	LBinaryToDecimal
   3520  d34b		       85 b1		      sta	tempPointer1
   3521  d34d		       b9 99 00 	      lda	hp1,y
   3522  d350		       38		      sec
   3523  d351		       f8		      sed
   3524  d352		       e5 b1		      sbc	tempPointer1
   3525  d354		       d8		      cld
   3526  d355		       f0 08		      beq	.LAllyDied
   3527  d357		       90 06		      bcc	.LAllyDied
   3528  d359		       99 99 00 	      sta	hp1,y	;Ally did not die
   3529  d35c		       a9 00		      lda	#$0
   3530  d35e		       60		      rts
   3531  d35f				   .LAllyDied
   3532  d35f		       a9 00		      lda	#0
   3533  d361		       99 99 00 	      sta	hp1,y
   3534  d364		       a9 ff		      lda	#$FF
   3535  d366		       60		      rts
   3536  d367				   .LEnemy
   3537  d367		       88		      dey
   3538  d368		       88		      dey
   3539  d369		       88		      dey
   3540  d36a		       88		      dey
   3541  d36b		       b9 d6 00 	      lda	enemyHP,y
   3542  d36e		       38		      sec
   3543  d36f		       e5 b1		      sbc	tempPointer1
   3544  d371		       f0 08		      beq	.LEnemyDied
   3545  d373		       90 06		      bcc	.LEnemyDied
   3546  d375		       99 d6 00 	      sta	enemyHP,y	;Enemy did not die
   3547  d378		       a9 00		      lda	#$0
   3548  d37a		       60		      rts
   3549  d37b				   .LEnemyDied
   3550  d37b		       a9 00		      lda	#0
   3551  d37d		       99 d6 00 	      sta	enemyHP,y
   3552  d380		       a9 ff		      lda	#$FF
   3553  d382		       60		      rts
   3554  d383
   3555  d383				   LFindAoETarget SUBROUTINE		;Finds the next target for AoE spells, returning the correct id in A. Returns $FF if there are no more targets.
   3556  d383		       a6 bc		      ldx	aoeTargetID
   3557  d385		       e0 04		      cpx	#4
   3558  d387		       b0 03		      bcs	.LLookingForEnemyID
   3559  d389				   .LLookingForAllyID
   3560  d389		       e8		      inx
   3561  d38a		       b5 99		      lda	hp1,x
   3562  d38c				   .LLookingForEnemyID
   3563  d38c
   3564  d38c		       60		      rts
   3565  d38d
   3566  d38d				   LGetBattlerMagic SUBROUTINE		;Returns the magic power of the currentBattler in A
   3567  d38d		       a6 c0		      ldx	currentBattler
   3568  d38f		       e0 04		      cpx	#4
   3569  d391		       b0 16		      bcs	.LFindEnemyMagic
   3570  d393				   .LFindAllyMagic
   3571  d393		       a5 f2		      lda	mazeAndPartyLevel
   3572  d395		       29 0f		      and	#$0F
   3573  d397		       a8		      tay		;Y now contains the level of the party
   3574  d398		       b5 81		      lda	char1,x
   3575  d39a		       29 0f		      and	#$0F	;Get just the class of this battler
   3576  d39c		       aa		      tax
   3577  d39d		       bd 06 fe 	      lda	LClassMagicLookup,x
   3578  d3a0		       85 b1		      sta	tempPointer1
   3579  d3a2		       a9 fd		      lda	#(LStat1PerLevel >> 8 & $FF)
   3580  d3a4		       85 b2		      sta	tempPointer1+1
   3581  d3a6		       b1 b1		      lda	(tempPointer1),y
   3582  d3a8		       60		      rts
   3583  d3a9				   .LFindEnemyMagic
   3584  d3a9		       b5 da		      lda	enemyID,x
   3585  d3ab		       29 3f		      and	#$3F	;Get this enemy's id
   3586  d3ad		       aa		      tax
   3587  d3ae		       bd 46 fc 	      lda	LEnemyMagic,x
   3588  d3b1		       60		      rts
   3589  d3b2
   3590  d3b2							;Interprets X as the cursorPosition
   3591  d3b2				   LCursorIndexToBattlerIndex SUBROUTINE		;Converts the position of a menu cursor into the correct location in the array of the target (based on tempPointer1)
   3592  d3b2		       a0 00		      ldy	#0
   3593  d3b4		       e8		      inx
   3594  d3b5				   .LIndexConversionLoop
   3595  d3b5		       b1 b1		      lda	(tempPointer1),y
   3596  d3b7		       c9 00		      cmp	#0
   3597  d3b9		       f0 03		      beq	.LNoHit
   3598  d3bb		       ca		      dex
   3599  d3bc		       f0 03		      beq	.LDone
   3600  d3be				   .LNoHit
   3601  d3be		       c8		      iny
   3602  d3bf		       10 f4		      bpl	.LIndexConversionLoop	;Saves byte over jmp
   3603  d3c1				   .LDone
   3604  d3c1		       60		      rts		;Y is the correct offset into the enemyID array
   3605  d3c2
   3606  d3c2
   3607  d3c2
   3608  d3c2				   LBinaryToDecimal SUBROUTINE		;Will interpret A as the number in binary to convert to decimal.
   3609  d3c2				   .LRemove10s
   3610  d3c2		       38		      sec
   3611  d3c3		       e9 0a		      sbc	#10
   3612  d3c5		       30 04		      bmi	.LDoneRemoving10s
   3613  d3c7		       e8		      inx
   3614  d3c8		       4c c2 f3 	      jmp	.LRemove10s
   3615  d3cb				   .LDoneRemoving10s
   3616  d3cb		       18		      clc
   3617  d3cc		       69 0a		      adc	#10
   3618  d3ce		       85 ab		      sta	temp4
   3619  d3d0		       8a		      txa
   3620  d3d1		       0a		      asl
   3621  d3d2		       0a		      asl
   3622  d3d3		       0a		      asl
   3623  d3d4		       0a		      asl
   3624  d3d5		       05 ab		      ora	temp4
   3625  d3d7		       60		      rts
   3626  d3d8
   3627  d3d8				   LDecimalToBinary SUBROUTINE		;Will interpret A as the number in decimal to convert to binary. Returns the result in A.
   3628  d3d8		       a2 00		      ldx	#0
   3629  d3da		       f8		      sed
   3630  d3db				   .LRemove16s
   3631  d3db		       38		      sec
   3632  d3dc		       e9 16		      sbc	#$16
   3633  d3de		       30 03		      bmi	.LDoneRemoving16s
   3634  d3e0		       e8		      inx
   3635  d3e1		       d0 f8		      bne	.LRemove16s
   3636  d3e3				   .LDoneRemoving16s
   3637  d3e3		       69 16		      adc	#$16
   3638  d3e5		       d8		      cld
   3639  d3e6		       c9 10		      cmp	#$10
   3640  d3e8		       b0 04		      bcs	.LOver10
   3641  d3ea		       85 b3		      sta	tempPointer2
   3642  d3ec		       90 07		      bcc	.LCombine	;Should always be taken
   3643  d3ee				   .LOver10
   3644  d3ee		       29 0f		      and	#$0F
   3645  d3f0		       18		      clc
   3646  d3f1		       69 0a		      adc	#10
   3647  d3f3		       85 b3		      sta	tempPointer2
   3648  d3f5				   .LCombine
   3649  d3f5		       8a		      txa
   3650  d3f6		       0a		      asl
   3651  d3f7		       0a		      asl
   3652  d3f8		       0a		      asl
   3653  d3f9		       0a		      asl
   3654  d3fa		       05 b3		      ora	tempPointer2
   3655  d3fc		       60		      rts
   3656  d3fd
   3657  d3fd				   LGetEnemyResistances SUBROUTINE		;Will interpret Y as the enemy targetID to return the resistances of (in A). Format is LPFIGEP0
   3658  d3fd		       88		      dey
   3659  d3fe		       88		      dey
   3660  d3ff		       88		      dey
   3661  d400		       88		      dey
   3662  d401		       b9 da 00 	      lda	enemyID,y
   3663  d404		       a8		      tay
   3664  d405		       b9 49 fc 	      lda	LEnemyResistances,y
   3665  d408		       60		      rts
   3666  d409
   3667  d409				   LRandom    SUBROUTINE		;Ticks the random number generator when called
   3668  d409		       a5 b7		      lda	rand8
   3669  d40b		       4a		      lsr
   3670  d40c		       90 02		      bcc	.LNoEOR
   3671  d40e		       49 b4		      eor	#$B4
   3672  d410				   .LNoEOR
   3673  d410		       85 b7		      sta	rand8
   3674  d412		       60		      rts
   3675  d413
   3676  d413				   LUpdateMenuAdvancement SUBROUTINE		;Checks if the button is pressed, and advances with the selected options if so.
   3677  d413		       a5 0c		      lda	INPT4
   3678  d415		       10 01		      bpl	.LContinue	;Return if the button is not pressed
   3679  d417				   .LReturn
   3680  d417		       60		      rts
   3681  d418				   .LContinue
   3682  d418		       a5 b9		      lda	currentMenu
   3683  d41a		       f0 fb		      beq	.LReturn
   3684  d41c		       a6 c0		      ldx	currentBattler
   3685  d41e		       c9 80		      cmp	#$80
   3686  d420		       f0 27		      beq	.LBattleOptionsMenu
   3687  d422		       c9 81		      cmp	#$81
   3688  d424		       f0 26		      beq	.LSelectEnemyMenu
   3689  d426		       c9 84		      cmp	#$84
   3690  d428		       f0 1c		      beq	.LSelectSpellMenu
   3691  d42a				   .LSelectAllyMenuUnique
   3692  d42a				   .LSelectAllyMenu
   3693  d42a		       a9 99		      lda	#hp1
   3694  d42c		       85 b1		      sta	tempPointer1
   3695  d42e		       a9 00		      lda	#0
   3696  d430		       85 b2		      sta	tempPointer1+1
   3697  d432		       a6 ba		      ldx	cursorIndexAndMessageY
   3698  d434		       20 b2 f3 	      jsr	LCursorIndexToBattlerIndex	;This doesn't correctly handle unique ally selection
   3699  d437		       98		      tya
   3700  d438		       0a		      asl
   3701  d439		       0a		      asl
   3702  d43a		       0a		      asl
   3703  d43b		       0a		      asl
   3704  d43c		       0a		      asl
   3705  d43d		       a6 c0		      ldx	currentBattler
   3706  d43f		       15 d2		      ora	battleActions,x
   3707  d441		       95 d2		      sta	battleActions,x
   3708  d443		       4c 4c f4 	      jmp	.LCheckNextBattler
   3709  d446				   .LSelectSpellMenu
   3710  d446							;Need to determine what the targeting of this spell is in order to advance to none or correct targeting
   3711  d446
   3712  d446		       4c 4c f4 	      jmp	.LCheckNextBattler
   3713  d449				   .LBattleOptionsMenu
   3714  d449		       4c 4c f4 	      jmp	.LCheckNextBattler
   3715  d44c				   .LSelectEnemyMenu
   3716  d44c							;Determine how many enemies are alive
   3717  d44c				   .LCheckNextBattler
   3718  d44c		       60		      rts
   3719  d44d
   3720  d44d				   LUpdateMenuRendering SUBROUTINE		;Updates the menuLines and highlightedLine according to the current menu state
   3721  d44d		       60		      rts
   3722  d44e
   3723  d44e				   LUpdateMenuCursorPos SUBROUTINE		;Updates the cursor according to joystick presses
   3724  d44e		       a4 ba		      ldy	cursorIndexAndMessageY
   3725  d450		       a9 20		      lda	#DOWN_MASK
   3726  d452		       2c 80 02 	      bit	SWCHA
   3727  d455		       f0 08		      beq	.LDownPressed
   3728  d457		       a9 10		      lda	#UP_MASK
   3729  d459		       2c 80 02 	      bit	SWCHA
   3730  d45c		       f0 0a		      beq	.LUpPressed
   3731  d45e		       60		      rts
   3732  d45f				   .LDownPressed
   3733  d45f		       c4 be		      cpy	menuSize
   3734  d461		       90 01		      bcc	.LNotAtLastPosition
   3735  d463		       60		      rts
   3736  d464				   .LNotAtLastPosition
   3737  d464		       c8		      iny
   3738  d465		       84 ba		      sty	cursorIndexAndMessageY
   3739  d467		       60		      rts
   3740  d468				   .LUpPressed
   3741  d468		       a4 ba		      ldy	cursorIndexAndMessageY
   3742  d46a		       d0 01		      bne	.LNotAtFirstPosition
   3743  d46c		       60		      rts
   3744  d46d				   .LNotAtFirstPosition
   3745  d46d		       88		      dey
   3746  d46e		       84 ba		      sty	cursorIndexAndMessageY
   3747  d470		       60		      rts
   3748  d471
   3749  d471
   3750  d471
   3751  d471				   LUpdateAvatars SUBROUTINE
   3752  d471		       a5 bf		      lda	inBattle
   3753  d473		       10 05		      bpl	.LContinue
   3754  d475		       a5 0c		      lda	INPT4
   3755  d477		       10 01		      bpl	.LContinue
   3756  d479		       60		      rts
   3757  d47a				   .LContinue
   3758  d47a		       a0 03		      ldy	#3
   3759  d47c				   .LUpdateAvatarLoop
   3760  d47c							;Check for status effect
   3761  d47c		       98		      tya
   3762  d47d
   3763  d47d		       b9 de 00 	      lda	battlerStatus,y
   3764  d480		       85 b1		      sta	tempPointer1
   3765  d482		       29 18		      and	#ASLEEP_MASK
   3766  d484		       d0 3f		      bne	.LAsleep
   3767  d486		       a5 b1		      lda	tempPointer1
   3768  d488		       29 01		      and	#BLIGHTED_MASK
   3769  d48a		       d0 3f		      bne	.LBlighted
   3770  d48c
   3771  d48c							;Check for HP
   3772  d48c		       b9 99 00 	      lda	hp1,y
   3773  d48f		       f0 40		      beq	.LDead
   3774  d491		       20 d8 f3 	      jsr	LDecimalToBinary
   3775  d494		       85 b1		      sta	tempPointer1	;Now contains the current HP for this party member in binary
   3776  d496
   3777  d496		       b9 81 00 	      lda	char1,y
   3778  d499		       29 0f		      and	#$0F
   3779  d49b		       aa		      tax
   3780  d49c		       bd 12 fe 	      lda	LClassHPLookup,x
   3781  d49f		       85 b3		      sta	tempPointer2
   3782  d4a1		       a9 fd		      lda	#(LStat1PerLevel >> 8 & $FF)
   3783  d4a3		       85 b4		      sta	tempPointer2+1
   3784  d4a5
   3785  d4a5		       98		      tya
   3786  d4a6		       aa		      tax
   3787  d4a7
   3788  d4a7		       a5 f2		      lda	mazeAndPartyLevel
   3789  d4a9		       29 0f		      and	#$0F
   3790  d4ab		       a8		      tay
   3791  d4ac		       88		      dey
   3792  d4ad		       b1 b3		      lda	(tempPointer2),y	;A now contains the max HP for this party member
   3793  d4af		       4a		      lsr
   3794  d4b0		       c5 b1		      cmp	tempPointer1
   3795  d4b2		       90 09		      bcc	.LAboveHalf
   3796  d4b4		       4a		      lsr
   3797  d4b5		       c5 b1		      cmp	tempPointer1
   3798  d4b7		       90 08		      bcc	.LAboveQuarter
   3799  d4b9		       a9 10		      lda	#$10	;Mood 1
   3800  d4bb		       d0 16		      bne	.LChangeMood
   3801  d4bd				   .LAboveHalf
   3802  d4bd		       a9 30		      lda	#$30	;Mood 3
   3803  d4bf		       d0 12		      bne	.LChangeMood
   3804  d4c1				   .LAboveQuarter
   3805  d4c1		       a9 20		      lda	#$20	;Mood 2
   3806  d4c3		       d0 0e		      bne	.LChangeMood
   3807  d4c5				   .LAsleep
   3808  d4c5		       a9 60		      lda	#$60	;Mood 6
   3809  d4c7		       85 b1		      sta	tempPointer1
   3810  d4c9		       d0 0c		      bne	.LChangeMoodLater
   3811  d4cb				   .LBlighted
   3812  d4cb		       a9 70		      lda	#$70	;Mood 7
   3813  d4cd		       85 b1		      sta	tempPointer1
   3814  d4cf		       d0 06		      bne	.LChangeMoodLater
   3815  d4d1				   .LDead
   3816  d4d1		       a9 00		      lda	#$00	;Mood 0
   3817  d4d3				   .LChangeMood
   3818  d4d3		       85 b1		      sta	tempPointer1
   3819  d4d5
   3820  d4d5		       8a		      txa
   3821  d4d6		       a8		      tay
   3822  d4d7
   3823  d4d7				   .LChangeMoodLater
   3824  d4d7		       b9 81 00 	      lda	char1,y
   3825  d4da		       29 0f		      and	#$0F
   3826  d4dc		       05 b1		      ora	tempPointer1
   3827  d4de		       99 81 00 	      sta	char1,y
   3828  d4e1		       88		      dey
   3829  d4e2		       10 98		      bpl	.LUpdateAvatarLoop
   3830  d4e4		       60		      rts
   3831  d4e5
   3832  d4e5				   LOverrideAvatar SUBROUTINE		;Sets party member Y's mood to X.
   3833  d4e5		       b9 81 00 	      lda	char1,y
   3834  d4e8		       29 0f		      and	#$0F	;Get just the class
   3835  d4ea		       85 af		      sta	temp6
   3836  d4ec		       8a		      txa
   3837  d4ed		       0a		      asl
   3838  d4ee		       0a		      asl
   3839  d4ef		       0a		      asl
   3840  d4f0		       0a		      asl
   3841  d4f1		       05 af		      ora	temp6
   3842  d4f3		       99 81 00 	      sta	char1,y
   3843  d4f6		       60		      rts
   3844  d4f7
   3845  dc40					      ORG	$DC40	;Used to hold enemy stats and related data
   3846  dc40					      RORG	$FC40
   3847  dc40
   3848  dc40				   LEnemyAttack
   3849  dc40		       02		      .byte.b	2	;Zombie
   3850  dc41		       0a		      .byte.b	10	;Giant
   3851  dc42		       23		      .byte.b	35	;Dragon
   3852  dc43				   LEnemySpeed
   3853  dc43		       01		      .byte.b	1	;Zombie
   3854  dc44		       03		      .byte.b	3	;Giant
   3855  dc45		       28		      .byte.b	40	;Dragon
   3856  dc46				   LEnemyMagic
   3857  dc46		       00		      .byte.b	0	;Zombie
   3858  dc47		       00		      .byte.b	0	;Giant
   3859  dc48		       14		      .byte.b	20	;Dragon
   3860  dc49
   3861  dc49							;Format is LPFIHEP0
   3862  dc49							;L : Legendary (bosses), P : Physical, F : Fire, I : Ice, H : Holy, E : Electric, P : Poison
   3863  dc49				   LEnemyResistances
   3864  dc49		       59		      .byte.b	#%01011001	;Zombie
   3865  dc4a		       00		      .byte.b	#%00000000	;Giant
   3866  dc4b		       82		      .byte.b	#%10000010	;Dragon
   3867  dc4c
   3868  dd00					      ORG	$DD00	;Used to hold battle-related data.
   3869  dd00					      RORG	$FD00
   3870  dd00
   3871  dd00				   LClassFightMessages
   3872  dd00		       04		      .byte.b	$4	;Knight
   3873  dd01		       00		      .byte.b	$0	;Rogue
   3874  dd02		       02		      .byte.b	$2	;Cleric
   3875  dd03		       01		      .byte.b	$1	;Wizard
   3876  dd04		       01		      .byte.b	$1	;Ranger
   3877  dd05		       00		      .byte.b	$0	;Paladin
   3878  dd06
   3879  dd06				   LEnemyFightMessages
   3880  dd06		       03		      .byte.b	$3	;Zombie
   3881  dd07		       02		      .byte.b	$2	;Giant
   3882  dd08		       04		      .byte.b	$4	;Dragon
   3883  dd09
   3884  dd09				   LAllZeroes
   3885  dd09		       00		      .byte.b	0
   3886  dd0a		       00		      .byte.b	0
   3887  dd0b		       00		      .byte.b	0
   3888  dd0c		       00		      .byte.b	0
   3889  dd0d		       00		      .byte.b	0
   3890  dd0e		       00		      .byte.b	0
   3891  dd0f		       00		      .byte.b	0
   3892  dd10		       00		      .byte.b	0
   3893  dd11		       00		      .byte.b	0
   3894  dd12				   LStat1PerLevel
   3895  dd12		       04		      .byte.b	4
   3896  dd13		       05		      .byte.b	5
   3897  dd14		       06		      .byte.b	6
   3898  dd15		       07		      .byte.b	7
   3899  dd16		       08		      .byte.b	8
   3900  dd17		       09		      .byte.b	9
   3901  dd18		       0a		      .byte.b	10
   3902  dd19		       0b		      .byte.b	11
   3903  dd1a		       0c		      .byte.b	12
   3904  dd1b				   LStat2PerLevel
   3905  dd1b		       05		      .byte.b	5
   3906  dd1c		       07		      .byte.b	7
   3907  dd1d		       09		      .byte.b	9
   3908  dd1e		       0b		      .byte.b	11
   3909  dd1f		       0d		      .byte.b	13
   3910  dd20		       0f		      .byte.b	15
   3911  dd21		       11		      .byte.b	17
   3912  dd22		       13		      .byte.b	19
   3913  dd23		       15		      .byte.b	21
   3914  dd24				   LStat3PerLevel
   3915  dd24		       06		      .byte.b	6
   3916  dd25		       09		      .byte.b	9
   3917  dd26		       0c		      .byte.b	12
   3918  dd27		       0f		      .byte.b	15
   3919  dd28		       12		      .byte.b	18
   3920  dd29		       15		      .byte.b	21
   3921  dd2a		       18		      .byte.b	24
   3922  dd2b		       1b		      .byte.b	27
   3923  dd2c		       1e		      .byte.b	30
   3924  dd2d				   LStat4PerLevel
   3925  dd2d		       07		      .byte.b	7
   3926  dd2e		       0b		      .byte.b	11
   3927  dd2f		       0f		      .byte.b	15
   3928  dd30		       13		      .byte.b	19
   3929  dd31		       17		      .byte.b	23
   3930  dd32		       1b		      .byte.b	27
   3931  dd33		       1f		      .byte.b	31
   3932  dd34		       23		      .byte.b	35
   3933  dd35		       27		      .byte.b	39
   3934  dd36				   LStat5PerLevel
   3935  dd36		       08		      .byte.b	8
   3936  dd37		       0d		      .byte.b	13
   3937  dd38		       12		      .byte.b	18
   3938  dd39		       17		      .byte.b	23
   3939  dd3a		       1c		      .byte.b	28
   3940  dd3b		       21		      .byte.b	33
   3941  dd3c		       26		      .byte.b	38
   3942  dd3d		       2b		      .byte.b	43
   3943  dd3e		       30		      .byte.b	48
   3944  dd3f				   LHP2PerLevel
   3945  dd3f		       0b		      .byte.b	11
   3946  dd40		       0d		      .byte.b	13
   3947  dd41		       0f		      .byte.b	15
   3948  dd42		       11		      .byte.b	17
   3949  dd43		       13		      .byte.b	19
   3950  dd44		       15		      .byte.b	21
   3951  dd45		       17		      .byte.b	23
   3952  dd46		       19		      .byte.b	25
   3953  dd47		       1b		      .byte.b	27
   3954  dd48				   LHP4PerLevel
   3955  dd48		       0c		      .byte.b	12
   3956  dd49		       10		      .byte.b	16
   3957  dd4a		       14		      .byte.b	20
   3958  dd4b		       18		      .byte.b	24
   3959  dd4c		       1c		      .byte.b	28
   3960  dd4d		       20		      .byte.b	32
   3961  dd4e		       24		      .byte.b	36
   3962  dd4f		       28		      .byte.b	40
   3963  dd50		       2c		      .byte.b	44
   3964  dd51				   LHP6PerLevel
   3965  dd51		       0d		      .byte.b	13
   3966  dd52		       13		      .byte.b	19
   3967  dd53		       19		      .byte.b	25
   3968  dd54		       1f		      .byte.b	31
   3969  dd55		       25		      .byte.b	37
   3970  dd56		       2b		      .byte.b	43
   3971  dd57		       31		      .byte.b	49
   3972  dd58		       37		      .byte.b	55
   3973  dd59		       3d		      .byte.b	61
   3974  dd5a				   LHP8PerLevel
   3975  dd5a		       0e		      .byte.b	14
   3976  dd5b		       16		      .byte.b	22
   3977  dd5c		       1e		      .byte.b	30
   3978  dd5d		       26		      .byte.b	38
   3979  dd5e		       2e		      .byte.b	46
   3980  dd5f		       36		      .byte.b	54
   3981  dd60		       3e		      .byte.b	62
   3982  dd61		       46		      .byte.b	70
   3983  dd62		       4e		      .byte.b	78
   3984  dd63				   LHP10PerLevel
   3985  dd63		       0f		      .byte.b	15
   3986  dd64		       19		      .byte.b	25
   3987  dd65		       23		      .byte.b	35
   3988  dd66		       2d		      .byte.b	45
   3989  dd67		       37		      .byte.b	55
   3990  dd68		       41		      .byte.b	65
   3991  dd69		       4b		      .byte.b	75
   3992  dd6a		       55		      .byte.b	85
   3993  dd6b		       5f		      .byte.b	95
   3994  dd6c				   LMP2PerLevel
   3995  dd6c		       07		      .byte.b	7
   3996  dd6d		       09		      .byte.b	9
   3997  dd6e		       0b		      .byte.b	11
   3998  dd6f		       0d		      .byte.b	13
   3999  dd70		       0f		      .byte.b	15
   4000  dd71		       11		      .byte.b	17
   4001  dd72		       13		      .byte.b	19
   4002  dd73		       15		      .byte.b	21
   4003  dd74		       17		      .byte.b	23
   4004  dd75				   LMP3PerLevel
   4005  dd75		       08		      .byte.b	8
   4006  dd76		       0b		      .byte.b	11
   4007  dd77		       0e		      .byte.b	14
   4008  dd78		       11		      .byte.b	17
   4009  dd79		       14		      .byte.b	20
   4010  dd7a		       17		      .byte.b	23
   4011  dd7b		       1a		      .byte.b	26
   4012  dd7c		       1d		      .byte.b	29
   4013  dd7d		       20		      .byte.b	32
   4014  dd7e				   LMP5PerLevel
   4015  dd7e		       0a		      .byte.b	10
   4016  dd7f		       0f		      .byte.b	15
   4017  dd80		       14		      .byte.b	20
   4018  dd81		       19		      .byte.b	25
   4019  dd82		       1e		      .byte.b	30
   4020  dd83		       23		      .byte.b	35
   4021  dd84		       28		      .byte.b	40
   4022  dd85		       2d		      .byte.b	45
   4023  dd86		       32		      .byte.b	50
   4024  dd87
   4025  de00					      ORG	$DE00	;Used to hold miscellaneous data/lookup tables
   4026  de00					      RORG	$FE00
   4027  de00
   4028  de00				   LClassAttackLookup
   4029  de00		       24		      .byte.b	(LStat3PerLevel & $FF)	;Knight
   4030  de01		       36		      .byte.b	(LStat5PerLevel & $FF)	;Rogue
   4031  de02		       1b		      .byte.b	(LStat2PerLevel & $FF)	;Cleric
   4032  de03		       12		      .byte.b	(LStat1PerLevel & $FF)	;Wizard
   4033  de04		       2d		      .byte.b	(LStat4PerLevel & $FF)	;Ranger
   4034  de05		       24		      .byte.b	(LStat3PerLevel & $FF)	;Paladin
   4035  de06				   LClassMagicLookup
   4036  de06		       09		      .byte.b	(LAllZeroes & $FF)
   4037  de07		       09		      .byte.b	(LAllZeroes & $FF)
   4038  de08		       24		      .byte.b	(LStat3PerLevel & $FF)
   4039  de09		       36		      .byte.b	(LStat5PerLevel & $FF)
   4040  de0a		       1b		      .byte.b	(LStat2PerLevel & $FF)
   4041  de0b		       24		      .byte.b	(LStat3PerLevel & $FF)
   4042  de0c				   LClassSpeedLookup
   4043  de0c		       1b		      .byte.b	(LStat2PerLevel & $FF)
   4044  de0d		       36		      .byte.b	(LStat5PerLevel & $FF)
   4045  de0e		       12		      .byte.b	(LStat1PerLevel & $FF)
   4046  de0f		       24		      .byte.b	(LStat3PerLevel & $FF)
   4047  de10		       2d		      .byte.b	(LStat4PerLevel & $FF)
   4048  de11		       24		      .byte.b	(LStat3PerLevel & $FF)
   4049  de12				   LClassHPLookup
   4050  de12		       63		      .byte.b	(LHP10PerLevel & $FF)
   4051  de13		       48		      .byte.b	(LHP4PerLevel & $FF)
   4052  de14		       5a		      .byte.b	(LHP8PerLevel & $FF)
   4053  de15		       3f		      .byte.b	(LHP2PerLevel & $FF)
   4054  de16		       48		      .byte.b	(LHP4PerLevel & $FF)
   4055  de17		       51		      .byte.b	(LHP6PerLevel & $FF)
   4056  de18				   LClassMPLookup
   4057  de18		       09		      .byte.b	(LAllZeroes & $FF)
   4058  de19		       09		      .byte.b	(LAllZeroes & $FF)
   4059  de1a		       75		      .byte.b	(LMP3PerLevel & $FF)
   4060  de1b		       7e		      .byte.b	(LMP5PerLevel & $FF)
   4061  de1c		       6c		      .byte.b	(LMP2PerLevel & $FF)
   4062  de1d		       75		      .byte.b	(LMP3PerLevel & $FF)
   4063  de1e
   4064  de1e				   LPartyPositionMasks
   4065  de1e		       01		      .byte.b	$01
   4066  de1f		       02		      .byte.b	$02
   4067  de20		       04		      .byte.b	$04
   4068  de21		       08		      .byte.b	$08
   4069  de22
   4070  de22				   LMaxSpellsKnown
   4071  de22		       00		      .byte.b	#0
   4072  de23		       00		      .byte.b	#0
   4073  de24		       08		      .byte.b	#8	;Cleric
   4074  de25		       08		      .byte.b	#8	;Wizard
   4075  de26		       04		      .byte.b	#4	;Ranger
   4076  de27		       04		      .byte.b	#4	;Paladin
   4077  de28
   4078  de28				   LSpellListLookup
   4079  de28		       00		      .byte.b	#0
   4080  de29		       00		      .byte.b	#0
   4081  de2a		       48		      .byte.b	(LClericSpellList & $FF)
   4082  de2b		       3f		      .byte.b	(LWizardSpellList & $FF)
   4083  de2c		       51		      .byte.b	(LRangerSpellList & $FF)
   4084  de2d		       58		      .byte.b	(LPaladinSpellList & $FF)
   4085  de2e
   4086  de2e				   LSpellTargetingLookup		;Contains a 0 if the spell does not have specific targeting, a 1 if it targets enemies, and a 2 if it targets allies
   4087  de2e		       ff		      .byte.b	$FF	;Back
   4088  de2f		       01		      .byte.b	1	;Fire
   4089  de30		       00		      .byte.b	0	;Blizzard
   4090  de31		       02		      .byte.b	2	;Invisible
   4091  de32		       01		      .byte.b	1	;Hold
   4092  de33		       01		      .byte.b	1	;Fira
   4093  de34		       00		      .byte.b	0	;Vanish
   4094  de35		       00		      .byte.b	0	;Holdra
   4095  de36		       00		      .byte.b	0	;Flare
   4096  de37		       02		      .byte.b	2	;Heal
   4097  de38		       01		      .byte.b	1	;Smite
   4098  de39		       02		      .byte.b	2	;Cure
   4099  de3a		       02		      .byte.b	2	;Shield
   4100  de3b		       00		      .byte.b	0	;Restore
   4101  de3c		       01		      .byte.b	1	;Blight
   4102  de3d		       00		      .byte.b	0	;Aegis
   4103  de3e		       00		      .byte.b	0	;Banish
   4104  de3f
   4105  de3f				   LWizardSpellList
   4106  de3f		       10		      .byte.b	#16	;Back
   4107  de40		       00		      .byte.b	#0	;Fire
   4108  de41		       01		      .byte.b	#1	;Blizzard
   4109  de42		       02		      .byte.b	#2	;Invisible
   4110  de43		       03		      .byte.b	#3	;Hold
   4111  de44		       04		      .byte.b	#4	;Fira
   4112  de45		       05		      .byte.b	#5	;Vanish
   4113  de46		       06		      .byte.b	#6	;Holdra
   4114  de47		       07		      .byte.b	#7	;Flare
   4115  de48				   LClericSpellList
   4116  de48		       10		      .byte.b	#16	;Back
   4117  de49		       08		      .byte.b	#8	;Heal
   4118  de4a		       09		      .byte.b	#9	;Smite
   4119  de4b		       0a		      .byte.b	#10	;Cure
   4120  de4c		       0b		      .byte.b	#11	;Shield
   4121  de4d		       0c		      .byte.b	#12	;Restore
   4122  de4e		       0d		      .byte.b	#13	;Blight
   4123  de4f		       0e		      .byte.b	#14	;Aegis
   4124  de50		       0f		      .byte.b	#15	;Banish
   4125  de51				   LRangerSpellList
   4126  de51		       10		      .byte.b	#16	;Back
   4127  de52		       08		      .byte.b	#8	;Heal
   4128  de53		       02		      .byte.b	#2	;Invis
   4129  de54		       0a		      .byte.b	#10	;Cure
   4130  de55		       0b		      .byte.b	#11	;Shield
   4131  de56		       05		      .byte.b	#5	;Vanish
   4132  de57		       0d		      .byte.b	#13	;Blight
   4133  de58				   LPaladinSpellList
   4134  de58		       10		      .byte.b	#16	;Back
   4135  de59		       00		      .byte.b	#0	;Fire
   4136  de5a		       08		      .byte.b	#8	;Heal
   4137  de5b		       09		      .byte.b	#9	;Smite
   4138  de5c		       03		      .byte.b	#3	;Hold
   4139  de5d		       0b		      .byte.b	#11	;Shield
   4140  de5e		       04		      .byte.b	#4	;Fira
   4141  de5f
   4142  dfb0					      ORG	$DFB0
   4143  dfb0					      RORG	$FFB0
   4144  dfb0
   4145  dfb0				   LRunFunctionInSBank
   4146  dfb0		       8d f9 1f 	      sta	$1FF9	;Go to bank 3
   4147  dfb3		       ea		      nop		;4
   4148  dfb4		       ea		      nop
   4149  dfb5		       ea		      nop
   4150  dfb6		       ea		      nop
   4151  dfb7		       ea		      nop
   4152  dfb8		       ea		      nop
   4153  dfb9		       ea		      nop		;10
   4154  dfba		       ea		      nop
   4155  dfbb		       ea		      nop
   4156  dfbc		       ea		      nop
   4157  dfbd		       ea		      nop
   4158  dfbe		       ea		      nop
   4159  dfbf		       ea		      nop
   4160  dfc0		       ea		      nop
   4161  dfc1		       ea		      nop
   4162  dfc2		       ea		      nop
   4163  dfc3		       ea		      nop		;20
   4164  dfc4		       ea		      nop
   4165  dfc5		       ea		      nop
   4166  dfc6		       ea		      nop
   4167  dfc7		       ea		      nop
   4168  dfc8		       ea		      nop
   4169  dfc9		       ea		      nop
   4170  dfca		       ea		      nop
   4171  dfcb		       60		      rts		;28
   4172  dfcc
   4173  dfd0					      ORG	$DFD0
   4174  dfd0					      RORG	$FFD0
   4175  dfd0
   4176  dfd0				   LGoToUpdateEffects
   4177  dfd0		       8d f8 1f 	      sta	$1FF8	;Go to bank 2
   4178  dfd3		       ea		      nop		;
   4179  dfd4		       ea		      nop		; JSR EUpdateEffects
   4180  dfd5		       ea		      nop		;
   4181  dfd6		       ea		      nop		;
   4182  dfd7		       ea		      nop		; sta $1FF7
   4183  dfd8		       ea		      nop		;
   4184  dfd9		       4c 1d f1 	      jmp	LAfterEffectUpdate
   4185  dfdc
   4186  dfe0					      ORG	$DFE0
   4187  dfe0					      RORG	$FFE0
   4188  dfe0
   4189  dfe0				   LGoToMainPicture
   4190  dfe0		       8d f6 1f 	      sta	$1FF6	;Go to bank 1, it is time to render the picture
   4191  dfe3		       ea		      nop
   4192  dfe4		       ea		      nop
   4193  dfe5		       ea		      nop
   4194  dfe6				   LCatchFromMainPicture
   4195  dfe6		       ea		      nop
   4196  dfe7		       ea		      nop
   4197  dfe8		       ea		      nop
   4198  dfe9		       4c 27 f1 	      jmp	LOverscan
   4199  dfec
   4200  dffa					      ORG	$DFFA
   4201  dffa					      RORG	$FFFA
   4202  dffa
   4203  dffa							;NMI, IRQ, and RESET information
   4204  dffa		       00 f0		      .word.w	LReset
   4205  dffc		       00 f0		      .word.w	LReset
   4206  dffe		       00 f0		      .word.w	LReset
   4207  e000
   4208  e000
   4209  e000							;BANK 2 - CONTAINS LOGIC AND DATA USED FOR THE RENDERING OF ENEMIES IN BATTLE
   4210  e000
   4211  e000					      ORG	$E000
   4212  e000					      RORG	$F000
   4213  e000
   4214  e000				   EReset
   4215  e000		       8d f7 1f 	      sta	$1FF7	;Go to bank 1, the correct startup bank
   4216  e003
   4217  e003				   ETestEffect
   4218  e003		       10		      .byte.b	$10
   4219  e004		       20		      .byte.b	$20
   4220  e005		       30		      .byte.b	$30
   4221  e006		       40		      .byte.b	$40
   4222  e007		       50		      .byte.b	$50
   4223  e008		       60		      .byte.b	$60
   4224  e009		       70		      .byte.b	$70
   4225  e00a		       80		      .byte.b	$80
   4226  e00b
   4227  e00b				   EEffectLowLookup
   4228  e00b		       00		      .byte.b	0	;No effect
   4229  e00c		       00		      .byte.b	0	;Party member highlighting
   4230  e00d		       03		      .byte.b	(ETestEffect & $FF)
   4231  e00e
   4232  e00e				   EEffectHighLookup
   4233  e00e		       00		      .byte.b	0	;No effect
   4234  e00f		       00		      .byte.b	0	;Party member highlighting
   4235  e010		       f0		      .byte.b	(ETestEffect >> 8 & $FF)
   4236  e011
   4237  e011				   EEffectLength
   4238  e011		       00		      .byte.b	#0
   4239  e012		       00		      .byte.b	#0
   4240  e013		       08		      .byte.b	#8
   4241  e014				   EEffectFrequency
   4242  e014		       00		      .byte.b	#0
   4243  e015		       20		      .byte.b	#32
   4244  e016		       1e		      .byte.b	#30
   4245  e017
   4246  e017				   ERenderEffects
   4247  e017		       85 02		      sta	WSYNC
   4248  e019		       a9 02		      lda	#BATTLE_BOX_COLOR
   4249  e01b		       85 08		      sta	COLUPF
   4250  e01d		       a9 ff		      lda	#$FF
   4251  e01f		       85 0d		      sta	PF0
   4252  e021		       85 0e		      sta	PF1
   4253  e023		       85 0f		      sta	PF2
   4254  e025
   4255  e025		       20 22 f2 	      jsr	EUpdateEffects
   4256  e028
   4257  e028		       a6 a9		      ldx	temp2
   4258  e02a		       f0 08		      beq	ELine0
   4259  e02c		       c9 01		      cmp	#1
   4260  e02e		       f0 02		      beq	ELine1
   4261  e030				   ELine2
   4262  e030		       85 02		      sta	WSYNC
   4263  e032				   ELine1
   4264  e032		       85 02		      sta	WSYNC
   4265  e034				   ELine0
   4266  e034		       85 02		      sta	WSYNC
   4267  e036		       a9 00		      lda	#0
   4268  e038		       85 0f		      sta	PF2
   4269  e03a		       a9 80		      lda	#$80
   4270  e03c		       85 0e		      sta	PF1
   4271  e03e
   4272  e03e				   ERenderEnemies
   4273  e03e		       a9 00		      lda	#0
   4274  e040		       85 aa		      sta	temp3	;Will be used to hold the index of the next enemy to render
   4275  e042		       a2 4d		      ldx	#77
   4276  e044		       86 a8		      stx	temp1	;Will be used to hold the total height of the battle box, so this number can be tuned.
   4277  e046		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4278  e049
   4279  e049				   EGoToEAfterRenderingEnemies
   4280  e049		       4c 25 f1 	      jmp	EAfterRenderingEnemies
   4281  e04c
   4282  e04c				   EEnemyRenderingLoop
   4283  e04c		       a6 aa		      ldx	temp3	;Get the current index into the enemyID list
   4284  e04e		       e0 04		      cpx	#4
   4285  e050		       f0 f7		      beq	EGoToEAfterRenderingEnemies	;All enemies have been rendered, stop the rendering routine
   4286  e052		       b5 d6		      lda	enemyHP,x
   4287  e054		       c9 00		      cmp	#0
   4288  e056		       d0 14		      bne	ERenderEnemy
   4289  e058							;If the current enemy is dead, delay the requisite amount of scanlines...
   4290  e058		       e8		      inx
   4291  e059		       86 aa		      stx	temp3
   4292  e05b		       a2 13		      ldx	#19
   4293  e05d				   EDrawBlankEnemyLoop
   4294  e05d		       85 02		      sta	WSYNC
   4295  e05f		       ca		      dex
   4296  e060		       d0 fb		      bne	EDrawBlankEnemyLoop
   4297  e062		       a5 a8		      lda	temp1
   4298  e064		       38		      sec
   4299  e065		       e9 13		      sbc	#19
   4300  e067		       85 a8		      sta	temp1
   4301  e069		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4302  e06c				   ERenderEnemy
   4303  e06c		       b5 da		      lda	enemyID,x
   4304  e06e		       29 3f		      and	#$3F
   4305  e070		       aa		      tax
   4306  e071		       bd 00 ff 	      lda	EEnemySizes,x
   4307  e074		       f0 07		      beq	EPrepSmallEnemy
   4308  e076		       c9 01		      cmp	#1
   4309  e078		       f0 2d		      beq	EPrepMediumEnemy
   4310  e07a		       4c e1 f0 	      jmp	EPrepLargeEnemy
   4311  e07d				   EPrepSmallEnemy
   4312  e07d		       bd 03 fe 	      lda	EEnemyGraphicsHighLookup,x
   4313  e080		       85 b2		      sta	tempPointer1+1
   4314  e082		       bd 00 fe 	      lda	EEnemyGraphicsLowLookup,x
   4315  e085		       85 b1		      sta	tempPointer1
   4316  e087		       bd 09 fe 	      lda	EEnemyColorsHighLookup,x
   4317  e08a		       85 ae		      sta	tempPointer5
   4318  e08c		       bd 06 fe 	      lda	EEnemyColorsLowLookup,x
   4319  e08f		       85 ad		      sta	temp5
   4320  e091		       ea		      nop
   4321  e092		       ea		      nop
   4322  e093		       85 02		      sta	WSYNC
   4323  e095		       20 32 f1 	      jsr	EDrawSmallEnemy
   4324  e098
   4325  e098		       a6 aa		      ldx	temp3
   4326  e09a		       e8		      inx
   4327  e09b		       86 aa		      stx	temp3
   4328  e09d		       a5 a8		      lda	temp1
   4329  e09f		       38		      sec
   4330  e0a0		       e9 13		      sbc	#19
   4331  e0a2		       85 a8		      sta	temp1
   4332  e0a4		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4333  e0a7				   EPrepMediumEnemy
   4334  e0a7		       bd 03 fe 	      lda	EEnemyGraphicsHighLookup,x
   4335  e0aa		       85 b2		      sta	tempPointer1+1
   4336  e0ac		       85 b4		      sta	tempPointer2+1
   4337  e0ae		       bd 00 fe 	      lda	EEnemyGraphicsLowLookup,x
   4338  e0b1		       85 b3		      sta	tempPointer2
   4339  e0b3		       18		      clc
   4340  e0b4		       69 10		      adc	#16
   4341  e0b6		       85 b1		      sta	tempPointer1
   4342  e0b8		       bd 09 fe 	      lda	EEnemyColorsHighLookup,x
   4343  e0bb		       85 ae		      sta	tempPointer5
   4344  e0bd		       85 b0		      sta	tempPointer6
   4345  e0bf		       bd 06 fe 	      lda	EEnemyColorsLowLookup,x
   4346  e0c2		       85 af		      sta	temp6
   4347  e0c4		       69 10		      adc	#16
   4348  e0c6		       85 ad		      sta	temp5
   4349  e0c8		       85 02		      sta	WSYNC
   4350  e0ca		       85 02		      sta	WSYNC
   4351  e0cc		       20 60 f1 	      jsr	EDrawMediumEnemy
   4352  e0cf		       85 02		      sta	WSYNC
   4353  e0d1		       a6 aa		      ldx	temp3
   4354  e0d3		       e8		      inx
   4355  e0d4		       e8		      inx
   4356  e0d5		       86 aa		      stx	temp3
   4357  e0d7		       a5 a8		      lda	temp1
   4358  e0d9		       38		      sec
   4359  e0da		       e9 26		      sbc	#38
   4360  e0dc		       85 a8		      sta	temp1
   4361  e0de		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4362  e0e1				   EPrepLargeEnemy
   4363  e0e1		       bd 03 fe 	      lda	EEnemyGraphicsHighLookup,x
   4364  e0e4		       85 b2		      sta	tempPointer1+1
   4365  e0e6		       85 b4		      sta	tempPointer2+1
   4366  e0e8		       85 b6		      sta	tempPointer3+1
   4367  e0ea		       85 ac		      sta	tempPointer4
   4368  e0ec		       bd 00 fe 	      lda	EEnemyGraphicsLowLookup,x
   4369  e0ef		       85 ab		      sta	temp4
   4370  e0f1		       18		      clc
   4371  e0f2		       69 20		      adc	#32
   4372  e0f4		       85 b5		      sta	tempPointer3
   4373  e0f6		       69 20		      adc	#32
   4374  e0f8		       85 b3		      sta	tempPointer2
   4375  e0fa		       69 20		      adc	#32
   4376  e0fc		       85 b1		      sta	tempPointer1
   4377  e0fe		       bd 09 fe 	      lda	EEnemyColorsHighLookup,x
   4378  e101		       85 ae		      sta	tempPointer5
   4379  e103		       85 b0		      sta	tempPointer6
   4380  e105		       bd 06 fe 	      lda	EEnemyColorsLowLookup,x
   4381  e108		       85 af		      sta	temp6
   4382  e10a		       69 20		      adc	#32
   4383  e10c		       85 ad		      sta	temp5
   4384  e10e		       85 02		      sta	WSYNC
   4385  e110		       20 a8 f1 	      jsr	EDrawLargeEnemy
   4386  e113		       a6 aa		      ldx	temp3
   4387  e115		       e8		      inx
   4388  e116		       e8		      inx
   4389  e117		       e8		      inx
   4390  e118		       e8		      inx
   4391  e119		       86 aa		      stx	temp3
   4392  e11b		       a5 a8		      lda	temp1
   4393  e11d		       38		      sec
   4394  e11e		       e9 45		      sbc	#69
   4395  e120		       85 a8		      sta	temp1
   4396  e122		       4c 4c f0 	      jmp	EEnemyRenderingLoop
   4397  e125				   EAfterRenderingEnemies
   4398  e125		       a6 a8		      ldx	temp1
   4399  e127		       e8		      inx
   4400  e128				   EAfterRenderingEnemiesLoop
   4401  e128		       85 02		      sta	WSYNC
   4402  e12a		       ca		      dex
   4403  e12b		       d0 fb		      bne	EAfterRenderingEnemiesLoop
   4404  e12d		       86 09		      stx	COLUBK	;Clear any spellcasting effects that may be present
   4405  e12f		       4c c0 ff 	      jmp	EGoToDrawingBattleText
   4406  e132
   4407  e132				   EDrawSmallEnemy SUBROUTINE		;This subroutine is used for drawing enemies that are 8x8 pixels i size. Graphical information is interpreted from tempPointer1, and color information is interpreted from tempPointer5
   4408  e132		       20 a7 f1 	      jsr	ESpinWheels
   4409  e135		       20 a7 f1 	      jsr	ESpinWheels
   4410  e138		       20 a7 f1 	      jsr	ESpinWheels
   4411  e13b		       ea		      nop
   4412  e13c		       85 10		      sta	RESP0
   4413  e13e		       a0 08		      ldy	#8
   4414  e140		       a9 00		      lda	#0
   4415  e142		       85 04		      sta	NUSIZ0
   4416  e144		       85 05		      sta	NUSIZ1
   4417  e146				   .EDrawSmallEnemyLoop
   4418  e146		       88		      dey
   4419  e147		       85 02		      sta	WSYNC
   4420  e149		       30 0d		      bmi	.EDoneDrawingSmallEnemy
   4421  e14b		       b1 b1		      lda	(tempPointer1),y
   4422  e14d		       85 1b		      sta	GRP0
   4423  e14f		       b1 ad		      lda	(temp5),y
   4424  e151		       85 06		      sta	COLUP0
   4425  e153		       85 02		      sta	WSYNC
   4426  e155		       4c 46 f1 	      jmp	.EDrawSmallEnemyLoop
   4427  e158				   .EDoneDrawingSmallEnemy
   4428  e158		       c8		      iny
   4429  e159		       84 1b		      sty	GRP0
   4430  e15b		       84 06		      sty	COLUP0
   4431  e15d		       84 20		      sty	HMP0
   4432  e15f		       60		      rts
   4433  e160
   4434  e160				   EDrawMediumEnemy SUBROUTINE		;This subroutine is used for drawing enemies that are 16x16 pixels in size. Graphical information is interpreted from tempPointer1 and tempPointer2, color information is interpreted from tempPointer5 and tempPointer6.
   4435  e160		       a9 10		      lda	#$10	;Moves one pixel to the left
   4436  e162		       85 21		      sta	HMP1
   4437  e164		       20 a7 f1 	      jsr	ESpinWheels
   4438  e167		       20 a7 f1 	      jsr	ESpinWheels
   4439  e16a		       ea		      nop
   4440  e16b		       ea		      nop
   4441  e16c		       ea		      nop
   4442  e16d		       ea		      nop
   4443  e16e		       ea		      nop
   4444  e16f		       85 10		      sta	RESP0
   4445  e171		       85 11		      sta	RESP1
   4446  e173		       20 a7 f1 	      jsr	ESpinWheels
   4447  e176		       ea		      nop
   4448  e177		       ea		      nop
   4449  e178		       ea		      nop
   4450  e179		       ea		      nop
   4451  e17a							;sta WSYNC
   4452  e17a		       85 2a		      sta	HMOVE	;Need to make this happen on cycle 73 exactly...
   4453  e17c		       a0 10		      ldy	#16	;Height of the enemy
   4454  e17e		       a9 00		      lda	#0	;No duplication
   4455  e180		       85 04		      sta	NUSIZ0
   4456  e182		       85 05		      sta	NUSIZ1
   4457  e184				   .EDrawMediumEnemyLoop
   4458  e184		       88		      dey
   4459  e185		       85 02		      sta	WSYNC
   4460  e187		       30 15		      bmi	.EDoneDrawingMediumEnemy
   4461  e189		       b1 b1		      lda	(tempPointer1),y
   4462  e18b		       85 1b		      sta	GRP0
   4463  e18d		       b1 b3		      lda	(tempPointer2),y
   4464  e18f		       85 1c		      sta	GRP1
   4465  e191		       b1 ad		      lda	(temp5),y
   4466  e193		       85 06		      sta	COLUP0
   4467  e195		       b1 af		      lda	(temp6),y
   4468  e197		       85 07		      sta	COLUP1
   4469  e199		       85 02		      sta	WSYNC
   4470  e19b		       4c 84 f1 	      jmp	.EDrawMediumEnemyLoop
   4471  e19e				   .EDoneDrawingMediumEnemy
   4472  e19e		       c8		      iny
   4473  e19f		       84 1b		      sty	GRP0
   4474  e1a1		       84 1c		      sty	GRP1
   4475  e1a3		       84 06		      sty	COLUP0
   4476  e1a5		       84 07		      sty	COLUP1
   4477  e1a7				   ESpinWheels
   4478  e1a7		       60		      rts
   4479  e1a8
   4480  e1a8				   EDrawLargeEnemy SUBROUTINE		; This subroutine is used for drawing enemies that are 32x32 in size. Graphical information is pulled from tempPointers1-4, color information for columns 0 and 2 is pulled from tempPointer5, and color information for columns 1 and 3 is pulled from tempPointer6.
   4481  e1a8		       a9 10		      lda	#$10	;Moves one pixel to the left
   4482  e1aa		       85 21		      sta	HMP1
   4483  e1ac		       20 a7 f1 	      jsr	ESpinWheels
   4484  e1af		       20 a7 f1 	      jsr	ESpinWheels
   4485  e1b2		       ea		      nop
   4486  e1b3		       ea		      nop
   4487  e1b4		       c5 a8		      cmp	temp1
   4488  e1b6		       85 10		      sta	RESP0
   4489  e1b8		       85 11		      sta	RESP1
   4490  e1ba		       85 02		      sta	WSYNC
   4491  e1bc		       20 a7 f1 	      jsr	ESpinWheels
   4492  e1bf		       20 a7 f1 	      jsr	ESpinWheels
   4493  e1c2		       20 a7 f1 	      jsr	ESpinWheels
   4494  e1c5		       20 a7 f1 	      jsr	ESpinWheels
   4495  e1c8		       20 a7 f1 	      jsr	ESpinWheels
   4496  e1cb		       e4 a8		      cpx	temp1
   4497  e1cd		       e4 a8		      cpx	temp1
   4498  e1cf		       e4 a8		      cpx	temp1
   4499  e1d1							;sta WSYNC
   4500  e1d1		       85 2a		      sta	HMOVE	;need to lose 5
   4501  e1d3		       a0 20		      ldy	#32
   4502  e1d5		       a9 01		      lda	#1	;Two copies close
   4503  e1d7		       85 04		      sta	NUSIZ0
   4504  e1d9		       85 05		      sta	NUSIZ1
   4505  e1db				   .EDrawLargeEnemyLoop
   4506  e1db		       88		      dey
   4507  e1dc		       85 02		      sta	WSYNC
   4508  e1de		       30 38		      bmi	.EDoneDrawingLargeEnemy
   4509  e1e0		       b1 b1		      lda	(tempPointer1),y
   4510  e1e2		       85 1b		      sta	GRP0
   4511  e1e4		       b1 b3		      lda	(tempPointer2),y
   4512  e1e6		       85 1c		      sta	GRP1
   4513  e1e8		       b1 ad		      lda	(temp5),y
   4514  e1ea		       85 06		      sta	COLUP0
   4515  e1ec		       b1 af		      lda	(temp6),y
   4516  e1ee		       85 07		      sta	COLUP1
   4517  e1f0		       b1 b5		      lda	(tempPointer3),y
   4518  e1f2		       aa		      tax
   4519  e1f3		       b1 ab		      lda	(temp4),y
   4520  e1f5		       86 1b		      stx	GRP0
   4521  e1f7		       85 1c		      sta	GRP1
   4522  e1f9		       85 02		      sta	WSYNC
   4523  e1fb		       ea		      nop
   4524  e1fc		       b1 b1		      lda	(tempPointer1),y
   4525  e1fe		       85 1b		      sta	GRP0
   4526  e200		       b1 b3		      lda	(tempPointer2),y
   4527  e202		       85 1c		      sta	GRP1
   4528  e204		       b1 ad		      lda	(temp5),y
   4529  e206		       85 06		      sta	COLUP0
   4530  e208		       b1 af		      lda	(temp6),y
   4531  e20a		       85 07		      sta	COLUP1
   4532  e20c		       b1 b5		      lda	(tempPointer3),y
   4533  e20e		       aa		      tax
   4534  e20f		       b1 ab		      lda	(temp4),y
   4535  e211		       86 1b		      stx	GRP0
   4536  e213		       85 1c		      sta	GRP1
   4537  e215		       4c db f1 	      jmp	.EDrawLargeEnemyLoop
   4538  e218				   .EDoneDrawingLargeEnemy
   4539  e218		       c8		      iny
   4540  e219		       84 1b		      sty	GRP0
   4541  e21b		       84 1c		      sty	GRP1
   4542  e21d		       84 06		      sty	COLUP0
   4543  e21f		       84 07		      sty	COLUP1
   4544  e221		       60		      rts
   4545  e222
   4546  e222				   EUpdateEffects SUBROUTINE
   4547  e222		       a9 02		      lda	#2
   4548  e224		       85 a9		      sta	temp2
   4549  e226		       a5 ef		      lda	currentEffect
   4550  e228		       d0 01		      bne	.EContinue
   4551  e22a		       60		      rts
   4552  e22b				   .EContinue
   4553  e22b		       a6 f1		      ldx	effectCountdown
   4554  e22d		       ca		      dex
   4555  e22e		       86 f1		      stx	effectCountdown
   4556  e230		       d0 0d		      bne	.ESkipEffectCounterDecrement
   4557  e232		       aa		      tax
   4558  e233		       bd 14 f0 	      lda	EEffectFrequency,x
   4559  e236		       85 f1		      sta	effectCountdown
   4560  e238		       a4 f0		      ldy	effectCounter
   4561  e23a		       f0 1e		      beq	.EEndEffect
   4562  e23c		       88		      dey
   4563  e23d		       84 f0		      sty	effectCounter
   4564  e23f				   .ESkipEffectCounterDecrement
   4565  e23f		       a6 ef		      ldx	currentEffect
   4566  e241		       e0 01		      cpx	#$1	;party member highlighting, which is the only effect handled outside this bank
   4567  e243		       f0 22		      beq	.EHighlightEffect
   4568  e245				   .ENormalEffect
   4569  e245		       bd 0b f0 	      lda	EEffectLowLookup,x
   4570  e248		       85 b1		      sta	tempPointer1
   4571  e24a		       bd 0e f0 	      lda	EEffectHighLookup,x
   4572  e24d		       85 b2		      sta	tempPointer1+1
   4573  e24f		       a4 f0		      ldy	effectCounter
   4574  e251		       b1 b1		      lda	(tempPointer1),y	;Get the current background color for this effect and effectCounter
   4575  e253		       85 09		      sta	COLUBK
   4576  e255		       a9 01		      lda	#1
   4577  e257		       85 a9		      sta	temp2	;Don't use an extra WSYNC if called during enemy rendering
   4578  e259		       60		      rts
   4579  e25a				   .EEndEffect
   4580  e25a		       84 ef		      sty	currentEffect
   4581  e25c		       84 f0		      sty	effectCounter
   4582  e25e		       84 f1		      sty	effectCountdown
   4583  e260		       84 09		      sty	COLUBK
   4584  e262		       a9 01		      lda	#1
   4585  e264		       85 a9		      sta	temp2
   4586  e266		       60		      rts
   4587  e267				   .EHighlightEffect
   4588  e267		       a9 01		      lda	#1
   4589  e269		       85 f0		      sta	effectCounter
   4590  e26b		       85 a9		      sta	temp2
   4591  e26d		       60		      rts
   4592  e26e
   4593  ec00					      ORG	$EC00
   4594  ec00					      RORG	$FC00
   4595  ec00
   4596  ec00				   SmallTestEnemyGraphics
   4597  ec00		       7e		      .byte.b	%01111110
   4598  ec01		       db		      .byte.b	%11011011
   4599  ec02		       a5		      .byte.b	%10100101
   4600  ec03		       81		      .byte.b	%10000001
   4601  ec04		       a5		      .byte.b	%10100101
   4602  ec05		       81		      .byte.b	%10000001
   4603  ec06		       c3		      .byte.b	%11000011
   4604  ec07		       7e		      .byte.b	%01111110
   4605  ec08				   MediumTestEnemyGraphics
   4606  ec08		       18		      .byte.b	%00011000
   4607  ec09		       18		      .byte.b	%00011000
   4608  ec0a		       18		      .byte.b	%00011000
   4609  ec0b		       18		      .byte.b	%00011000
   4610  ec0c		       18		      .byte.b	%00011000
   4611  ec0d		       18		      .byte.b	%00011000
   4612  ec0e		       7e		      .byte.b	%01111110
   4613  ec0f		       00		      .byte.b	%00000000
   4614  ec10		       00		      .byte.b	%00000000
   4615  ec11		       7e		      .byte.b	%01111110
   4616  ec12		       40		      .byte.b	%01000000
   4617  ec13		       40		      .byte.b	%01000000
   4618  ec14		       78		      .byte.b	%01111000
   4619  ec15		       40		      .byte.b	%01000000
   4620  ec16		       40		      .byte.b	%01000000
   4621  ec17		       7e		      .byte.b	%01111110
   4622  ec18		       78		      .byte.b	%01111000
   4623  ec19		       04		      .byte.b	%00000100
   4624  ec1a		       04		      .byte.b	%00000100
   4625  ec1b		       38		      .byte.b	%00111000
   4626  ec1c		       40		      .byte.b	%01000000
   4627  ec1d		       40		      .byte.b	%01000000
   4628  ec1e		       3c		      .byte.b	%00111100
   4629  ec1f		       00		      .byte.b	%00000000
   4630  ec20		       00		      .byte.b	%00000000
   4631  ec21		       18		      .byte.b	%00011000
   4632  ec22		       18		      .byte.b	%00011000
   4633  ec23		       18		      .byte.b	%00011000
   4634  ec24		       18		      .byte.b	%00011000
   4635  ec25		       18		      .byte.b	%00011000
   4636  ec26		       18		      .byte.b	%00011000
   4637  ec27		       7e		      .byte.b	%01111110
   4638  ec28
   4639  ec28				   SmallTestEnemyColors
   4640  ec28		       9e		      .byte.b	$9e
   4641  ec29		       9c		      .byte.b	$9c
   4642  ec2a		       9a		      .byte.b	$9a
   4643  ec2b		       98		      .byte.b	$98
   4644  ec2c		       96		      .byte.b	$96
   4645  ec2d		       94		      .byte.b	$94
   4646  ec2e		       82		      .byte.b	$82
   4647  ec2f		       80		      .byte.b	$80
   4648  ec30				   MediumTestEnemyColors
   4649  ec30		       6c		      .byte.b	$6c
   4650  ec31		       6a		      .byte.b	$6a
   4651  ec32		       68		      .byte.b	$68
   4652  ec33		       66		      .byte.b	$66
   4653  ec34		       64		      .byte.b	$64
   4654  ec35		       62		      .byte.b	$62
   4655  ec36		       60		      .byte.b	$60
   4656  ec37		       00		      .byte.b	$0
   4657  ec38		       ce		      .byte.b	$ce
   4658  ec39		       cc		      .byte.b	$cc
   4659  ec3a		       ca		      .byte.b	$ca
   4660  ec3b		       c8		      .byte.b	$c8
   4661  ec3c		       c6		      .byte.b	$c6
   4662  ec3d		       c4		      .byte.b	$c4
   4663  ec3e		       c2		      .byte.b	$c2
   4664  ec3f		       c0		      .byte.b	$c0
   4665  ec40		       4e		      .byte.b	$4e
   4666  ec41		       4c		      .byte.b	$4c
   4667  ec42		       48		      .byte.b	$48
   4668  ec43		       46		      .byte.b	$46
   4669  ec44		       44		      .byte.b	$44
   4670  ec45		       42		      .byte.b	$42
   4671  ec46		       40		      .byte.b	$40
   4672  ec47		       00		      .byte.b	$0
   4673  ec48		       9e		      .byte.b	$9e
   4674  ec49		       9c		      .byte.b	$9c
   4675  ec4a		       8a		      .byte.b	$8a
   4676  ec4b		       8a		      .byte.b	$8a
   4677  ec4c		       88		      .byte.b	$88
   4678  ec4d		       86		      .byte.b	$86
   4679  ec4e		       82		      .byte.b	$82
   4680  ec4f		       80		      .byte.b	$80
   4681  ec50
   4682  ed00					      ORG	$ED00
   4683  ed00					      RORG	$FD00
   4684  ed00
   4685  ed00				   LargeTestEnemyGraphics
   4686  ed00		       80		      .byte.b	%10000000
   4687  ed01		       80		      .byte.b	%10000000
   4688  ed02		       80		      .byte.b	%10000000
   4689  ed03		       80		      .byte.b	%10000000
   4690  ed04		       80		      .byte.b	%10000000
   4691  ed05		       80		      .byte.b	%10000000
   4692  ed06		       80		      .byte.b	%10000000
   4693  ed07		       80		      .byte.b	%10000000
   4694  ed08		       80		      .byte.b	%10000000
   4695  ed09		       80		      .byte.b	%10000000
   4696  ed0a		       80		      .byte.b	%10000000
   4697  ed0b		       80		      .byte.b	%10000000
   4698  ed0c		       80		      .byte.b	%10000000
   4699  ed0d		       80		      .byte.b	%10000000
   4700  ed0e		       80		      .byte.b	%10000000
   4701  ed0f		       fe		      .byte.b	%11111110
   4702  ed10		       00		      .byte.b	%00000000
   4703  ed11		       00		      .byte.b	%00000000
   4704  ed12		       00		      .byte.b	%00000000
   4705  ed13		       00		      .byte.b	%00000000
   4706  ed14		       fc		      .byte.b	%11111100
   4707  ed15		       00		      .byte.b	%00000000
   4708  ed16		       00		      .byte.b	%00000000
   4709  ed17		       00		      .byte.b	%00000000
   4710  ed18		       00		      .byte.b	%00000000
   4711  ed19		       00		      .byte.b	%00000000
   4712  ed1a		       00		      .byte.b	%00000000
   4713  ed1b		       00		      .byte.b	%00000000
   4714  ed1c		       00		      .byte.b	%00000000
   4715  ed1d		       00		      .byte.b	%00000000
   4716  ed1e		       00		      .byte.b	%00000000
   4717  ed1f		       fc		      .byte.b	%11111100
   4718  ed20		       01		      .byte.b	%00000001
   4719  ed21		       01		      .byte.b	%00000001
   4720  ed22		       01		      .byte.b	%00000001
   4721  ed23		       01		      .byte.b	%00000001
   4722  ed24		       01		      .byte.b	%00000001
   4723  ed25		       01		      .byte.b	%00000001
   4724  ed26		       01		      .byte.b	%00000001
   4725  ed27		       01		      .byte.b	%00000001
   4726  ed28		       01		      .byte.b	%00000001
   4727  ed29		       01		      .byte.b	%00000001
   4728  ed2a		       01		      .byte.b	%00000001
   4729  ed2b		       01		      .byte.b	%00000001
   4730  ed2c		       01		      .byte.b	%00000001
   4731  ed2d		       01		      .byte.b	%00000001
   4732  ed2e		       01		      .byte.b	%00000001
   4733  ed2f		       7f		      .byte.b	%01111111
   4734  ed30		       00		      .byte.b	%00000000
   4735  ed31		       00		      .byte.b	%00000000
   4736  ed32		       00		      .byte.b	%00000000
   4737  ed33		       00		      .byte.b	%00000000
   4738  ed34		       3f		      .byte.b	%00111111
   4739  ed35		       20		      .byte.b	%00100000
   4740  ed36		       20		      .byte.b	%00100000
   4741  ed37		       20		      .byte.b	%00100000
   4742  ed38		       20		      .byte.b	%00100000
   4743  ed39		       20		      .byte.b	%00100000
   4744  ed3a		       3f		      .byte.b	%00111111
   4745  ed3b		       20		      .byte.b	%00100000
   4746  ed3c		       20		      .byte.b	%00100000
   4747  ed3d		       20		      .byte.b	%00100000
   4748  ed3e		       20		      .byte.b	%00100000
   4749  ed3f		       3f		      .byte.b	%00111111
   4750  ed40		       e0		      .byte.b	%11100000
   4751  ed41		       30		      .byte.b	%00110000
   4752  ed42		       18		      .byte.b	%00011000
   4753  ed43		       08		      .byte.b	%00001000
   4754  ed44		       08		      .byte.b	%00001000
   4755  ed45		       08		      .byte.b	%00001000
   4756  ed46		       38		      .byte.b	%00111000
   4757  ed47		       f0		      .byte.b	%11110000
   4758  ed48		       00		      .byte.b	%00000000
   4759  ed49		       00		      .byte.b	%00000000
   4760  ed4a		       00		      .byte.b	%00000000
   4761  ed4b		       00		      .byte.b	%00000000
   4762  ed4c		       00		      .byte.b	%00000000
   4763  ed4d		       00		      .byte.b	%00000000
   4764  ed4e		       18		      .byte.b	%00011000
   4765  ed4f		       f0		      .byte.b	%11110000
   4766  ed50		       00		      .byte.b	%00000000
   4767  ed51		       00		      .byte.b	%00000000
   4768  ed52		       00		      .byte.b	%00000000
   4769  ed53		       00		      .byte.b	%00000000
   4770  ed54		       80		      .byte.b	%10000000
   4771  ed55		       80		      .byte.b	%10000000
   4772  ed56		       80		      .byte.b	%10000000
   4773  ed57		       80		      .byte.b	%10000000
   4774  ed58		       80		      .byte.b	%10000000
   4775  ed59		       80		      .byte.b	%10000000
   4776  ed5a		       80		      .byte.b	%10000000
   4777  ed5b		       80		      .byte.b	%10000000
   4778  ed5c		       80		      .byte.b	%10000000
   4779  ed5d		       80		      .byte.b	%10000000
   4780  ed5e		       80		      .byte.b	%10000000
   4781  ed5f		       fe		      .byte.b	%11111110
   4782  ed60		       1f		      .byte.b	%00011111
   4783  ed61		       30		      .byte.b	%00110000
   4784  ed62		       00		      .byte.b	%00000000
   4785  ed63		       00		      .byte.b	%00000000
   4786  ed64		       00		      .byte.b	%00000000
   4787  ed65		       00		      .byte.b	%00000000
   4788  ed66		       00		      .byte.b	%00000000
   4789  ed67		       0f		      .byte.b	%00001111
   4790  ed68		       18		      .byte.b	%00011000
   4791  ed69		       30		      .byte.b	%00110000
   4792  ed6a		       20		      .byte.b	%00100000
   4793  ed6b		       20		      .byte.b	%00100000
   4794  ed6c		       20		      .byte.b	%00100000
   4795  ed6d		       30		      .byte.b	%00110000
   4796  ed6e		       18		      .byte.b	%00011000
   4797  ed6f		       07		      .byte.b	%00000111
   4798  ed70		       00		      .byte.b	%00000000
   4799  ed71		       00		      .byte.b	%00000000
   4800  ed72		       00		      .byte.b	%00000000
   4801  ed73		       00		      .byte.b	%00000000
   4802  ed74		       01		      .byte.b	%00000001
   4803  ed75		       01		      .byte.b	%00000001
   4804  ed76		       01		      .byte.b	%00000001
   4805  ed77		       01		      .byte.b	%00000001
   4806  ed78		       01		      .byte.b	%00000001
   4807  ed79		       01		      .byte.b	%00000001
   4808  ed7a		       01		      .byte.b	%00000001
   4809  ed7b		       01		      .byte.b	%00000001
   4810  ed7c		       01		      .byte.b	%00000001
   4811  ed7d		       01		      .byte.b	%00000001
   4812  ed7e		       01		      .byte.b	%00000001
   4813  ed7f		       7f		      .byte.b	%01111111
   4814  ed80
   4815  ed80				   LargeTestEnemyColors
   4816  ed80		       c8		      .byte.b	$c8
   4817  ed81		       c8		      .byte.b	$c8
   4818  ed82		       c8		      .byte.b	$c8
   4819  ed83		       c8		      .byte.b	$c8
   4820  ed84		       c8		      .byte.b	$c8
   4821  ed85		       c8		      .byte.b	$c8
   4822  ed86		       c8		      .byte.b	$c8
   4823  ed87		       c8		      .byte.b	$c8
   4824  ed88		       c8		      .byte.b	$c8
   4825  ed89		       c8		      .byte.b	$c8
   4826  ed8a		       c8		      .byte.b	$c8
   4827  ed8b		       c8		      .byte.b	$c8
   4828  ed8c		       c8		      .byte.b	$c8
   4829  ed8d		       c8		      .byte.b	$c8
   4830  ed8e		       c8		      .byte.b	$c8
   4831  ed8f		       c8		      .byte.b	$c8
   4832  ed90		       c8		      .byte.b	$c8
   4833  ed91		       00		      .byte.b	$0
   4834  ed92		       00		      .byte.b	$0
   4835  ed93		       00		      .byte.b	$0
   4836  ed94		       9c		      .byte.b	$9c
   4837  ed95		       9c		      .byte.b	$9c
   4838  ed96		       9c		      .byte.b	$9c
   4839  ed97		       9c		      .byte.b	$9c
   4840  ed98		       9c		      .byte.b	$9c
   4841  ed99		       9c		      .byte.b	$9c
   4842  ed9a		       9c		      .byte.b	$9c
   4843  ed9b		       9c		      .byte.b	$9c
   4844  ed9c		       9c		      .byte.b	$9c
   4845  ed9d		       9c		      .byte.b	$9c
   4846  ed9e		       9c		      .byte.b	$9c
   4847  ed9f		       9c		      .byte.b	$9c
   4848  eda0		       c0		      .byte.b	$c0
   4849  eda1		       c0		      .byte.b	$c0
   4850  eda2		       c0		      .byte.b	$c0
   4851  eda3		       c0		      .byte.b	$c0
   4852  eda4		       c0		      .byte.b	$c0
   4853  eda5		       c0		      .byte.b	$c0
   4854  eda6		       c0		      .byte.b	$c0
   4855  eda7		       c0		      .byte.b	$c0
   4856  eda8		       c0		      .byte.b	$c0
   4857  eda9		       c0		      .byte.b	$c0
   4858  edaa		       c0		      .byte.b	$c0
   4859  edab		       c0		      .byte.b	$c0
   4860  edac		       c0		      .byte.b	$c0
   4861  edad		       c0		      .byte.b	$c0
   4862  edae		       c0		      .byte.b	$c0
   4863  edaf		       c0		      .byte.b	$c0
   4864  edb0		       00		      .byte.b	$0
   4865  edb1		       00		      .byte.b	$0
   4866  edb2		       00		      .byte.b	$0
   4867  edb3		       00		      .byte.b	$0
   4868  edb4		       90		      .byte.b	$90
   4869  edb5		       90		      .byte.b	$90
   4870  edb6		       90		      .byte.b	$90
   4871  edb7		       90		      .byte.b	$90
   4872  edb8		       90		      .byte.b	$90
   4873  edb9		       90		      .byte.b	$90
   4874  edba		       90		      .byte.b	$90
   4875  edbb		       90		      .byte.b	$90
   4876  edbc		       90		      .byte.b	$90
   4877  edbd		       90		      .byte.b	$90
   4878  edbe		       90		      .byte.b	$90
   4879  edbf		       90		      .byte.b	$90
   4880  edc0
   4881  ee00					      ORG	$EE00
   4882  ee00					      RORG	$FE00
   4883  ee00
   4884  ee00				   EEnemyGraphicsLowLookup		;Stores the low bytes of the pointers to enemy graphics ordered by enemyID
   4885  ee00		       00		      .byte.b	(SmallTestEnemyGraphics & $FF)
   4886  ee01		       08		      .byte.b	(MediumTestEnemyGraphics & $FF)
   4887  ee02		       00		      .byte.b	(LargeTestEnemyGraphics & $FF)
   4888  ee03				   EEnemyGraphicsHighLookup		;Stores the high bytes of the pointers to enemy graphics ordered by enemyID
   4889  ee03		       fc		      .byte.b	(SmallTestEnemyGraphics >> 8 & $FF)
   4890  ee04		       fc		      .byte.b	(MediumTestEnemyGraphics >> 8 & $FF)
   4891  ee05		       fd		      .byte.b	(LargeTestEnemyGraphics >> 8 & $FF)
   4892  ee06				   EEnemyColorsLowLookup		;Stores the low bytes of the pointers to enemy color information ordered by enemyID
   4893  ee06		       28		      .byte.b	(SmallTestEnemyColors & $FF)
   4894  ee07		       30		      .byte.b	(MediumTestEnemyColors & $FF)
   4895  ee08		       80		      .byte.b	(LargeTestEnemyColors & $FF)
   4896  ee09				   EEnemyColorsHighLookup		;Stores the high bytes of the pointers to enemy color information ordered by enemyID
   4897  ee09		       fc		      .byte.b	(SmallTestEnemyColors >> 8 & $FF)
   4898  ee0a		       fc		      .byte.b	(MediumTestEnemyColors >> 8 & $FF)
   4899  ee0b		       fd		      .byte.b	(LargeTestEnemyColors >> 8 & $FF)
   4900  ee0c
   4901  ef00					      ORG	$EF00
   4902  ef00					      RORG	$FF00
   4903  ef00
   4904  ef00				   EEnemySizes		;Stores the size of each enemy by enemyID. 0 if the enemy is 16x16, 1 if the enemy is 32x32
   4905  ef00		       00		      .byte.b	0
   4906  ef01		       01		      .byte.b	1
   4907  ef02		       02		      .byte.b	2
   4908  ef03
   4909  ef03
   4910  efc0					      ORG	$EFC0
   4911  efc0					      RORG	$FFC0
   4912  efc0
   4913  efc0				   EGoToDrawingBattleText
   4914  efc0		       8d f6 1f 	      sta	$1FF6	;Go to bank 0
   4915  efc3		       ea		      nop
   4916  efc4		       ea		      nop
   4917  efc5		       ea		      nop
   4918  efc6				   ECatchFromDrawingBox
   4919  efc6		       ea		      nop
   4920  efc7		       ea		      nop
   4921  efc8		       ea		      nop
   4922  efc9		       4c 17 f0 	      jmp	ERenderEffects
   4923  efcc
   4924  efd0					      ORG	$EFD0
   4925  efd0					      RORG	$FFD0
   4926  efd0
   4927  efd0				   ECatchFromMazeLogic
   4928  efd0		       ea		      nop
   4929  efd1		       ea		      nop
   4930  efd2		       ea		      nop
   4931  efd3		       20 22 f2 	      jsr	EUpdateEffects
   4932  efd6		       8d f7 1f 	      sta	$1FF7	;Go to bank 1
   4933  efd9		       ea		      nop
   4934  efda		       ea		      nop
   4935  efdb		       ea		      nop
   4936  efdc
   4937  effa					      ORG	$EFFA
   4938  effa					      RORG	$FFFA
   4939  effa
   4940  effa							;NMI, IRQ, and RESET information
   4941  effa		       00 f0		      .word.w	EReset
   4942  effc		       00 f0		      .word.w	EReset
   4943  effe		       00 f0		      .word.w	EReset
   4944  f000
   4945  f000
   4946  f000							;BANK 3 - CONTAINS SOUND EFFECT ROUTINES AND DATA
   4947  f000
   4948  f000					      ORG	$F000
   4949  f000					      RORG	$F000
   4950  f000
   4951  f000				   SReset
   4952  f000		       8d f7 1f 	      sta	$1FF7	;Go to bank 1, the correct startup bank
   4953  f003
   4954  f003				   SUpdateSound
   4955  f003		       60		      rts
   4956  f004
   4957  f004				   SGenerateMazeData SUBROUTINE		;Will use the iterative algorithm I designed in order to generate a maze of size specified by #MAZE_WIDTH.
   4958  f004							;Make sure to clear maze data before use.
   4959  f004							;temp1 will act as X, temp2 as Y, temp3 as direction, temp4 as squaresRemaining, temp5 as the squaresRemaining generator
   4960  f004		       a9 10		      lda	#$10
   4961  f006		       85 ad		      sta	temp5
   4962  f008		       4a		      lsr
   4963  f009		       85 ab		      sta	temp4
   4964  f00b				   .SMazeGenerationLoop
   4965  f00b		       a9 01		      lda	#1
   4966  f00d		       85 ac		      sta	tempPointer4	;inlineExit
   4967  f00f		       85 ae		      sta	tempPointer5	;adjacentExit
   4968  f011
   4969  f011		       a6 a8		      ldx	temp1
   4970  f013		       a4 a9		      ldy	temp2
   4971  f015
   4972  f015		       a5 ab		      lda	temp4
   4973  f017		       c9 01		      cmp	#1
   4974  f019		       d0 1a		      bne	.SNotCorner
   4975  f01b		       a5 aa		      lda	temp3
   4976  f01d		       f0 10		      beq	.SEastCorner
   4977  f01f		       c9 02		      cmp	#2
   4978  f021		       f0 0b		      beq	.SWestCorner
   4979  f023		       c9 03		      cmp	#3
   4980  f025		       f0 01		      beq	.SNorthCorner
   4981  f027				   .SSouthCorner
   4982  f027		       ca		      dex
   4983  f028				   .SNorthCorner
   4984  f028		       20 e6 f0 	      jsr	SRemoveVEdge
   4985  f02b		       4c af f0 	      jmp	.SPrepareForNextIteration
   4986  f02e				   .SWestCorner
   4987  f02e		       88		      dey
   4988  f02f				   .SEastCorner
   4989  f02f		       20 ea f0 	      jsr	SRemoveHEdge
   4990  f032		       4c af f0 	      jmp	.SPrepareForNextIteration
   4991  f035
   4992  f035				   .SNotCorner
   4993  f035		       20 f9 f2 	      jsr	SRandom	;The new random number is in A after returning
   4994  f038		       29 01		      and	#$01
   4995  f03a		       d0 02		      bne	.SSkipInlineExit
   4996  f03c		       85 ac		      sta	tempPointer4	;A is 0
   4997  f03e				   .SSkipInlineExit
   4998  f03e		       20 f9 f2 	      jsr	SRandom
   4999  f041		       29 01		      and	#$01
   5000  f043		       d0 02		      bne	.SSkipAdjacentExit
   5001  f045		       85 ae		      sta	tempPointer5	;A is 0
   5002  f047				   .SSkipAdjacentExit
   5003  f047		       25 ac		      and	tempPointer4
   5004  f049		       f0 0f		      beq	.SAtLeast1Exit
   5005  f04b		       20 f9 f2 	      jsr	SRandom
   5006  f04e		       29 01		      and	#$01
   5007  f050		       f0 06		      beq	.SSaveInline
   5008  f052				   .SSaveAdjacent
   5009  f052		       a9 00		      lda	#0
   5010  f054		       85 ae		      sta	tempPointer5
   5011  f056		       f0 02		      beq	.SAtLeast1Exit
   5012  f058				   .SSaveInline
   5013  f058		       85 ac		      sta	tempPointer4
   5014  f05a				   .SAtLeast1Exit
   5015  f05a		       a5 ac		      lda	tempPointer4
   5016  f05c		       d0 26		      bne	.SNoInlineExit
   5017  f05e		       a5 aa		      lda	temp3
   5018  f060		       f0 0f		      beq	.SEastInline
   5019  f062		       c9 01		      cmp	#$1
   5020  f064		       f0 11		      beq	.SSouthInline
   5021  f066		       c9 02		      cmp	#$2
   5022  f068		       f0 13		      beq	.SWestInline
   5023  f06a				   .SNorthInline
   5024  f06a		       88		      dey
   5025  f06b		       20 ea f0 	      jsr	SRemoveHEdge
   5026  f06e		       4c 84 f0 	      jmp	.SNoInlineExit
   5027  f071				   .SEastInline
   5028  f071		       20 e6 f0 	      jsr	SRemoveVEdge
   5029  f074		       4c 84 f0 	      jmp	.SNoInlineExit
   5030  f077				   .SSouthInline
   5031  f077		       20 ea f0 	      jsr	SRemoveHEdge
   5032  f07a		       4c 84 f0 	      jmp	.SNoInlineExit
   5033  f07d				   .SWestInline
   5034  f07d		       ca		      dex
   5035  f07e		       20 e6 f0 	      jsr	SRemoveVEdge
   5036  f081		       4c 84 f0 	      jmp	.SNoInlineExit
   5037  f084				   .SNoInlineExit
   5038  f084		       a6 a8		      ldx	temp1
   5039  f086		       a4 a9		      ldy	temp2
   5040  f088
   5041  f088		       a5 ae		      lda	tempPointer5
   5042  f08a		       d0 23		      bne	.SNoAdjacentExit
   5043  f08c		       a5 aa		      lda	temp3
   5044  f08e		       f0 0e		      beq	.SEastAdjacent
   5045  f090		       c9 01		      cmp	#$1
   5046  f092		       f0 10		      beq	.SSouthAdjacent
   5047  f094		       c9 02		      cmp	#$2
   5048  f096		       f0 13		      beq	.SWestAdjacent
   5049  f098				   .SNorthAdjacent
   5050  f098		       20 e6 f0 	      jsr	SRemoveVEdge
   5051  f09b		       4c af f0 	      jmp	.SNoAdjacentExit
   5052  f09e				   .SEastAdjacent
   5053  f09e		       20 ea f0 	      jsr	SRemoveHEdge
   5054  f0a1		       4c af f0 	      jmp	.SNoAdjacentExit
   5055  f0a4				   .SSouthAdjacent
   5056  f0a4		       ca		      dex
   5057  f0a5		       20 e6 f0 	      jsr	SRemoveVEdge
   5058  f0a8		       4c af f0 	      jmp	.SNoAdjacentExit
   5059  f0ab				   .SWestAdjacent
   5060  f0ab		       88		      dey
   5061  f0ac		       20 ea f0 	      jsr	SRemoveHEdge
   5062  f0af				   .SNoAdjacentExit
   5063  f0af				   .SPrepareForNextIteration
   5064  f0af		       c6 ab		      dec	temp4
   5065  f0b1		       d0 11		      bne	.SSkipTurning
   5066  f0b3		       e6 aa		      inc	temp3
   5067  f0b5		       a5 aa		      lda	temp3
   5068  f0b7		       29 03		      and	#$03
   5069  f0b9		       85 aa		      sta	temp3	;Turn to the right
   5070  f0bb
   5071  f0bb		       c6 ad		      dec	temp5	;Get the number of steps needed before turning again
   5072  f0bd		       a5 ad		      lda	temp5
   5073  f0bf		       4a		      lsr
   5074  f0c0		       f0 23		      beq	.SMazeComplete
   5075  f0c2		       85 ab		      sta	temp4
   5076  f0c4				   .SSkipTurning
   5077  f0c4		       a6 a8		      ldx	temp1
   5078  f0c6		       a4 a9		      ldy	temp2
   5079  f0c8		       a5 aa		      lda	temp3
   5080  f0ca		       f0 0b		      beq	.SMoveEast
   5081  f0cc		       c9 01		      cmp	#$1
   5082  f0ce		       f0 0a		      beq	.SMoveSouth
   5083  f0d0		       c9 02		      cmp	#$2
   5084  f0d2		       f0 09		      beq	.SMoveWest
   5085  f0d4				   .SMoveNorth
   5086  f0d4		       88		      dey
   5087  f0d5		       10 07		      bpl	.SNextIteration
   5088  f0d7				   .SMoveEast
   5089  f0d7		       e8		      inx
   5090  f0d8		       10 04		      bpl	.SNextIteration
   5091  f0da				   .SMoveSouth
   5092  f0da		       c8		      iny
   5093  f0db		       10 01		      bpl	.SNextIteration
   5094  f0dd				   .SMoveWest
   5095  f0dd		       ca		      dex
   5096  f0de				   .SNextIteration
   5097  f0de		       86 a8		      stx	temp1
   5098  f0e0		       84 a9		      sty	temp2
   5099  f0e2		       4c 0b f0 	      jmp	.SMazeGenerationLoop
   5100  f0e5				   .SMazeComplete
   5101  f0e5		       60		      rts
   5102  f0e6
   5103  f0e6				   SRemoveVEdge SUBROUTINE		;Removes the specified vertical edge from the maze, using X and Y as x and y.
   5104  f0e6		       a9 c3		      lda	#vEdges
   5105  f0e8		       d0 02		      bne	.SRemoveEdge	;RAM is located between $80 and $FF, so this is always true, and saves a byte over jmp
   5106  f0ea				   SRemoveHEdge
   5107  f0ea		       a9 cb		      lda	#hEdges
   5108  f0ec				   .SRemoveEdge
   5109  f0ec		       85 b1		      sta	tempPointer1
   5110  f0ee		       a9 00		      lda	#0
   5111  f0f0		       85 b2		      sta	tempPointer1+1
   5112  f0f2		       b1 b1		      lda	(tempPointer1),y	;Gets the relevant row of vertical edges
   5113  f0f4		       85 af		      sta	temp6
   5114  f0f6		       a9 01		      lda	#1
   5115  f0f8				   .SShiftingLoop
   5116  f0f8		       e0 00		      cpx	#0
   5117  f0fa		       f0 04		      beq	.SAfterShifting
   5118  f0fc		       0a		      asl
   5119  f0fd		       ca		      dex
   5120  f0fe		       10 f8		      bpl	.SShiftingLoop	;Should always be true, just saves a byte over jmp
   5121  f100				   .SAfterShifting
   5122  f100							;A now contains a decoded y value
   5123  f100		       49 ff		      eor	#$FF
   5124  f102							;A now contains all 1s, except for a 0 in the correct spot for the edge to be removed
   5125  f102		       25 af		      and	temp6
   5126  f104		       91 b1		      sta	(tempPointer1),y
   5127  f106		       60		      rts
   5128  f107
   5129  f107				   SClearMazeData SUBROUTINE		;Sets all the vertical and horizontal edges of the maze to 1 (walls).
   5130  f107		       a0 0e		      ldy	#14
   5131  f109		       a9 c3		      lda	#vEdges
   5132  f10b		       85 b1		      sta	tempPointer1
   5133  f10d		       a9 00		      lda	#0
   5134  f10f		       85 b2		      sta	tempPointer1+1
   5135  f111		       a9 ff		      lda	#%11111111
   5136  f113				   .SClearMazeLoop
   5137  f113		       91 b1		      sta	(tempPointer1),y
   5138  f115		       88		      dey
   5139  f116		       10 fb		      bpl	.SClearMazeLoop
   5140  f118		       60		      rts
   5141  f119
   5142  f119				   SGetMazeRoomData SUBROUTINE		;Returns the four edges (0000NSEW) of the room specified by X and Y
   5143  f119		       86 ab		      stx	temp4
   5144  f11b		       84 ad		      sty	temp5
   5145  f11d		       a9 00		      lda	#0
   5146  f11f		       85 af		      sta	temp6	;temp6 will store the value to return
   5147  f121
   5148  f121							;Get north edge
   5149  f121		       88		      dey
   5150  f122		       20 5a f1 	      jsr	SGetHEdge
   5151  f125		       05 af		      ora	temp6
   5152  f127		       0a		      asl
   5153  f128		       85 af		      sta	temp6
   5154  f12a
   5155  f12a							;Get south edge
   5156  f12a		       a6 ab		      ldx	temp4
   5157  f12c		       a4 ad		      ldy	temp5
   5158  f12e		       20 5a f1 	      jsr	SGetHEdge
   5159  f131		       05 af		      ora	temp6
   5160  f133		       0a		      asl
   5161  f134		       85 af		      sta	temp6
   5162  f136
   5163  f136							;Get east edge
   5164  f136		       a6 ab		      ldx	temp4
   5165  f138							;Don't need to reload Y
   5166  f138		       20 4e f1 	      jsr	SGetVEdge
   5167  f13b		       05 af		      ora	temp6
   5168  f13d		       0a		      asl
   5169  f13e		       85 af		      sta	temp6
   5170  f140
   5171  f140							;Get west edge
   5172  f140		       a6 ab		      ldx	temp4
   5173  f142		       ca		      dex
   5174  f143		       20 4e f1 	      jsr	SGetVEdge
   5175  f146		       05 af		      ora	temp6
   5176  f148		       85 af		      sta	temp6
   5177  f14a		       60		      rts
   5178  f14b
   5179  f14b				   SGetEdge   SUBROUTINE		;Uses X and Y to return a vertical or horizontal edge in A. Call SGetVEdge or SGetHEdge instead!
   5180  f14b				   .SOutOfBounds
   5181  f14b		       a9 01		      lda	#1
   5182  f14d		       60		      rts
   5183  f14e				   SGetVEdge
   5184  f14e		       e0 00		      cpx	#0
   5185  f150		       30 f9		      bmi	.SOutOfBounds
   5186  f152		       e0 07		      cpx	#(MAZE_WIDTH-1)
   5187  f154		       b0 f5		      bcs	.SOutOfBounds
   5188  f156		       a9 c3		      lda	#vEdges
   5189  f158		       d0 0a		      bne	.SGetNormalEdge
   5190  f15a				   SGetHEdge
   5191  f15a		       c0 00		      cpy	#0
   5192  f15c		       30 ed		      bmi	.SOutOfBounds
   5193  f15e		       c0 07		      cpy	#(MAZE_WIDTH-1)
   5194  f160		       b0 e9		      bcs	.SOutOfBounds
   5195  f162		       a9 cb		      lda	#hEdges
   5196  f164				   .SGetNormalEdge
   5197  f164		       85 b1		      sta	tempPointer1
   5198  f166		       a9 00		      lda	#0
   5199  f168		       85 b2		      sta	tempPointer1+1
   5200  f16a		       b1 b1		      lda	(tempPointer1),y
   5201  f16c				   .SShiftingLoop
   5202  f16c		       ca		      dex
   5203  f16d		       30 04		      bmi	.SDoneShifting
   5204  f16f		       4a		      lsr
   5205  f170		       4c 6c f1 	      jmp	.SShiftingLoop
   5206  f173				   .SDoneShifting
   5207  f173		       29 01		      and	#$1
   5208  f175		       60		      rts
   5209  f176
   5210  f176				   SMazeLeftMask
   5211  f176		       08		      .byte.b	%00001000
   5212  f177				   SMazeForwardMask
   5213  f177		       02		      .byte.b	%00000010
   5214  f178				   SMazeRightMask
   5215  f178		       04		      .byte.b	%00000100
   5216  f179				   SMazeBackwardMask
   5217  f179		       01		      .byte.b	%00000001
   5218  f17a		       08		      .byte.b	%00001000
   5219  f17b		       02		      .byte.b	%00000010
   5220  f17c		       04		      .byte.b	%00000100
   5221  f17d
   5222  f17d				   SUpdateMazeRenderingPointers SUBROUTINE
   5223  f17d		       a6 a2		      ldx	playerX
   5224  f17f		       a4 a3		      ldy	playerY
   5225  f181		       a5 a4		      lda	playerFacing
   5226  f183		       f0 19		      beq	.SFacingEast
   5227  f185		       c9 01		      cmp	#1
   5228  f187		       f0 27		      beq	.SFacingSouth
   5229  f189		       c9 02		      cmp	#2
   5230  f18b		       f0 34		      beq	.SFacingWest
   5231  f18d				   .SFacingNorth
   5232  f18d		       88		      dey
   5233  f18e		       20 19 f1 	      jsr	SGetMazeRoomData
   5234  f191		       85 a8		      sta	temp1
   5235  f193		       a6 a2		      ldx	playerX
   5236  f195		       88		      dey
   5237  f196		       20 19 f1 	      jsr	SGetMazeRoomData
   5238  f199		       85 a9		      sta	temp2
   5239  f19b		       4c ce f1 	      jmp	.SUpdatePointers
   5240  f19e				   .SFacingEast
   5241  f19e		       e8		      inx
   5242  f19f		       20 19 f1 	      jsr	SGetMazeRoomData
   5243  f1a2		       85 a8		      sta	temp1
   5244  f1a4		       a6 a2		      ldx	playerX
   5245  f1a6		       e8		      inx
   5246  f1a7		       e8		      inx
   5247  f1a8		       20 19 f1 	      jsr	SGetMazeRoomData
   5248  f1ab		       85 a9		      sta	temp2
   5249  f1ad		       4c ce f1 	      jmp	.SUpdatePointers
   5250  f1b0				   .SFacingSouth
   5251  f1b0		       c8		      iny
   5252  f1b1		       20 19 f1 	      jsr	SGetMazeRoomData
   5253  f1b4		       85 a8		      sta	temp1
   5254  f1b6		       a6 a2		      ldx	playerX
   5255  f1b8		       c8		      iny
   5256  f1b9		       20 19 f1 	      jsr	SGetMazeRoomData
   5257  f1bc		       85 a9		      sta	temp2
   5258  f1be		       4c ce f1 	      jmp	.SUpdatePointers
   5259  f1c1				   .SFacingWest
   5260  f1c1		       ca		      dex
   5261  f1c2		       20 19 f1 	      jsr	SGetMazeRoomData
   5262  f1c5		       85 a8		      sta	temp1
   5263  f1c7		       a6 a2		      ldx	playerX
   5264  f1c9		       20 19 f1 	      jsr	SGetMazeRoomData
   5265  f1cc		       85 a9		      sta	temp2
   5266  f1ce				   .SUpdatePointers
   5267  f1ce		       a5 a8		      lda	temp1
   5268  f1d0		       a4 a4		      ldy	playerFacing
   5269  f1d2		       39 79 f1 	      and	SMazeBackwardMask,y
   5270  f1d5		       f0 17		      beq	.SAtLeast1Room
   5271  f1d7		       a9 27		      lda	#(RDeadEnd1 & $FF)
   5272  f1d9		       85 b3		      sta	tempPointer2
   5273  f1db		       85 ad		      sta	temp5
   5274  f1dd		       a9 4e		      lda	#(RDeadEnd2 & $FF)
   5275  f1df		       85 b5		      sta	tempPointer3
   5276  f1e1		       85 ab		      sta	temp4
   5277  f1e3		       a9 ff		      lda	#(RDeadEnd1 >> 8 & $FF)
   5278  f1e5		       85 b4		      sta	tempPointer2+1
   5279  f1e7		       85 b6		      sta	tempPointer3+1
   5280  f1e9		       85 ac		      sta	tempPointer4
   5281  f1eb		       85 ae		      sta	tempPointer5
   5282  f1ed		       60		      rts
   5283  f1ee				   .SAtLeast1Room
   5284  f1ee		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5285  f1f0		       85 b4		      sta	tempPointer2+1
   5286  f1f2		       a5 a8		      lda	temp1
   5287  f1f4		       39 76 f1 	      and	SMazeLeftMask,y
   5288  f1f7		       d0 07		      bne	.SNoNearLeftDoor
   5289  f1f9		       a9 00		      lda	#(RNearDoor & $FF)
   5290  f1fb		       85 b3		      sta	tempPointer2
   5291  f1fd		       4c 04 f2 	      jmp	.SCheckForNearRightDoor
   5292  f200				   .SNoNearLeftDoor
   5293  f200		       a9 27		      lda	#(RNoNearDoor & $FF)
   5294  f202		       85 b3		      sta	tempPointer2
   5295  f204				   .SCheckForNearRightDoor
   5296  f204		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5297  f206		       85 ae		      sta	tempPointer5
   5298  f208		       a5 a8		      lda	temp1
   5299  f20a		       39 78 f1 	      and	SMazeRightMask,y
   5300  f20d		       d0 07		      bne	.SNoNearRightDoor
   5301  f20f		       a9 00		      lda	#(RNearDoor & $FF)
   5302  f211		       85 ad		      sta	temp5
   5303  f213		       4c 1a f2 	      jmp	.SCheckIfAtLeast2Rooms
   5304  f216				   .SNoNearRightDoor
   5305  f216		       a9 27		      lda	#(RNoNearDoor & $FF)
   5306  f218		       85 ad		      sta	temp5
   5307  f21a				   .SCheckIfAtLeast2Rooms
   5308  f21a		       a5 a8		      lda	temp1
   5309  f21c		       39 77 f1 	      and	SMazeForwardMask,y
   5310  f21f		       f0 0d		      beq	.SAtLeast2Rooms
   5311  f221		       a9 75		      lda	#(ROnly1Room & $FF)
   5312  f223		       85 b5		      sta	tempPointer3
   5313  f225		       85 ab		      sta	temp4
   5314  f227		       a9 ff		      lda	#(ROnly1Room >> 8 & $FF)
   5315  f229		       85 b6		      sta	tempPointer3+1
   5316  f22b		       85 ac		      sta	tempPointer4
   5317  f22d		       60		      rts
   5318  f22e				   .SAtLeast2Rooms
   5319  f22e		       a5 a9		      lda	temp2
   5320  f230		       39 77 f1 	      and	SMazeForwardMask,y
   5321  f233		       d0 2b		      bne	.S2Rooms
   5322  f235				   .SMoreThan2Rooms
   5323  f235		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5324  f237		       85 b6		      sta	tempPointer3+1
   5325  f239		       a5 a9		      lda	temp2
   5326  f23b		       39 76 f1 	      and	SMazeLeftMask,y
   5327  f23e		       d0 07		      bne	.SNoFarLeftDoor1
   5328  f240		       a9 9c		      lda	#(RFarDoor & $FF)
   5329  f242		       85 b5		      sta	tempPointer3
   5330  f244		       4c 4b f2 	      jmp	.SCheckIfFarRightDoor1
   5331  f247				   .SNoFarLeftDoor1
   5332  f247		       a9 c3		      lda	#(RNoFarDoor & $FF)
   5333  f249		       85 b5		      sta	tempPointer3
   5334  f24b				   .SCheckIfFarRightDoor1
   5335  f24b		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5336  f24d		       85 ac		      sta	tempPointer4
   5337  f24f		       a5 a9		      lda	temp2
   5338  f251		       39 78 f1 	      and	SMazeRightMask,y
   5339  f254		       d0 05		      bne	.SNoFarRightDoor1
   5340  f256		       a9 9c		      lda	#(RFarDoor & $FF)
   5341  f258		       85 ab		      sta	temp4
   5342  f25a		       60		      rts
   5343  f25b				   .SNoFarRightDoor1
   5344  f25b		       a9 c3		      lda	#(RNoFarDoor & $FF)
   5345  f25d		       85 ab		      sta	temp4
   5346  f25f		       60		      rts
   5347  f260				   .S2Rooms
   5348  f260		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5349  f262		       85 b6		      sta	tempPointer3+1
   5350  f264		       a5 a9		      lda	temp2
   5351  f266		       39 76 f1 	      and	SMazeLeftMask,y
   5352  f269		       d0 07		      bne	.SNoFarLeftDoor2
   5353  f26b		       a9 4e		      lda	#(RFarDoorOnlyTwo & $FF)
   5354  f26d		       85 b5		      sta	tempPointer3
   5355  f26f		       4c 76 f2 	      jmp	.SCheckIfFarRightDoor2
   5356  f272				   .SNoFarLeftDoor2
   5357  f272		       a9 75		      lda	#(RNoFarDoorOnlyTwo & $FF)
   5358  f274		       85 b5		      sta	tempPointer3
   5359  f276				   .SCheckIfFarRightDoor2
   5360  f276		       a9 fe		      lda	#MAZE_POINTER_PAGE_1
   5361  f278		       85 ac		      sta	tempPointer4
   5362  f27a		       a5 a9		      lda	temp2
   5363  f27c		       39 78 f1 	      and	SMazeRightMask,y
   5364  f27f		       d0 05		      bne	.SNoFarRightDoor2
   5365  f281		       a9 4e		      lda	#(RFarDoorOnlyTwo & $FF)
   5366  f283		       85 ab		      sta	temp4
   5367  f285		       60		      rts
   5368  f286				   .SNoFarRightDoor2
   5369  f286		       a9 75		      lda	#(RNoFarDoorOnlyTwo & $FF)
   5370  f288		       85 ab		      sta	temp4
   5371  f28a		       60		      rts
   5372  f28b
   5373  f28b				   STurnLeft
   5374  f28b		       03		      .byte.b	3
   5375  f28c		       00		      .byte.b	0
   5376  f28d		       01		      .byte.b	1
   5377  f28e		       02		      .byte.b	2
   5378  f28f				   STurnRight
   5379  f28f		       01		      .byte.b	1
   5380  f290		       02		      .byte.b	2
   5381  f291		       03		      .byte.b	3
   5382  f292		       00		      .byte.b	0
   5383  f293
   5384  f293				   SUpdatePlayerMovement SUBROUTINE
   5385  f293		       a5 b9		      lda	currentMenu
   5386  f295		       d0 61		      bne	.SReturnFromPlayerMovement
   5387  f297		       a5 a7		      lda	previousInput
   5388  f299		       29 f0		      and	#$F0
   5389  f29b		       85 a8		      sta	temp1
   5390  f29d		       ad 80 02 	      lda	SWCHA
   5391  f2a0		       29 f0		      and	#$F0
   5392  f2a2		       c5 a8		      cmp	temp1
   5393  f2a4		       f0 52		      beq	.SReturnFromPlayerMovement
   5394  f2a6		       ad 80 02 	      lda	SWCHA
   5395  f2a9		       10 06		      bpl	.SRightPressed
   5396  f2ab		       0a		      asl
   5397  f2ac		       10 0d		      bpl	.SLeftPressed
   5398  f2ae		       4c c2 f2 	      jmp	.SCheckForForwardMovement
   5399  f2b1				   .SRightPressed
   5400  f2b1		       a4 a4		      ldy	playerFacing
   5401  f2b3		       b9 8f f2 	      lda	STurnRight,y
   5402  f2b6		       85 a4		      sta	playerFacing
   5403  f2b8		       4c c2 f2 	      jmp	.SCheckForForwardMovement
   5404  f2bb				   .SLeftPressed
   5405  f2bb		       a4 a4		      ldy	playerFacing
   5406  f2bd		       b9 8b f2 	      lda	STurnLeft,y
   5407  f2c0		       85 a4		      sta	playerFacing
   5408  f2c2				   .SCheckForForwardMovement
   5409  f2c2		       ad 80 02 	      lda	SWCHA
   5410  f2c5		       29 10		      and	#$10
   5411  f2c7		       d0 2f		      bne	.SReturnFromPlayerMovement
   5412  f2c9
   5413  f2c9							;Code for checking if possible to move forward from current direction, and moving if so
   5414  f2c9		       a6 a2		      ldx	playerX
   5415  f2cb		       a4 a3		      ldy	playerY
   5416  f2cd		       20 19 f1 	      jsr	SGetMazeRoomData
   5417  f2d0		       a4 a4		      ldy	playerFacing
   5418  f2d2		       39 77 f1 	      and	SMazeForwardMask,y
   5419  f2d5		       d0 21		      bne	.SReturnFromPlayerMovement	;If equals 1, then there is a wall ahead in this direction
   5420  f2d7
   5421  f2d7							;Possible to move in this direction, so do so.
   5422  f2d7		       a4 a4		      ldy	playerFacing
   5423  f2d9		       f0 0c		      beq	.SEast
   5424  f2db		       88		      dey
   5425  f2dc		       f0 0f		      beq	.SSouth
   5426  f2de		       88		      dey
   5427  f2df		       f0 12		      beq	.SWest
   5428  f2e1
   5429  f2e1				   .SNorth
   5430  f2e1		       a4 a3		      ldy	playerY
   5431  f2e3		       88		      dey
   5432  f2e4		       84 a3		      sty	playerY
   5433  f2e6		       60		      rts
   5434  f2e7				   .SEast
   5435  f2e7		       a6 a2		      ldx	playerX
   5436  f2e9		       e8		      inx
   5437  f2ea		       86 a2		      stx	playerX
   5438  f2ec		       60		      rts
   5439  f2ed				   .SSouth
   5440  f2ed		       a4 a3		      ldy	playerY
   5441  f2ef		       c8		      iny
   5442  f2f0		       84 a3		      sty	playerY
   5443  f2f2		       60		      rts
   5444  f2f3				   .SWest
   5445  f2f3		       a6 a2		      ldx	playerX
   5446  f2f5		       ca		      dex
   5447  f2f6		       86 a2		      stx	playerX
   5448  f2f8				   .SReturnFromPlayerMovement
   5449  f2f8		       60		      rts
   5450  f2f9
   5451  f2f9				   SRandom    SUBROUTINE		;Ticks the random number generator when called
   5452  f2f9		       a5 b7		      lda	rand8
   5453  f2fb		       4a		      lsr
   5454  f2fc		       90 02		      bcc	.SNoEOR
   5455  f2fe		       49 b4		      eor	#$B4
   5456  f300				   .SNoEOR
   5457  f300		       85 b7		      sta	rand8
   5458  f302		       60		      rts
   5459  f303
   5460  f303				   SHighLabelBytes
   5461  f303		       f0		      .byte.b	(SGenerateMazeData >> 8 & $FF)
   5462  f304		       f1		      .byte.b	(SUpdateMazeRenderingPointers >> 8 & $FF)
   5463  f305		       f2		      .byte.b	(SUpdatePlayerMovement >> 8 & $FF)
   5464  f306		       f1		      .byte.b	(SClearMazeData >> 8 & $FF)
   5465  f307
   5466  f307				   SLowLabelBytes
   5467  f307		       04		      .byte.b	(SGenerateMazeData & $FF)
   5468  f308		       7d		      .byte.b	(SUpdateMazeRenderingPointers & $FF)
   5469  f309		       93		      .byte.b	(SUpdatePlayerMovement & $FF)
   5470  f30a		       07		      .byte.b	(SClearMazeData & $FF)
   5471  f30b
   5472  ffb0					      ORG	$FFB0	;Bankswitching nonsense
   5473  ffb0					      RORG	$FFB0
   5474  ffb0
   5475  ffb0				   SRunFunctionForLBank
   5476  ffb0		       ea		      nop		;1
   5477  ffb1		       ea		      nop		;sta $1FF9
   5478  ffb2		       ea		      nop		;3
   5479  ffb3		       b9 03 f3 	      lda	SHighLabelBytes,y	;6
   5480  ffb6		       85 b2		      sta	tempPointer1+1	;8
   5481  ffb8		       b9 07 f3 	      lda	SLowLabelBytes,y	;11
   5482  ffbb		       85 b1		      sta	tempPointer1	;13
   5483  ffbd		       a9 ff		      lda	#(SReturnLocation >> 8 & $FF)	;15
   5484  ffbf		       48		      pha		;16
   5485  ffc0		       a9 c3		      lda	#(SReturnLocation & $FF)	;18
   5486  ffc2		       48		      pha		;19
   5487  ffc3				   SReturnLocation
   5488  ffc3		       6c b1 00 	      jmp	(tempPointer1)	;22
   5489  ffc6		       85 f3		      sta	returnValue	;24
   5490  ffc8		       8d f7 1f 	      sta	$1FF7	;Return to L bank ;27
   5491  ffcb		       ea		      nop		;28
   5492  ffcc
   5493  fffa					      ORG	$FFFA
   5494  fffa					      RORG	$FFFA
   5495  fffa
   5496  fffa							;NMI, IRQ, and RESET information
   5497  fffa		       00 f0		      .word.w	SReset
   5498  fffc		       00 f0		      .word.w	SReset
   5499  fffe		       00 f0		      .word.w	SReset
   5500  10000
   5501  10000				    END
